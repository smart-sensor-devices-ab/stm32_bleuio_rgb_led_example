
stm32_bleuio_rgb_led_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a64  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08011d08  08011d08  00021d08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012198  08012198  00022198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080121a0  080121a0  000221a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080121a4  080121a4  000221a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  24000000  080121a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000094  0801223c  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000f4  0801229c  000300f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000116c  24000154  080122fc  00030154  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240012c0  080122fc  000312c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030154  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036852  00000000  00000000  00030182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051a7  00000000  00000000  000669d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d8  00000000  00000000  0006bb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001750  00000000  00000000  0006d458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b6a6  00000000  00000000  0006eba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020bee  00000000  00000000  000aa24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016d77a  00000000  00000000  000cae3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002385b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f8c  00000000  00000000  0023860c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000154 	.word	0x24000154
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011cec 	.word	0x08011cec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000158 	.word	0x24000158
 80002dc:	08011cec 	.word	0x08011cec

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f001 fb22 	bl	8001cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f8ca 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f000 faac 	bl	8000bf0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000698:	f000 f946 	bl	8000928 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800069c:	f000 fa3c 	bl	8000b18 <MX_USART3_UART_Init>
  MX_DMA_Init();
 80006a0:	f000 fa86 	bl	8000bb0 <MX_DMA_Init>
  MX_TIM1_Init();
 80006a4:	f000 f98c 	bl	80009c0 <MX_TIM1_Init>
  MX_USB_HOST_Init();
 80006a8:	f00f fcea 	bl	8010080 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  isBleuIOReady = false;
 80006ac:	4b50      	ldr	r3, [pc, #320]	; (80007f0 <main+0x168>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
  isAdvertising= false;
 80006b2:	4b50      	ldr	r3, [pc, #320]	; (80007f4 <main+0x16c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
  isLEDOn= false;
 80006b8:	4b4f      	ldr	r3, [pc, #316]	; (80007f8 <main+0x170>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
  isConnected= false;
 80006be:	4b4f      	ldr	r3, [pc, #316]	; (80007fc <main+0x174>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
  uartStatus = UART_RX_NONE;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <main+0x178>)
 80006c6:	22ff      	movs	r2, #255	; 0xff
 80006c8:	701a      	strb	r2, [r3, #0]

  // Starts uart recieve interrupt mode
  HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, RXBUFFERSIZE);
 80006ca:	2201      	movs	r2, #1
 80006cc:	494d      	ldr	r1, [pc, #308]	; (8000804 <main+0x17c>)
 80006ce:	484e      	ldr	r0, [pc, #312]	; (8000808 <main+0x180>)
 80006d0:	f00a fe70 	bl	800b3b4 <HAL_UART_Receive_IT>

  // Turns on all LEDs on start up
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Green
 80006d4:	2201      	movs	r2, #1
 80006d6:	2101      	movs	r1, #1
 80006d8:	484c      	ldr	r0, [pc, #304]	; (800080c <main+0x184>)
 80006da:	f005 f8e1 	bl	80058a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET); // Yellow
 80006de:	2201      	movs	r2, #1
 80006e0:	2102      	movs	r1, #2
 80006e2:	484b      	ldr	r0, [pc, #300]	; (8000810 <main+0x188>)
 80006e4:	f005 f8dc 	bl	80058a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Red
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ee:	4847      	ldr	r0, [pc, #284]	; (800080c <main+0x184>)
 80006f0:	f005 f8d6 	bl	80058a0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80006f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f8:	f001 fb7e 	bl	8001df8 <HAL_Delay>

  // Turns off all LEDs except Red
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2101      	movs	r1, #1
 8000700:	4842      	ldr	r0, [pc, #264]	; (800080c <main+0x184>)
 8000702:	f005 f8cd 	bl	80058a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2102      	movs	r1, #2
 800070a:	4841      	ldr	r0, [pc, #260]	; (8000810 <main+0x188>)
 800070c:	f005 f8c8 	bl	80058a0 <HAL_GPIO_WritePin>

  // Sends welcome message to uart
  uart_buf_len = sprintf(uart_tx_buf, "\r\nWelcome to STM32 BleuIO RGB LED Example!\r\nPress 0 to run the ATI command\r\nPress 1 to manually turn on LED\r\nPress 2 to manually turn off LED\r\n");
 8000710:	4940      	ldr	r1, [pc, #256]	; (8000814 <main+0x18c>)
 8000712:	4841      	ldr	r0, [pc, #260]	; (8000818 <main+0x190>)
 8000714:	f010 f942 	bl	801099c <siprintf>
 8000718:	4603      	mov	r3, r0
 800071a:	4a40      	ldr	r2, [pc, #256]	; (800081c <main+0x194>)
 800071c:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 800071e:	4b3f      	ldr	r3, [pc, #252]	; (800081c <main+0x194>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	b29a      	uxth	r2, r3
 8000724:	f04f 33ff 	mov.w	r3, #4294967295
 8000728:	493b      	ldr	r1, [pc, #236]	; (8000818 <main+0x190>)
 800072a:	4837      	ldr	r0, [pc, #220]	; (8000808 <main+0x180>)
 800072c:	f00a fdac 	bl	800b288 <HAL_UART_Transmit>

  // Set LED Strip on and eight different colors (Rainbow Mode)
  Set_LED(0, 255, 0, 0);
 8000730:	2300      	movs	r3, #0
 8000732:	2200      	movs	r2, #0
 8000734:	21ff      	movs	r1, #255	; 0xff
 8000736:	2000      	movs	r0, #0
 8000738:	f000 fe82 	bl	8001440 <Set_LED>
  Set_LED(1, 0, 255, 0);
 800073c:	2300      	movs	r3, #0
 800073e:	22ff      	movs	r2, #255	; 0xff
 8000740:	2100      	movs	r1, #0
 8000742:	2001      	movs	r0, #1
 8000744:	f000 fe7c 	bl	8001440 <Set_LED>
  Set_LED(2, 0, 0, 255);
 8000748:	23ff      	movs	r3, #255	; 0xff
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2002      	movs	r0, #2
 8000750:	f000 fe76 	bl	8001440 <Set_LED>

  Set_LED(3, 46, 89, 128);
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	2259      	movs	r2, #89	; 0x59
 8000758:	212e      	movs	r1, #46	; 0x2e
 800075a:	2003      	movs	r0, #3
 800075c:	f000 fe70 	bl	8001440 <Set_LED>

  Set_LED(4, 156, 233, 100);
 8000760:	2364      	movs	r3, #100	; 0x64
 8000762:	22e9      	movs	r2, #233	; 0xe9
 8000764:	219c      	movs	r1, #156	; 0x9c
 8000766:	2004      	movs	r0, #4
 8000768:	f000 fe6a 	bl	8001440 <Set_LED>
  Set_LED(5, 102, 0, 235);
 800076c:	23eb      	movs	r3, #235	; 0xeb
 800076e:	2200      	movs	r2, #0
 8000770:	2166      	movs	r1, #102	; 0x66
 8000772:	2005      	movs	r0, #5
 8000774:	f000 fe64 	bl	8001440 <Set_LED>
  Set_LED(6, 47, 38, 77);
 8000778:	234d      	movs	r3, #77	; 0x4d
 800077a:	2226      	movs	r2, #38	; 0x26
 800077c:	212f      	movs	r1, #47	; 0x2f
 800077e:	2006      	movs	r0, #6
 8000780:	f000 fe5e 	bl	8001440 <Set_LED>

  Set_LED(7, 255, 200, 0);
 8000784:	2300      	movs	r3, #0
 8000786:	22c8      	movs	r2, #200	; 0xc8
 8000788:	21ff      	movs	r1, #255	; 0xff
 800078a:	2007      	movs	r0, #7
 800078c:	f000 fe58 	bl	8001440 <Set_LED>
  Set_Brightness(40);
 8000790:	2028      	movs	r0, #40	; 0x28
 8000792:	f000 fe85 	bl	80014a0 <Set_Brightness>
  WS2812_Send();
 8000796:	f000 fefb 	bl	8001590 <WS2812_Send>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800079a:	f00f fc97 	bl	80100cc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    // Simple handler for uart input
    handleUartInput(uartStatus);
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <main+0x178>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fb74 	bl	8000e90 <handleUartInput>
    // Inteprets the dongle data
    dongle_interpreter(dongle_response);
 80007a8:	481d      	ldr	r0, [pc, #116]	; (8000820 <main+0x198>)
 80007aa:	f000 fbff 	bl	8000fac <dongle_interpreter>

    // Starts advertising as soon as the Dongle is ready.
    if(!isAdvertising && !isConnected && isBleuIOReady)
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <main+0x16c>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	f083 0301 	eor.w	r3, r3, #1
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d0ee      	beq.n	800079a <main+0x112>
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <main+0x174>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	f083 0301 	eor.w	r3, r3, #1
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d0e7      	beq.n	800079a <main+0x112>
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <main+0x168>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d0e3      	beq.n	800079a <main+0x112>
    {
    	HAL_Delay(200);
 80007d2:	20c8      	movs	r0, #200	; 0xc8
 80007d4:	f001 fb10 	bl	8001df8 <HAL_Delay>
		Set_Brightness(0);
 80007d8:	2000      	movs	r0, #0
 80007da:	f000 fe61 	bl	80014a0 <Set_Brightness>
		WS2812_Send();
 80007de:	f000 fed7 	bl	8001590 <WS2812_Send>
    	writeToDongle((uint8_t*)DONGLE_CMD_AT_ADVSTART);
 80007e2:	4810      	ldr	r0, [pc, #64]	; (8000824 <main+0x19c>)
 80007e4:	f00f fc38 	bl	8010058 <writeToDongle>
    	isAdvertising = true;
 80007e8:	4b02      	ldr	r3, [pc, #8]	; (80007f4 <main+0x16c>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 80007ee:	e7d4      	b.n	800079a <main+0x112>
 80007f0:	240004b4 	.word	0x240004b4
 80007f4:	24000710 	.word	0x24000710
 80007f8:	24000308 	.word	0x24000308
 80007fc:	240004dc 	.word	0x240004dc
 8000800:	2400026a 	.word	0x2400026a
 8000804:	2400026c 	.word	0x2400026c
 8000808:	24000420 	.word	0x24000420
 800080c:	58020400 	.word	0x58020400
 8000810:	58021000 	.word	0x58021000
 8000814:	08011d08 	.word	0x08011d08
 8000818:	24000170 	.word	0x24000170
 800081c:	240004b0 	.word	0x240004b0
 8000820:	2400030c 	.word	0x2400030c
 8000824:	08011d98 	.word	0x08011d98

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b09c      	sub	sp, #112	; 0x70
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000832:	224c      	movs	r2, #76	; 0x4c
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f00f ffee 	bl	8010818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2220      	movs	r2, #32
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f00f ffe8 	bl	8010818 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000848:	2002      	movs	r0, #2
 800084a:	f006 fda7 	bl	800739c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b33      	ldr	r3, [pc, #204]	; (8000920 <SystemClock_Config+0xf8>)
 8000854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000856:	4a32      	ldr	r2, [pc, #200]	; (8000920 <SystemClock_Config+0xf8>)
 8000858:	f023 0301 	bic.w	r3, r3, #1
 800085c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800085e:	4b30      	ldr	r3, [pc, #192]	; (8000920 <SystemClock_Config+0xf8>)
 8000860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	4b2e      	ldr	r3, [pc, #184]	; (8000924 <SystemClock_Config+0xfc>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000870:	4a2c      	ldr	r2, [pc, #176]	; (8000924 <SystemClock_Config+0xfc>)
 8000872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <SystemClock_Config+0xfc>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000884:	bf00      	nop
 8000886:	4b27      	ldr	r3, [pc, #156]	; (8000924 <SystemClock_Config+0xfc>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800088e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000892:	d1f8      	bne.n	8000886 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000894:	2303      	movs	r3, #3
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000898:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800089e:	2301      	movs	r3, #1
 80008a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a2:	2340      	movs	r3, #64	; 0x40
 80008a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a6:	2302      	movs	r3, #2
 80008a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008aa:	2302      	movs	r3, #2
 80008ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008b2:	2318      	movs	r3, #24
 80008b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008ba:	2304      	movs	r3, #4
 80008bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008be:	2302      	movs	r3, #2
 80008c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008c2:	230c      	movs	r3, #12
 80008c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d2:	4618      	mov	r0, r3
 80008d4:	f006 fdac 	bl	8007430 <HAL_RCC_OscConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80008de:	f000 fec5 	bl	800166c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e2:	233f      	movs	r3, #63	; 0x3f
 80008e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2101      	movs	r1, #1
 8000906:	4618      	mov	r0, r3
 8000908:	f007 f9a2 	bl	8007c50 <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000912:	f000 feab 	bl	800166c <Error_Handler>
  }
}
 8000916:	bf00      	nop
 8000918:	3770      	adds	r7, #112	; 0x70
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	58000400 	.word	0x58000400
 8000924:	58024800 	.word	0x58024800

08000928 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800092c:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <MX_ETH_Init+0x80>)
 800092e:	4a1f      	ldr	r2, [pc, #124]	; (80009ac <MX_ETH_Init+0x84>)
 8000930:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000932:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <MX_ETH_Init+0x88>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_ETH_Init+0x88>)
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <MX_ETH_Init+0x88>)
 8000940:	22e1      	movs	r2, #225	; 0xe1
 8000942:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_ETH_Init+0x88>)
 8000946:	2200      	movs	r2, #0
 8000948:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <MX_ETH_Init+0x88>)
 800094c:	2200      	movs	r2, #0
 800094e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_ETH_Init+0x88>)
 8000952:	2200      	movs	r2, #0
 8000954:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_ETH_Init+0x80>)
 8000958:	4a15      	ldr	r2, [pc, #84]	; (80009b0 <MX_ETH_Init+0x88>)
 800095a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_ETH_Init+0x80>)
 800095e:	2201      	movs	r2, #1
 8000960:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_ETH_Init+0x80>)
 8000964:	4a13      	ldr	r2, [pc, #76]	; (80009b4 <MX_ETH_Init+0x8c>)
 8000966:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_ETH_Init+0x80>)
 800096a:	4a13      	ldr	r2, [pc, #76]	; (80009b8 <MX_ETH_Init+0x90>)
 800096c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_ETH_Init+0x80>)
 8000970:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000974:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000976:	480c      	ldr	r0, [pc, #48]	; (80009a8 <MX_ETH_Init+0x80>)
 8000978:	f004 f9cc 	bl	8004d14 <HAL_ETH_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000982:	f000 fe73 	bl	800166c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000986:	2234      	movs	r2, #52	; 0x34
 8000988:	2100      	movs	r1, #0
 800098a:	480c      	ldr	r0, [pc, #48]	; (80009bc <MX_ETH_Init+0x94>)
 800098c:	f00f ff44 	bl	8010818 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <MX_ETH_Init+0x94>)
 8000992:	2221      	movs	r2, #33	; 0x21
 8000994:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_ETH_Init+0x94>)
 8000998:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800099c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800099e:	4b07      	ldr	r3, [pc, #28]	; (80009bc <MX_ETH_Init+0x94>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	24000714 	.word	0x24000714
 80009ac:	40028000 	.word	0x40028000
 80009b0:	24000274 	.word	0x24000274
 80009b4:	240000f4 	.word	0x240000f4
 80009b8:	24000094 	.word	0x24000094
 80009bc:	2400079c 	.word	0x2400079c

080009c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b09a      	sub	sp, #104	; 0x68
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
 80009f0:	615a      	str	r2, [r3, #20]
 80009f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	222c      	movs	r2, #44	; 0x2c
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f00f ff0c 	bl	8010818 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a00:	4b43      	ldr	r3, [pc, #268]	; (8000b10 <MX_TIM1_Init+0x150>)
 8000a02:	4a44      	ldr	r2, [pc, #272]	; (8000b14 <MX_TIM1_Init+0x154>)
 8000a04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a06:	4b42      	ldr	r3, [pc, #264]	; (8000b10 <MX_TIM1_Init+0x150>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0c:	4b40      	ldr	r3, [pc, #256]	; (8000b10 <MX_TIM1_Init+0x150>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64-1;
 8000a12:	4b3f      	ldr	r3, [pc, #252]	; (8000b10 <MX_TIM1_Init+0x150>)
 8000a14:	223f      	movs	r2, #63	; 0x3f
 8000a16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a18:	4b3d      	ldr	r3, [pc, #244]	; (8000b10 <MX_TIM1_Init+0x150>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a1e:	4b3c      	ldr	r3, [pc, #240]	; (8000b10 <MX_TIM1_Init+0x150>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a24:	4b3a      	ldr	r3, [pc, #232]	; (8000b10 <MX_TIM1_Init+0x150>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a2a:	4839      	ldr	r0, [pc, #228]	; (8000b10 <MX_TIM1_Init+0x150>)
 8000a2c:	f008 fffe 	bl	8009a2c <HAL_TIM_Base_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a36:	f000 fe19 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a44:	4619      	mov	r1, r3
 8000a46:	4832      	ldr	r0, [pc, #200]	; (8000b10 <MX_TIM1_Init+0x150>)
 8000a48:	f009 fcc2 	bl	800a3d0 <HAL_TIM_ConfigClockSource>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a52:	f000 fe0b 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a56:	482e      	ldr	r0, [pc, #184]	; (8000b10 <MX_TIM1_Init+0x150>)
 8000a58:	f009 f83f 	bl	8009ada <HAL_TIM_PWM_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a62:	f000 fe03 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a66:	2300      	movs	r3, #0
 8000a68:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a76:	4619      	mov	r1, r3
 8000a78:	4825      	ldr	r0, [pc, #148]	; (8000b10 <MX_TIM1_Init+0x150>)
 8000a7a:	f00a faaf 	bl	800afdc <HAL_TIMEx_MasterConfigSynchronization>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000a84:	f000 fdf2 	bl	800166c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a88:	2360      	movs	r3, #96	; 0x60
 8000a8a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a90:	2300      	movs	r3, #0
 8000a92:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a94:	2300      	movs	r3, #0
 8000a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4818      	ldr	r0, [pc, #96]	; (8000b10 <MX_TIM1_Init+0x150>)
 8000aae:	f009 fb7f 	bl	800a1b0 <HAL_TIM_PWM_ConfigChannel>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000ab8:	f000 fdd8 	bl	800166c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	4619      	mov	r1, r3
 8000af0:	4807      	ldr	r0, [pc, #28]	; (8000b10 <MX_TIM1_Init+0x150>)
 8000af2:	f00a fafb 	bl	800b0ec <HAL_TIMEx_ConfigBreakDeadTime>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000afc:	f000 fdb6 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b00:	4803      	ldr	r0, [pc, #12]	; (8000b10 <MX_TIM1_Init+0x150>)
 8000b02:	f000 fef5 	bl	80018f0 <HAL_TIM_MspPostInit>

}
 8000b06:	bf00      	nop
 8000b08:	3768      	adds	r7, #104	; 0x68
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	240006c4 	.word	0x240006c4
 8000b14:	40010000 	.word	0x40010000

08000b18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b1c:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b1e:	4a23      	ldr	r2, [pc, #140]	; (8000bac <MX_USART3_UART_Init+0x94>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b60:	4811      	ldr	r0, [pc, #68]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b62:	f00a fb41 	bl	800b1e8 <HAL_UART_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b6c:	f000 fd7e 	bl	800166c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b70:	2100      	movs	r1, #0
 8000b72:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b74:	f00c fa5f 	bl	800d036 <HAL_UARTEx_SetTxFifoThreshold>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b7e:	f000 fd75 	bl	800166c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b82:	2100      	movs	r1, #0
 8000b84:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b86:	f00c fa94 	bl	800d0b2 <HAL_UARTEx_SetRxFifoThreshold>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b90:	f000 fd6c 	bl	800166c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b94:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <MX_USART3_UART_Init+0x90>)
 8000b96:	f00c fa15 	bl	800cfc4 <HAL_UARTEx_DisableFifoMode>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ba0:	f000 fd64 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	24000420 	.word	0x24000420
 8000bac:	40004800 	.word	0x40004800

08000bb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <MX_DMA_Init+0x3c>)
 8000bb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bbc:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <MX_DMA_Init+0x3c>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_DMA_Init+0x3c>)
 8000bc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	200c      	movs	r0, #12
 8000bda:	f001 fa2c 	bl	8002036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000bde:	200c      	movs	r0, #12
 8000be0:	f001 fa43 	bl	800206a <HAL_NVIC_EnableIRQ>

}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	58024400 	.word	0x58024400

08000bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08e      	sub	sp, #56	; 0x38
 8000bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	4b72      	ldr	r3, [pc, #456]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	4a70      	ldr	r2, [pc, #448]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000c0e:	f043 0304 	orr.w	r3, r3, #4
 8000c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c16:	4b6e      	ldr	r3, [pc, #440]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	623b      	str	r3, [r7, #32]
 8000c22:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c24:	4b6a      	ldr	r3, [pc, #424]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a69      	ldr	r2, [pc, #420]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000c2c:	f043 0320 	orr.w	r3, r3, #32
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b66      	ldr	r3, [pc, #408]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0320 	and.w	r3, r3, #32
 8000c3e:	61fb      	str	r3, [r7, #28]
 8000c40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c42:	4b63      	ldr	r3, [pc, #396]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	4a61      	ldr	r2, [pc, #388]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c52:	4b5f      	ldr	r3, [pc, #380]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5c:	61bb      	str	r3, [r7, #24]
 8000c5e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c60:	4b5b      	ldr	r3, [pc, #364]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c66:	4a5a      	ldr	r2, [pc, #360]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c70:	4b57      	ldr	r3, [pc, #348]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	4b54      	ldr	r3, [pc, #336]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c84:	4a52      	ldr	r2, [pc, #328]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000c86:	f043 0302 	orr.w	r3, r3, #2
 8000c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8e:	4b50      	ldr	r3, [pc, #320]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	f003 0302 	and.w	r3, r3, #2
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c9c:	4b4c      	ldr	r3, [pc, #304]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca2:	4a4b      	ldr	r2, [pc, #300]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000ca4:	f043 0310 	orr.w	r3, r3, #16
 8000ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cac:	4b48      	ldr	r3, [pc, #288]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cba:	4b45      	ldr	r3, [pc, #276]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc0:	4a43      	ldr	r2, [pc, #268]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000cc2:	f043 0308 	orr.w	r3, r3, #8
 8000cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cca:	4b41      	ldr	r3, [pc, #260]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd0:	f003 0308 	and.w	r3, r3, #8
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd8:	4b3d      	ldr	r3, [pc, #244]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cde:	4a3c      	ldr	r2, [pc, #240]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce8:	4b39      	ldr	r3, [pc, #228]	; (8000dd0 <MX_GPIO_Init+0x1e0>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STRIP_GPIO_Port, LED_STRIP_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2102      	movs	r1, #2
 8000cfa:	4836      	ldr	r0, [pc, #216]	; (8000dd4 <MX_GPIO_Init+0x1e4>)
 8000cfc:	f004 fdd0 	bl	80058a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d06:	4834      	ldr	r0, [pc, #208]	; (8000dd8 <MX_GPIO_Init+0x1e8>)
 8000d08:	f004 fdca 	bl	80058a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d12:	4832      	ldr	r0, [pc, #200]	; (8000ddc <MX_GPIO_Init+0x1ec>)
 8000d14:	f004 fdc4 	bl	80058a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	4830      	ldr	r0, [pc, #192]	; (8000de0 <MX_GPIO_Init+0x1f0>)
 8000d1e:	f004 fdbf 	bl	80058a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d34:	4619      	mov	r1, r3
 8000d36:	482b      	ldr	r0, [pc, #172]	; (8000de4 <MX_GPIO_Init+0x1f4>)
 8000d38:	f004 fc02 	bl	8005540 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_STRIP_Pin */
  GPIO_InitStruct.Pin = LED_STRIP_Pin;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_STRIP_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	4820      	ldr	r0, [pc, #128]	; (8000dd4 <MX_GPIO_Init+0x1e4>)
 8000d54:	f004 fbf4 	bl	8005540 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d58:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4819      	ldr	r0, [pc, #100]	; (8000dd8 <MX_GPIO_Init+0x1e8>)
 8000d72:	f004 fbe5 	bl	8005540 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4813      	ldr	r0, [pc, #76]	; (8000ddc <MX_GPIO_Init+0x1ec>)
 8000d90:	f004 fbd6 	bl	8005540 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d94:	2380      	movs	r3, #128	; 0x80
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <MX_GPIO_Init+0x1f8>)
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da4:	4619      	mov	r1, r3
 8000da6:	4811      	ldr	r0, [pc, #68]	; (8000dec <MX_GPIO_Init+0x1fc>)
 8000da8:	f004 fbca 	bl	8005540 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dac:	2302      	movs	r3, #2
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4807      	ldr	r0, [pc, #28]	; (8000de0 <MX_GPIO_Init+0x1f0>)
 8000dc4:	f004 fbbc 	bl	8005540 <HAL_GPIO_Init>

}
 8000dc8:	bf00      	nop
 8000dca:	3738      	adds	r7, #56	; 0x38
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	58021400 	.word	0x58021400
 8000dd8:	58020400 	.word	0x58020400
 8000ddc:	58020c00 	.word	0x58020c00
 8000de0:	58021000 	.word	0x58021000
 8000de4:	58020800 	.word	0x58020800
 8000de8:	11110000 	.word	0x11110000
 8000dec:	58021800 	.word	0x58021800

08000df0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	if(UartHandle == &huart3)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a17      	ldr	r2, [pc, #92]	; (8000e58 <HAL_UART_RxCpltCallback+0x68>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d127      	bne.n	8000e50 <HAL_UART_RxCpltCallback+0x60>
	{
		RX_value = (int)aRxBuffer[0];
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <HAL_UART_RxCpltCallback+0x6c>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <HAL_UART_RxCpltCallback+0x70>)
 8000e08:	601a      	str	r2, [r3, #0]
		uartStatus = UART_RX_NONE;
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <HAL_UART_RxCpltCallback+0x74>)
 8000e0c:	22ff      	movs	r2, #255	; 0xff
 8000e0e:	701a      	strb	r2, [r3, #0]

		switch(RX_value)
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <HAL_UART_RxCpltCallback+0x70>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b32      	cmp	r3, #50	; 0x32
 8000e16:	d00e      	beq.n	8000e36 <HAL_UART_RxCpltCallback+0x46>
 8000e18:	2b32      	cmp	r3, #50	; 0x32
 8000e1a:	dc10      	bgt.n	8000e3e <HAL_UART_RxCpltCallback+0x4e>
 8000e1c:	2b30      	cmp	r3, #48	; 0x30
 8000e1e:	d002      	beq.n	8000e26 <HAL_UART_RxCpltCallback+0x36>
 8000e20:	2b31      	cmp	r3, #49	; 0x31
 8000e22:	d004      	beq.n	8000e2e <HAL_UART_RxCpltCallback+0x3e>
 8000e24:	e00b      	b.n	8000e3e <HAL_UART_RxCpltCallback+0x4e>
		{
			case UART_RX_0:
			{
				uartStatus = UART_RX_0;
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <HAL_UART_RxCpltCallback+0x74>)
 8000e28:	2230      	movs	r2, #48	; 0x30
 8000e2a:	701a      	strb	r2, [r3, #0]
				break;
 8000e2c:	e00b      	b.n	8000e46 <HAL_UART_RxCpltCallback+0x56>
			}
			case UART_RX_1:
			{
				uartStatus = UART_RX_1;
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <HAL_UART_RxCpltCallback+0x74>)
 8000e30:	2231      	movs	r2, #49	; 0x31
 8000e32:	701a      	strb	r2, [r3, #0]
				break;
 8000e34:	e007      	b.n	8000e46 <HAL_UART_RxCpltCallback+0x56>
			}
			case UART_RX_2:
			{
				uartStatus = UART_RX_2;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_UART_RxCpltCallback+0x74>)
 8000e38:	2232      	movs	r2, #50	; 0x32
 8000e3a:	701a      	strb	r2, [r3, #0]
				break;
 8000e3c:	e003      	b.n	8000e46 <HAL_UART_RxCpltCallback+0x56>
			}
			default:
			{
				uartStatus = UART_RX_NONE;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <HAL_UART_RxCpltCallback+0x74>)
 8000e40:	22ff      	movs	r2, #255	; 0xff
 8000e42:	701a      	strb	r2, [r3, #0]
				break;
 8000e44:	bf00      	nop
			}
		}
		// Resets uart recieve interrupt mode
		HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, RXBUFFERSIZE);
 8000e46:	2201      	movs	r2, #1
 8000e48:	4904      	ldr	r1, [pc, #16]	; (8000e5c <HAL_UART_RxCpltCallback+0x6c>)
 8000e4a:	4803      	ldr	r0, [pc, #12]	; (8000e58 <HAL_UART_RxCpltCallback+0x68>)
 8000e4c:	f00a fab2 	bl	800b3b4 <HAL_UART_Receive_IT>
	}
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	24000420 	.word	0x24000420
 8000e5c:	2400026c 	.word	0x2400026c
 8000e60:	24000270 	.word	0x24000270
 8000e64:	2400026a 	.word	0x2400026a

08000e68 <HAL_TIM_PWM_PulseFinishedCallback>:


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000e70:	2100      	movs	r1, #0
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000e74:	f009 f8ac 	bl	8009fd0 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	601a      	str	r2, [r3, #0]
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	240006c4 	.word	0x240006c4
 8000e8c:	240004b8 	.word	0x240004b8

08000e90 <handleUartInput>:
/**
  * @brief Simple uart input handler
  * @retval None
  */
void handleUartInput(UARTCommandTypeDef cmd)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	switch(cmd)
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2bff      	cmp	r3, #255	; 0xff
 8000e9e:	d06c      	beq.n	8000f7a <handleUartInput+0xea>
 8000ea0:	2bff      	cmp	r3, #255	; 0xff
 8000ea2:	dc66      	bgt.n	8000f72 <handleUartInput+0xe2>
 8000ea4:	2b32      	cmp	r3, #50	; 0x32
 8000ea6:	d04b      	beq.n	8000f40 <handleUartInput+0xb0>
 8000ea8:	2b32      	cmp	r3, #50	; 0x32
 8000eaa:	dc62      	bgt.n	8000f72 <handleUartInput+0xe2>
 8000eac:	2b30      	cmp	r3, #48	; 0x30
 8000eae:	d002      	beq.n	8000eb6 <handleUartInput+0x26>
 8000eb0:	2b31      	cmp	r3, #49	; 0x31
 8000eb2:	d02c      	beq.n	8000f0e <handleUartInput+0x7e>
 8000eb4:	e05d      	b.n	8000f72 <handleUartInput+0xe2>
	{
		case UART_RX_0:
		{
			// 0
			uart_buf_len = sprintf(uart_tx_buf, "\r\n(0 pressed)\r\n");
 8000eb6:	4933      	ldr	r1, [pc, #204]	; (8000f84 <handleUartInput+0xf4>)
 8000eb8:	4833      	ldr	r0, [pc, #204]	; (8000f88 <handleUartInput+0xf8>)
 8000eba:	f00f fd6f 	bl	801099c <siprintf>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4a32      	ldr	r2, [pc, #200]	; (8000f8c <handleUartInput+0xfc>)
 8000ec2:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000ec4:	4b31      	ldr	r3, [pc, #196]	; (8000f8c <handleUartInput+0xfc>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	492e      	ldr	r1, [pc, #184]	; (8000f88 <handleUartInput+0xf8>)
 8000ed0:	482f      	ldr	r0, [pc, #188]	; (8000f90 <handleUartInput+0x100>)
 8000ed2:	f00a f9d9 	bl	800b288 <HAL_UART_Transmit>
			if(isBleuIOReady)
 8000ed6:	4b2f      	ldr	r3, [pc, #188]	; (8000f94 <handleUartInput+0x104>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <handleUartInput+0x56>
			{
				writeToDongle((uint8_t*)DONGLE_CMD_ATI);
 8000ede:	482e      	ldr	r0, [pc, #184]	; (8000f98 <handleUartInput+0x108>)
 8000ee0:	f00f f8ba 	bl	8010058 <writeToDongle>
 8000ee4:	e00f      	b.n	8000f06 <handleUartInput+0x76>
			} else
			{
				uart_buf_len = sprintf(uart_tx_buf, BLEUIO_NOT_READY_MSG);
 8000ee6:	492d      	ldr	r1, [pc, #180]	; (8000f9c <handleUartInput+0x10c>)
 8000ee8:	4827      	ldr	r0, [pc, #156]	; (8000f88 <handleUartInput+0xf8>)
 8000eea:	f00f fd57 	bl	801099c <siprintf>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4a26      	ldr	r2, [pc, #152]	; (8000f8c <handleUartInput+0xfc>)
 8000ef2:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000ef4:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <handleUartInput+0xfc>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	4922      	ldr	r1, [pc, #136]	; (8000f88 <handleUartInput+0xf8>)
 8000f00:	4823      	ldr	r0, [pc, #140]	; (8000f90 <handleUartInput+0x100>)
 8000f02:	f00a f9c1 	bl	800b288 <HAL_UART_Transmit>
			}
			uartStatus = UART_RX_NONE;
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <handleUartInput+0x110>)
 8000f08:	22ff      	movs	r2, #255	; 0xff
 8000f0a:	701a      	strb	r2, [r3, #0]
			break;
 8000f0c:	e036      	b.n	8000f7c <handleUartInput+0xec>
		}
		case UART_RX_1:
		{
			// 1
			uart_buf_len = sprintf(uart_tx_buf, "\r\n(1 pressed LED on!)\r\n");
 8000f0e:	4925      	ldr	r1, [pc, #148]	; (8000fa4 <handleUartInput+0x114>)
 8000f10:	481d      	ldr	r0, [pc, #116]	; (8000f88 <handleUartInput+0xf8>)
 8000f12:	f00f fd43 	bl	801099c <siprintf>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4a1c      	ldr	r2, [pc, #112]	; (8000f8c <handleUartInput+0xfc>)
 8000f1a:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <handleUartInput+0xfc>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	4918      	ldr	r1, [pc, #96]	; (8000f88 <handleUartInput+0xf8>)
 8000f28:	4819      	ldr	r0, [pc, #100]	; (8000f90 <handleUartInput+0x100>)
 8000f2a:	f00a f9ad 	bl	800b288 <HAL_UART_Transmit>
			  Set_Brightness(40);
 8000f2e:	2028      	movs	r0, #40	; 0x28
 8000f30:	f000 fab6 	bl	80014a0 <Set_Brightness>
			  WS2812_Send();
 8000f34:	f000 fb2c 	bl	8001590 <WS2812_Send>
			uartStatus = UART_RX_NONE;
 8000f38:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <handleUartInput+0x110>)
 8000f3a:	22ff      	movs	r2, #255	; 0xff
 8000f3c:	701a      	strb	r2, [r3, #0]
			break;
 8000f3e:	e01d      	b.n	8000f7c <handleUartInput+0xec>
		}
		case UART_RX_2:
		{
			// 2
			uart_buf_len = sprintf(uart_tx_buf, "\r\n(2 pressed LED off!)\r\n");
 8000f40:	4919      	ldr	r1, [pc, #100]	; (8000fa8 <handleUartInput+0x118>)
 8000f42:	4811      	ldr	r0, [pc, #68]	; (8000f88 <handleUartInput+0xf8>)
 8000f44:	f00f fd2a 	bl	801099c <siprintf>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a10      	ldr	r2, [pc, #64]	; (8000f8c <handleUartInput+0xfc>)
 8000f4c:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <handleUartInput+0xfc>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
 8000f58:	490b      	ldr	r1, [pc, #44]	; (8000f88 <handleUartInput+0xf8>)
 8000f5a:	480d      	ldr	r0, [pc, #52]	; (8000f90 <handleUartInput+0x100>)
 8000f5c:	f00a f994 	bl	800b288 <HAL_UART_Transmit>
			  Set_Brightness(0);
 8000f60:	2000      	movs	r0, #0
 8000f62:	f000 fa9d 	bl	80014a0 <Set_Brightness>
			  WS2812_Send();
 8000f66:	f000 fb13 	bl	8001590 <WS2812_Send>

			uartStatus = UART_RX_NONE;
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <handleUartInput+0x110>)
 8000f6c:	22ff      	movs	r2, #255	; 0xff
 8000f6e:	701a      	strb	r2, [r3, #0]
			break;
 8000f70:	e004      	b.n	8000f7c <handleUartInput+0xec>
		{
			break;
		}
		default:
		{
			uartStatus = UART_RX_NONE;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <handleUartInput+0x110>)
 8000f74:	22ff      	movs	r2, #255	; 0xff
 8000f76:	701a      	strb	r2, [r3, #0]
			break;
 8000f78:	e000      	b.n	8000f7c <handleUartInput+0xec>
			break;
 8000f7a:	bf00      	nop
		}
	}
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	08011da8 	.word	0x08011da8
 8000f88:	24000170 	.word	0x24000170
 8000f8c:	240004b0 	.word	0x240004b0
 8000f90:	24000420 	.word	0x24000420
 8000f94:	240004b4 	.word	0x240004b4
 8000f98:	08011db8 	.word	0x08011db8
 8000f9c:	08011dc0 	.word	0x08011dc0
 8000fa0:	2400026a 	.word	0x2400026a
 8000fa4:	08011ddc 	.word	0x08011ddc
 8000fa8:	08011df4 	.word	0x08011df4

08000fac <dongle_interpreter>:
/**
  * @brief Simple dongle interpreter
  * @retval None
  */
void dongle_interpreter(uint8_t * input)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

	if(strlen((char *)input) != 0)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 8224 	beq.w	8001406 <dongle_interpreter+0x45a>
	{
		if(strstr((char *)input, "\r\nADVERTISING...") != NULL)
 8000fbe:	49c3      	ldr	r1, [pc, #780]	; (80012cc <dongle_interpreter+0x320>)
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f00f fd13 	bl	80109ec <strstr>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <dongle_interpreter+0x26>
		{
			isAdvertising = true;
 8000fcc:	4bc0      	ldr	r3, [pc, #768]	; (80012d0 <dongle_interpreter+0x324>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
		}
		if(strstr((char *)input, "\r\nADVERTISING STOPPED.") != NULL)
 8000fd2:	49c0      	ldr	r1, [pc, #768]	; (80012d4 <dongle_interpreter+0x328>)
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f00f fd09 	bl	80109ec <strstr>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d002      	beq.n	8000fe6 <dongle_interpreter+0x3a>
		{
			isAdvertising = false;
 8000fe0:	4bbb      	ldr	r3, [pc, #748]	; (80012d0 <dongle_interpreter+0x324>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
		}
		if(strstr((char *)input, "\r\nCONNECTED") != NULL)
 8000fe6:	49bc      	ldr	r1, [pc, #752]	; (80012d8 <dongle_interpreter+0x32c>)
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f00f fcff 	bl	80109ec <strstr>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d007      	beq.n	8001004 <dongle_interpreter+0x58>
		{
			isConnected = true;
 8000ff4:	4bb9      	ldr	r3, [pc, #740]	; (80012dc <dongle_interpreter+0x330>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	48b8      	ldr	r0, [pc, #736]	; (80012e0 <dongle_interpreter+0x334>)
 8001000:	f004 fc4e 	bl	80058a0 <HAL_GPIO_WritePin>
		}
		if(strstr((char *)input, "\r\nDISCONNECTED") != NULL)
 8001004:	49b7      	ldr	r1, [pc, #732]	; (80012e4 <dongle_interpreter+0x338>)
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f00f fcf0 	bl	80109ec <strstr>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d007      	beq.n	8001022 <dongle_interpreter+0x76>
		{
			isConnected = false;
 8001012:	4bb2      	ldr	r3, [pc, #712]	; (80012dc <dongle_interpreter+0x330>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2102      	movs	r1, #2
 800101c:	48b0      	ldr	r0, [pc, #704]	; (80012e0 <dongle_interpreter+0x334>)
 800101e:	f004 fc3f 	bl	80058a0 <HAL_GPIO_WritePin>
		}
		if(strstr((char *)input, "L=0") != NULL)
 8001022:	49b1      	ldr	r1, [pc, #708]	; (80012e8 <dongle_interpreter+0x33c>)
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f00f fce1 	bl	80109ec <strstr>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d022      	beq.n	8001076 <dongle_interpreter+0xca>
		{
			isLEDOn = false;
 8001030:	4bae      	ldr	r3, [pc, #696]	; (80012ec <dongle_interpreter+0x340>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]

			Set_Brightness(0);
 8001036:	2000      	movs	r0, #0
 8001038:	f000 fa32 	bl	80014a0 <Set_Brightness>
			WS2812_Send();
 800103c:	f000 faa8 	bl	8001590 <WS2812_Send>
			writeToDongle((uint8_t*)DONGLE_SEND_LED_OFF);
 8001040:	48ab      	ldr	r0, [pc, #684]	; (80012f0 <dongle_interpreter+0x344>)
 8001042:	f00f f809 	bl	8010058 <writeToDongle>

			uart_buf_len = sprintf(uart_tx_buf, "\r\nLED is %s\r\n", isLEDOn ? "on":"off");
 8001046:	4ba9      	ldr	r3, [pc, #676]	; (80012ec <dongle_interpreter+0x340>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <dongle_interpreter+0xa6>
 800104e:	4ba9      	ldr	r3, [pc, #676]	; (80012f4 <dongle_interpreter+0x348>)
 8001050:	e000      	b.n	8001054 <dongle_interpreter+0xa8>
 8001052:	4ba9      	ldr	r3, [pc, #676]	; (80012f8 <dongle_interpreter+0x34c>)
 8001054:	461a      	mov	r2, r3
 8001056:	49a9      	ldr	r1, [pc, #676]	; (80012fc <dongle_interpreter+0x350>)
 8001058:	48a9      	ldr	r0, [pc, #676]	; (8001300 <dongle_interpreter+0x354>)
 800105a:	f00f fc9f 	bl	801099c <siprintf>
 800105e:	4603      	mov	r3, r0
 8001060:	4aa8      	ldr	r2, [pc, #672]	; (8001304 <dongle_interpreter+0x358>)
 8001062:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8001064:	4ba7      	ldr	r3, [pc, #668]	; (8001304 <dongle_interpreter+0x358>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	b29a      	uxth	r2, r3
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	49a4      	ldr	r1, [pc, #656]	; (8001300 <dongle_interpreter+0x354>)
 8001070:	48a5      	ldr	r0, [pc, #660]	; (8001308 <dongle_interpreter+0x35c>)
 8001072:	f00a f909 	bl	800b288 <HAL_UART_Transmit>
		}
		if(strstr((char *)input, "L=1") != NULL)
 8001076:	49a5      	ldr	r1, [pc, #660]	; (800130c <dongle_interpreter+0x360>)
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f00f fcb7 	bl	80109ec <strstr>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d022      	beq.n	80010ca <dongle_interpreter+0x11e>
		{
			isLEDOn = true;
 8001084:	4b99      	ldr	r3, [pc, #612]	; (80012ec <dongle_interpreter+0x340>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]

			Set_Brightness(40);
 800108a:	2028      	movs	r0, #40	; 0x28
 800108c:	f000 fa08 	bl	80014a0 <Set_Brightness>
			WS2812_Send();
 8001090:	f000 fa7e 	bl	8001590 <WS2812_Send>
			writeToDongle((uint8_t*)DONGLE_SEND_LED_ON);
 8001094:	489e      	ldr	r0, [pc, #632]	; (8001310 <dongle_interpreter+0x364>)
 8001096:	f00e ffdf 	bl	8010058 <writeToDongle>

			uart_buf_len = sprintf(uart_tx_buf, "\r\nLED is %s\r\n", isLEDOn ? "on":"off");
 800109a:	4b94      	ldr	r3, [pc, #592]	; (80012ec <dongle_interpreter+0x340>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <dongle_interpreter+0xfa>
 80010a2:	4b94      	ldr	r3, [pc, #592]	; (80012f4 <dongle_interpreter+0x348>)
 80010a4:	e000      	b.n	80010a8 <dongle_interpreter+0xfc>
 80010a6:	4b94      	ldr	r3, [pc, #592]	; (80012f8 <dongle_interpreter+0x34c>)
 80010a8:	461a      	mov	r2, r3
 80010aa:	4994      	ldr	r1, [pc, #592]	; (80012fc <dongle_interpreter+0x350>)
 80010ac:	4894      	ldr	r0, [pc, #592]	; (8001300 <dongle_interpreter+0x354>)
 80010ae:	f00f fc75 	bl	801099c <siprintf>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4a93      	ldr	r2, [pc, #588]	; (8001304 <dongle_interpreter+0x358>)
 80010b6:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 80010b8:	4b92      	ldr	r3, [pc, #584]	; (8001304 <dongle_interpreter+0x358>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	b29a      	uxth	r2, r3
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	498f      	ldr	r1, [pc, #572]	; (8001300 <dongle_interpreter+0x354>)
 80010c4:	4890      	ldr	r0, [pc, #576]	; (8001308 <dongle_interpreter+0x35c>)
 80010c6:	f00a f8df 	bl	800b288 <HAL_UART_Transmit>
		}
		if(strstr((char *)input, "L=RED") != NULL)
 80010ca:	4992      	ldr	r1, [pc, #584]	; (8001314 <dongle_interpreter+0x368>)
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f00f fc8d 	bl	80109ec <strstr>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d053      	beq.n	8001180 <dongle_interpreter+0x1d4>
		{

			// Set LEDs to rainbow colors
			Set_LED(0, 255, 0, 0);
 80010d8:	2300      	movs	r3, #0
 80010da:	2200      	movs	r2, #0
 80010dc:	21ff      	movs	r1, #255	; 0xff
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 f9ae 	bl	8001440 <Set_LED>
			Set_LED(1, 255, 0, 0);
 80010e4:	2300      	movs	r3, #0
 80010e6:	2200      	movs	r2, #0
 80010e8:	21ff      	movs	r1, #255	; 0xff
 80010ea:	2001      	movs	r0, #1
 80010ec:	f000 f9a8 	bl	8001440 <Set_LED>
			Set_LED(2, 255, 0, 0);
 80010f0:	2300      	movs	r3, #0
 80010f2:	2200      	movs	r2, #0
 80010f4:	21ff      	movs	r1, #255	; 0xff
 80010f6:	2002      	movs	r0, #2
 80010f8:	f000 f9a2 	bl	8001440 <Set_LED>
			Set_LED(3, 255, 0, 0);
 80010fc:	2300      	movs	r3, #0
 80010fe:	2200      	movs	r2, #0
 8001100:	21ff      	movs	r1, #255	; 0xff
 8001102:	2003      	movs	r0, #3
 8001104:	f000 f99c 	bl	8001440 <Set_LED>
			Set_LED(4, 255, 0, 0);
 8001108:	2300      	movs	r3, #0
 800110a:	2200      	movs	r2, #0
 800110c:	21ff      	movs	r1, #255	; 0xff
 800110e:	2004      	movs	r0, #4
 8001110:	f000 f996 	bl	8001440 <Set_LED>
			Set_LED(5, 255, 0, 0);
 8001114:	2300      	movs	r3, #0
 8001116:	2200      	movs	r2, #0
 8001118:	21ff      	movs	r1, #255	; 0xff
 800111a:	2005      	movs	r0, #5
 800111c:	f000 f990 	bl	8001440 <Set_LED>
			Set_LED(6, 255, 0, 0);
 8001120:	2300      	movs	r3, #0
 8001122:	2200      	movs	r2, #0
 8001124:	21ff      	movs	r1, #255	; 0xff
 8001126:	2006      	movs	r0, #6
 8001128:	f000 f98a 	bl	8001440 <Set_LED>
			Set_LED(7, 255, 0, 0);
 800112c:	2300      	movs	r3, #0
 800112e:	2200      	movs	r2, #0
 8001130:	21ff      	movs	r1, #255	; 0xff
 8001132:	2007      	movs	r0, #7
 8001134:	f000 f984 	bl	8001440 <Set_LED>

			if(isLEDOn)
 8001138:	4b6c      	ldr	r3, [pc, #432]	; (80012ec <dongle_interpreter+0x340>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d002      	beq.n	8001146 <dongle_interpreter+0x19a>
			{
				Set_Brightness(40);
 8001140:	2028      	movs	r0, #40	; 0x28
 8001142:	f000 f9ad 	bl	80014a0 <Set_Brightness>
			}

			WS2812_Send();
 8001146:	f000 fa23 	bl	8001590 <WS2812_Send>
			writeToDongle((uint8_t*)DONGLE_SEND_LED_RED);
 800114a:	4873      	ldr	r0, [pc, #460]	; (8001318 <dongle_interpreter+0x36c>)
 800114c:	f00e ff84 	bl	8010058 <writeToDongle>

			uart_buf_len = sprintf(uart_tx_buf, "\r\nLED is %s\r\n", isLEDOn ? "on":"off");
 8001150:	4b66      	ldr	r3, [pc, #408]	; (80012ec <dongle_interpreter+0x340>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <dongle_interpreter+0x1b0>
 8001158:	4b66      	ldr	r3, [pc, #408]	; (80012f4 <dongle_interpreter+0x348>)
 800115a:	e000      	b.n	800115e <dongle_interpreter+0x1b2>
 800115c:	4b66      	ldr	r3, [pc, #408]	; (80012f8 <dongle_interpreter+0x34c>)
 800115e:	461a      	mov	r2, r3
 8001160:	4966      	ldr	r1, [pc, #408]	; (80012fc <dongle_interpreter+0x350>)
 8001162:	4867      	ldr	r0, [pc, #412]	; (8001300 <dongle_interpreter+0x354>)
 8001164:	f00f fc1a 	bl	801099c <siprintf>
 8001168:	4603      	mov	r3, r0
 800116a:	4a66      	ldr	r2, [pc, #408]	; (8001304 <dongle_interpreter+0x358>)
 800116c:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 800116e:	4b65      	ldr	r3, [pc, #404]	; (8001304 <dongle_interpreter+0x358>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	b29a      	uxth	r2, r3
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
 8001178:	4961      	ldr	r1, [pc, #388]	; (8001300 <dongle_interpreter+0x354>)
 800117a:	4863      	ldr	r0, [pc, #396]	; (8001308 <dongle_interpreter+0x35c>)
 800117c:	f00a f884 	bl	800b288 <HAL_UART_Transmit>
		}
		if(strstr((char *)input, "L=GREEN") != NULL)
 8001180:	4966      	ldr	r1, [pc, #408]	; (800131c <dongle_interpreter+0x370>)
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f00f fc32 	bl	80109ec <strstr>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d053      	beq.n	8001236 <dongle_interpreter+0x28a>
		{


			// Set LEDs to rainbow colors
			Set_LED(0,  0, 255, 0);
 800118e:	2300      	movs	r3, #0
 8001190:	22ff      	movs	r2, #255	; 0xff
 8001192:	2100      	movs	r1, #0
 8001194:	2000      	movs	r0, #0
 8001196:	f000 f953 	bl	8001440 <Set_LED>
			Set_LED(1,  0, 255, 0);
 800119a:	2300      	movs	r3, #0
 800119c:	22ff      	movs	r2, #255	; 0xff
 800119e:	2100      	movs	r1, #0
 80011a0:	2001      	movs	r0, #1
 80011a2:	f000 f94d 	bl	8001440 <Set_LED>
			Set_LED(2,  0, 255, 0);
 80011a6:	2300      	movs	r3, #0
 80011a8:	22ff      	movs	r2, #255	; 0xff
 80011aa:	2100      	movs	r1, #0
 80011ac:	2002      	movs	r0, #2
 80011ae:	f000 f947 	bl	8001440 <Set_LED>
			Set_LED(3,  0, 255, 0);
 80011b2:	2300      	movs	r3, #0
 80011b4:	22ff      	movs	r2, #255	; 0xff
 80011b6:	2100      	movs	r1, #0
 80011b8:	2003      	movs	r0, #3
 80011ba:	f000 f941 	bl	8001440 <Set_LED>
			Set_LED(4,  0, 255, 0);
 80011be:	2300      	movs	r3, #0
 80011c0:	22ff      	movs	r2, #255	; 0xff
 80011c2:	2100      	movs	r1, #0
 80011c4:	2004      	movs	r0, #4
 80011c6:	f000 f93b 	bl	8001440 <Set_LED>
			Set_LED(5,  0, 255, 0);
 80011ca:	2300      	movs	r3, #0
 80011cc:	22ff      	movs	r2, #255	; 0xff
 80011ce:	2100      	movs	r1, #0
 80011d0:	2005      	movs	r0, #5
 80011d2:	f000 f935 	bl	8001440 <Set_LED>
			Set_LED(6,  0, 255, 0);
 80011d6:	2300      	movs	r3, #0
 80011d8:	22ff      	movs	r2, #255	; 0xff
 80011da:	2100      	movs	r1, #0
 80011dc:	2006      	movs	r0, #6
 80011de:	f000 f92f 	bl	8001440 <Set_LED>
			Set_LED(7,  0, 255, 0);
 80011e2:	2300      	movs	r3, #0
 80011e4:	22ff      	movs	r2, #255	; 0xff
 80011e6:	2100      	movs	r1, #0
 80011e8:	2007      	movs	r0, #7
 80011ea:	f000 f929 	bl	8001440 <Set_LED>

			if(isLEDOn)
 80011ee:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <dongle_interpreter+0x340>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d002      	beq.n	80011fc <dongle_interpreter+0x250>
			{
				Set_Brightness(40);
 80011f6:	2028      	movs	r0, #40	; 0x28
 80011f8:	f000 f952 	bl	80014a0 <Set_Brightness>
			}

			WS2812_Send();
 80011fc:	f000 f9c8 	bl	8001590 <WS2812_Send>
			writeToDongle((uint8_t*)DONGLE_SEND_LED_GREEN);
 8001200:	4847      	ldr	r0, [pc, #284]	; (8001320 <dongle_interpreter+0x374>)
 8001202:	f00e ff29 	bl	8010058 <writeToDongle>

			uart_buf_len = sprintf(uart_tx_buf, "\r\nLED is %s\r\n", isLEDOn ? "on":"off");
 8001206:	4b39      	ldr	r3, [pc, #228]	; (80012ec <dongle_interpreter+0x340>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <dongle_interpreter+0x266>
 800120e:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <dongle_interpreter+0x348>)
 8001210:	e000      	b.n	8001214 <dongle_interpreter+0x268>
 8001212:	4b39      	ldr	r3, [pc, #228]	; (80012f8 <dongle_interpreter+0x34c>)
 8001214:	461a      	mov	r2, r3
 8001216:	4939      	ldr	r1, [pc, #228]	; (80012fc <dongle_interpreter+0x350>)
 8001218:	4839      	ldr	r0, [pc, #228]	; (8001300 <dongle_interpreter+0x354>)
 800121a:	f00f fbbf 	bl	801099c <siprintf>
 800121e:	4603      	mov	r3, r0
 8001220:	4a38      	ldr	r2, [pc, #224]	; (8001304 <dongle_interpreter+0x358>)
 8001222:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 8001224:	4b37      	ldr	r3, [pc, #220]	; (8001304 <dongle_interpreter+0x358>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	b29a      	uxth	r2, r3
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	4934      	ldr	r1, [pc, #208]	; (8001300 <dongle_interpreter+0x354>)
 8001230:	4835      	ldr	r0, [pc, #212]	; (8001308 <dongle_interpreter+0x35c>)
 8001232:	f00a f829 	bl	800b288 <HAL_UART_Transmit>
		}
		if(strstr((char *)input, "L=BLUE") != NULL)
 8001236:	493b      	ldr	r1, [pc, #236]	; (8001324 <dongle_interpreter+0x378>)
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f00f fbd7 	bl	80109ec <strstr>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 8085 	beq.w	8001350 <dongle_interpreter+0x3a4>
		{

			// Set LEDs to rainbow colors
			Set_LED(0, 0, 0, 255);
 8001246:	23ff      	movs	r3, #255	; 0xff
 8001248:	2200      	movs	r2, #0
 800124a:	2100      	movs	r1, #0
 800124c:	2000      	movs	r0, #0
 800124e:	f000 f8f7 	bl	8001440 <Set_LED>
			Set_LED(1, 0, 0, 255);
 8001252:	23ff      	movs	r3, #255	; 0xff
 8001254:	2200      	movs	r2, #0
 8001256:	2100      	movs	r1, #0
 8001258:	2001      	movs	r0, #1
 800125a:	f000 f8f1 	bl	8001440 <Set_LED>
			Set_LED(2, 0, 0, 255);
 800125e:	23ff      	movs	r3, #255	; 0xff
 8001260:	2200      	movs	r2, #0
 8001262:	2100      	movs	r1, #0
 8001264:	2002      	movs	r0, #2
 8001266:	f000 f8eb 	bl	8001440 <Set_LED>
			Set_LED(3, 0, 0, 255);
 800126a:	23ff      	movs	r3, #255	; 0xff
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	2003      	movs	r0, #3
 8001272:	f000 f8e5 	bl	8001440 <Set_LED>
			Set_LED(4, 0, 0, 255);
 8001276:	23ff      	movs	r3, #255	; 0xff
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	2004      	movs	r0, #4
 800127e:	f000 f8df 	bl	8001440 <Set_LED>
			Set_LED(5, 0, 0, 255);
 8001282:	23ff      	movs	r3, #255	; 0xff
 8001284:	2200      	movs	r2, #0
 8001286:	2100      	movs	r1, #0
 8001288:	2005      	movs	r0, #5
 800128a:	f000 f8d9 	bl	8001440 <Set_LED>
			Set_LED(6, 0, 0, 255);
 800128e:	23ff      	movs	r3, #255	; 0xff
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	2006      	movs	r0, #6
 8001296:	f000 f8d3 	bl	8001440 <Set_LED>
			Set_LED(7, 0, 0, 255);
 800129a:	23ff      	movs	r3, #255	; 0xff
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	2007      	movs	r0, #7
 80012a2:	f000 f8cd 	bl	8001440 <Set_LED>

			if(isLEDOn)
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <dongle_interpreter+0x340>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d002      	beq.n	80012b4 <dongle_interpreter+0x308>
			{
				Set_Brightness(40);
 80012ae:	2028      	movs	r0, #40	; 0x28
 80012b0:	f000 f8f6 	bl	80014a0 <Set_Brightness>
			}

			WS2812_Send();
 80012b4:	f000 f96c 	bl	8001590 <WS2812_Send>
			writeToDongle((uint8_t*)DONGLE_SEND_LED_BLUE);
 80012b8:	481b      	ldr	r0, [pc, #108]	; (8001328 <dongle_interpreter+0x37c>)
 80012ba:	f00e fecd 	bl	8010058 <writeToDongle>

			uart_buf_len = sprintf(uart_tx_buf, "\r\nLED is %s\r\n", isLEDOn ? "on":"off");
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <dongle_interpreter+0x340>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d032      	beq.n	800132c <dongle_interpreter+0x380>
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <dongle_interpreter+0x348>)
 80012c8:	e031      	b.n	800132e <dongle_interpreter+0x382>
 80012ca:	bf00      	nop
 80012cc:	08011e10 	.word	0x08011e10
 80012d0:	24000710 	.word	0x24000710
 80012d4:	08011e24 	.word	0x08011e24
 80012d8:	08011e3c 	.word	0x08011e3c
 80012dc:	240004dc 	.word	0x240004dc
 80012e0:	58021000 	.word	0x58021000
 80012e4:	08011e48 	.word	0x08011e48
 80012e8:	08011e58 	.word	0x08011e58
 80012ec:	24000308 	.word	0x24000308
 80012f0:	08011e5c 	.word	0x08011e5c
 80012f4:	08011e74 	.word	0x08011e74
 80012f8:	08011e78 	.word	0x08011e78
 80012fc:	08011e7c 	.word	0x08011e7c
 8001300:	24000170 	.word	0x24000170
 8001304:	240004b0 	.word	0x240004b0
 8001308:	24000420 	.word	0x24000420
 800130c:	08011e8c 	.word	0x08011e8c
 8001310:	08011e90 	.word	0x08011e90
 8001314:	08011ea4 	.word	0x08011ea4
 8001318:	08011eac 	.word	0x08011eac
 800131c:	08011ec4 	.word	0x08011ec4
 8001320:	08011ecc 	.word	0x08011ecc
 8001324:	08011ee4 	.word	0x08011ee4
 8001328:	08011eec 	.word	0x08011eec
 800132c:	4b3a      	ldr	r3, [pc, #232]	; (8001418 <dongle_interpreter+0x46c>)
 800132e:	461a      	mov	r2, r3
 8001330:	493a      	ldr	r1, [pc, #232]	; (800141c <dongle_interpreter+0x470>)
 8001332:	483b      	ldr	r0, [pc, #236]	; (8001420 <dongle_interpreter+0x474>)
 8001334:	f00f fb32 	bl	801099c <siprintf>
 8001338:	4603      	mov	r3, r0
 800133a:	4a3a      	ldr	r2, [pc, #232]	; (8001424 <dongle_interpreter+0x478>)
 800133c:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 800133e:	4b39      	ldr	r3, [pc, #228]	; (8001424 <dongle_interpreter+0x478>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	b29a      	uxth	r2, r3
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	4935      	ldr	r1, [pc, #212]	; (8001420 <dongle_interpreter+0x474>)
 800134a:	4837      	ldr	r0, [pc, #220]	; (8001428 <dongle_interpreter+0x47c>)
 800134c:	f009 ff9c 	bl	800b288 <HAL_UART_Transmit>
		}
		if(strstr((char *)input, "L=RAINBOW") != NULL)
 8001350:	4936      	ldr	r1, [pc, #216]	; (800142c <dongle_interpreter+0x480>)
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f00f fb4a 	bl	80109ec <strstr>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d053      	beq.n	8001406 <dongle_interpreter+0x45a>
		{

			// Set LEDs to rainbow colors
			Set_LED(0, 255, 0, 0);
 800135e:	2300      	movs	r3, #0
 8001360:	2200      	movs	r2, #0
 8001362:	21ff      	movs	r1, #255	; 0xff
 8001364:	2000      	movs	r0, #0
 8001366:	f000 f86b 	bl	8001440 <Set_LED>
			Set_LED(1, 0, 255, 0);
 800136a:	2300      	movs	r3, #0
 800136c:	22ff      	movs	r2, #255	; 0xff
 800136e:	2100      	movs	r1, #0
 8001370:	2001      	movs	r0, #1
 8001372:	f000 f865 	bl	8001440 <Set_LED>
			Set_LED(2, 0, 0, 255);
 8001376:	23ff      	movs	r3, #255	; 0xff
 8001378:	2200      	movs	r2, #0
 800137a:	2100      	movs	r1, #0
 800137c:	2002      	movs	r0, #2
 800137e:	f000 f85f 	bl	8001440 <Set_LED>
			Set_LED(3, 46, 89, 128);
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	2259      	movs	r2, #89	; 0x59
 8001386:	212e      	movs	r1, #46	; 0x2e
 8001388:	2003      	movs	r0, #3
 800138a:	f000 f859 	bl	8001440 <Set_LED>
			Set_LED(4, 156, 233, 100);
 800138e:	2364      	movs	r3, #100	; 0x64
 8001390:	22e9      	movs	r2, #233	; 0xe9
 8001392:	219c      	movs	r1, #156	; 0x9c
 8001394:	2004      	movs	r0, #4
 8001396:	f000 f853 	bl	8001440 <Set_LED>
			Set_LED(5, 102, 0, 235);
 800139a:	23eb      	movs	r3, #235	; 0xeb
 800139c:	2200      	movs	r2, #0
 800139e:	2166      	movs	r1, #102	; 0x66
 80013a0:	2005      	movs	r0, #5
 80013a2:	f000 f84d 	bl	8001440 <Set_LED>
			Set_LED(6, 47, 38, 77);
 80013a6:	234d      	movs	r3, #77	; 0x4d
 80013a8:	2226      	movs	r2, #38	; 0x26
 80013aa:	212f      	movs	r1, #47	; 0x2f
 80013ac:	2006      	movs	r0, #6
 80013ae:	f000 f847 	bl	8001440 <Set_LED>
			Set_LED(7, 255, 200, 0);
 80013b2:	2300      	movs	r3, #0
 80013b4:	22c8      	movs	r2, #200	; 0xc8
 80013b6:	21ff      	movs	r1, #255	; 0xff
 80013b8:	2007      	movs	r0, #7
 80013ba:	f000 f841 	bl	8001440 <Set_LED>

			if(isLEDOn)
 80013be:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <dongle_interpreter+0x484>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d002      	beq.n	80013cc <dongle_interpreter+0x420>
			{
				Set_Brightness(40);
 80013c6:	2028      	movs	r0, #40	; 0x28
 80013c8:	f000 f86a 	bl	80014a0 <Set_Brightness>
			}

			WS2812_Send();
 80013cc:	f000 f8e0 	bl	8001590 <WS2812_Send>
			writeToDongle((uint8_t*)DONGLE_SEND_LED_RAINBOW);
 80013d0:	4818      	ldr	r0, [pc, #96]	; (8001434 <dongle_interpreter+0x488>)
 80013d2:	f00e fe41 	bl	8010058 <writeToDongle>

			uart_buf_len = sprintf(uart_tx_buf, "\r\nLED is %s\r\n", isLEDOn ? "on":"off");
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <dongle_interpreter+0x484>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <dongle_interpreter+0x436>
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <dongle_interpreter+0x48c>)
 80013e0:	e000      	b.n	80013e4 <dongle_interpreter+0x438>
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <dongle_interpreter+0x46c>)
 80013e4:	461a      	mov	r2, r3
 80013e6:	490d      	ldr	r1, [pc, #52]	; (800141c <dongle_interpreter+0x470>)
 80013e8:	480d      	ldr	r0, [pc, #52]	; (8001420 <dongle_interpreter+0x474>)
 80013ea:	f00f fad7 	bl	801099c <siprintf>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4a0c      	ldr	r2, [pc, #48]	; (8001424 <dongle_interpreter+0x478>)
 80013f2:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)uart_tx_buf, uart_buf_len, HAL_MAX_DELAY);
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <dongle_interpreter+0x478>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	4908      	ldr	r1, [pc, #32]	; (8001420 <dongle_interpreter+0x474>)
 8001400:	4809      	ldr	r0, [pc, #36]	; (8001428 <dongle_interpreter+0x47c>)
 8001402:	f009 ff41 	bl	800b288 <HAL_UART_Transmit>
		}
	}
	memset(&dongle_response, 0, RSP_SIZE);
 8001406:	22f4      	movs	r2, #244	; 0xf4
 8001408:	2100      	movs	r1, #0
 800140a:	480c      	ldr	r0, [pc, #48]	; (800143c <dongle_interpreter+0x490>)
 800140c:	f00f fa04 	bl	8010818 <memset>
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	08011e78 	.word	0x08011e78
 800141c:	08011e7c 	.word	0x08011e7c
 8001420:	24000170 	.word	0x24000170
 8001424:	240004b0 	.word	0x240004b0
 8001428:	24000420 	.word	0x24000420
 800142c:	08011f04 	.word	0x08011f04
 8001430:	24000308 	.word	0x24000308
 8001434:	08011f10 	.word	0x08011f10
 8001438:	08011e74 	.word	0x08011e74
 800143c:	2400030c 	.word	0x2400030c

08001440 <Set_LED>:


void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	b2d9      	uxtb	r1, r3
 8001452:	4a11      	ldr	r2, [pc, #68]	; (8001498 <Set_LED+0x58>)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	b2d9      	uxtb	r1, r3
 800145e:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <Set_LED+0x58>)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	460a      	mov	r2, r1
 8001468:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	b2d9      	uxtb	r1, r3
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <Set_LED+0x58>)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	460a      	mov	r2, r1
 8001478:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2d9      	uxtb	r1, r3
 800147e:	4a06      	ldr	r2, [pc, #24]	; (8001498 <Set_LED+0x58>)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	460a      	mov	r2, r1
 8001488:	70da      	strb	r2, [r3, #3]
}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	24000400 	.word	0x24000400
 800149c:	00000000 	.word	0x00000000

080014a0 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	ed2d 8b02 	vpush	{d8}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b2d      	cmp	r3, #45	; 0x2d
 80014b0:	dd01      	ble.n	80014b6 <Set_Brightness+0x16>
 80014b2:	232d      	movs	r3, #45	; 0x2d
 80014b4:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	e051      	b.n	8001560 <Set_Brightness+0xc0>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 80014bc:	4a32      	ldr	r2, [pc, #200]	; (8001588 <Set_Brightness+0xe8>)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80014c4:	4a31      	ldr	r2, [pc, #196]	; (800158c <Set_Brightness+0xec>)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 80014cc:	2301      	movs	r3, #1
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	e040      	b.n	8001554 <Set_Brightness+0xb4>
		{
			float angle = 90-brightness;  // in degrees
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80014d8:	ee07 3a90 	vmov	s15, r3
 80014dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e0:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;  // in rad
 80014e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014ec:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8001578 <Set_Brightness+0xd8>
 80014f0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80014f4:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8001580 <Set_Brightness+0xe0>
 80014f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001500:	edc7 7a03 	vstr	s15, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8001504:	4a20      	ldr	r2, [pc, #128]	; (8001588 <Set_Brightness+0xe8>)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	441a      	add	r2, r3
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4413      	add	r3, r2
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800151a:	edd7 7a03 	vldr	s15, [r7, #12]
 800151e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001522:	eeb0 0b47 	vmov.f64	d0, d7
 8001526:	f00f fdcf 	bl	80110c8 <tan>
 800152a:	eeb0 6b40 	vmov.f64	d6, d0
 800152e:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001532:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001536:	edc7 7a00 	vstr	s15, [r7]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2d9      	uxtb	r1, r3
 800153e:	4a13      	ldr	r2, [pc, #76]	; (800158c <Set_Brightness+0xec>)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	441a      	add	r2, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4413      	add	r3, r2
 800154a:	460a      	mov	r2, r1
 800154c:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	3301      	adds	r3, #1
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	2b03      	cmp	r3, #3
 8001558:	ddbb      	ble.n	80014d2 <Set_Brightness+0x32>
	for (int i=0; i<MAX_LED; i++)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3301      	adds	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	2b07      	cmp	r3, #7
 8001564:	ddaa      	ble.n	80014bc <Set_Brightness+0x1c>
		}
	}

#endif

}
 8001566:	bf00      	nop
 8001568:	bf00      	nop
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	ecbd 8b02 	vpop	{d8}
 8001572:	bd80      	pop	{r7, pc}
 8001574:	f3af 8000 	nop.w
 8001578:	53c8d4f1 	.word	0x53c8d4f1
 800157c:	400921fb 	.word	0x400921fb
 8001580:	00000000 	.word	0x00000000
 8001584:	40668000 	.word	0x40668000
 8001588:	24000400 	.word	0x24000400
 800158c:	240004bc 	.word	0x240004bc

08001590 <WS2812_Send>:

void WS2812_Send (void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	e036      	b.n	800160e <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 80015a0:	4a2e      	ldr	r2, [pc, #184]	; (800165c <WS2812_Send+0xcc>)
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	785b      	ldrb	r3, [r3, #1]
 80015aa:	041a      	lsls	r2, r3, #16
 80015ac:	492b      	ldr	r1, [pc, #172]	; (800165c <WS2812_Send+0xcc>)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	789b      	ldrb	r3, [r3, #2]
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	431a      	orrs	r2, r3
 80015ba:	4928      	ldr	r1, [pc, #160]	; (800165c <WS2812_Send+0xcc>)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	78db      	ldrb	r3, [r3, #3]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 80015c8:	2317      	movs	r3, #23
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	e019      	b.n	8001602 <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 80015ce:	2201      	movs	r2, #1
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	461a      	mov	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4013      	ands	r3, r2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 80015e0:	4a1f      	ldr	r2, [pc, #124]	; (8001660 <WS2812_Send+0xd0>)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	213c      	movs	r1, #60	; 0x3c
 80015e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80015ea:	e004      	b.n	80015f6 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 80015ec:	4a1c      	ldr	r2, [pc, #112]	; (8001660 <WS2812_Send+0xd0>)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	211e      	movs	r1, #30
 80015f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	3301      	adds	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	3b01      	subs	r3, #1
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	dae2      	bge.n	80015ce <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	3301      	adds	r3, #1
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	2b07      	cmp	r3, #7
 8001612:	ddc5      	ble.n	80015a0 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	e00a      	b.n	8001630 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <WS2812_Send+0xd0>)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	2100      	movs	r1, #0
 8001620:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	3301      	adds	r3, #1
 8001628:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	3301      	adds	r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b31      	cmp	r3, #49	; 0x31
 8001634:	ddf1      	ble.n	800161a <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	b29b      	uxth	r3, r3
 800163a:	4a09      	ldr	r2, [pc, #36]	; (8001660 <WS2812_Send+0xd0>)
 800163c:	2100      	movs	r1, #0
 800163e:	4809      	ldr	r0, [pc, #36]	; (8001664 <WS2812_Send+0xd4>)
 8001640:	f008 faac 	bl	8009b9c <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8001644:	bf00      	nop
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <WS2812_Send+0xd8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0fb      	beq.n	8001646 <WS2812_Send+0xb6>
	datasentflag = 0;
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <WS2812_Send+0xd8>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
}
 8001654:	bf00      	nop
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	240004bc 	.word	0x240004bc
 8001660:	240004e0 	.word	0x240004e0
 8001664:	240006c4 	.word	0x240006c4
 8001668:	240004b8 	.word	0x240004b8

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001674:	e7fe      	b.n	8001674 <Error_Handler+0x8>
	...

08001678 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_MspInit+0x30>)
 8001680:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001684:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <HAL_MspInit+0x30>)
 8001686:	f043 0302 	orr.w	r3, r3, #2
 800168a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_MspInit+0x30>)
 8001690:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	58024400 	.word	0x58024400

080016ac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08e      	sub	sp, #56	; 0x38
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a59      	ldr	r2, [pc, #356]	; (8001830 <HAL_ETH_MspInit+0x184>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	f040 80ab 	bne.w	8001826 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80016d0:	4b58      	ldr	r3, [pc, #352]	; (8001834 <HAL_ETH_MspInit+0x188>)
 80016d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016d6:	4a57      	ldr	r2, [pc, #348]	; (8001834 <HAL_ETH_MspInit+0x188>)
 80016d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016dc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80016e0:	4b54      	ldr	r3, [pc, #336]	; (8001834 <HAL_ETH_MspInit+0x188>)
 80016e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016ea:	623b      	str	r3, [r7, #32]
 80016ec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80016ee:	4b51      	ldr	r3, [pc, #324]	; (8001834 <HAL_ETH_MspInit+0x188>)
 80016f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016f4:	4a4f      	ldr	r2, [pc, #316]	; (8001834 <HAL_ETH_MspInit+0x188>)
 80016f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80016fe:	4b4d      	ldr	r3, [pc, #308]	; (8001834 <HAL_ETH_MspInit+0x188>)
 8001700:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001708:	61fb      	str	r3, [r7, #28]
 800170a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800170c:	4b49      	ldr	r3, [pc, #292]	; (8001834 <HAL_ETH_MspInit+0x188>)
 800170e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001712:	4a48      	ldr	r2, [pc, #288]	; (8001834 <HAL_ETH_MspInit+0x188>)
 8001714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001718:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800171c:	4b45      	ldr	r3, [pc, #276]	; (8001834 <HAL_ETH_MspInit+0x188>)
 800171e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	61bb      	str	r3, [r7, #24]
 8001728:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800172a:	4b42      	ldr	r3, [pc, #264]	; (8001834 <HAL_ETH_MspInit+0x188>)
 800172c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001730:	4a40      	ldr	r2, [pc, #256]	; (8001834 <HAL_ETH_MspInit+0x188>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800173a:	4b3e      	ldr	r3, [pc, #248]	; (8001834 <HAL_ETH_MspInit+0x188>)
 800173c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	4b3a      	ldr	r3, [pc, #232]	; (8001834 <HAL_ETH_MspInit+0x188>)
 800174a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174e:	4a39      	ldr	r2, [pc, #228]	; (8001834 <HAL_ETH_MspInit+0x188>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001758:	4b36      	ldr	r3, [pc, #216]	; (8001834 <HAL_ETH_MspInit+0x188>)
 800175a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	4b33      	ldr	r3, [pc, #204]	; (8001834 <HAL_ETH_MspInit+0x188>)
 8001768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176c:	4a31      	ldr	r2, [pc, #196]	; (8001834 <HAL_ETH_MspInit+0x188>)
 800176e:	f043 0302 	orr.w	r3, r3, #2
 8001772:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001776:	4b2f      	ldr	r3, [pc, #188]	; (8001834 <HAL_ETH_MspInit+0x188>)
 8001778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001784:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <HAL_ETH_MspInit+0x188>)
 8001786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800178a:	4a2a      	ldr	r2, [pc, #168]	; (8001834 <HAL_ETH_MspInit+0x188>)
 800178c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001790:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <HAL_ETH_MspInit+0x188>)
 8001796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80017a2:	2332      	movs	r3, #50	; 0x32
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017b2:	230b      	movs	r3, #11
 80017b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ba:	4619      	mov	r1, r3
 80017bc:	481e      	ldr	r0, [pc, #120]	; (8001838 <HAL_ETH_MspInit+0x18c>)
 80017be:	f003 febf 	bl	8005540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80017c2:	2386      	movs	r3, #134	; 0x86
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017d2:	230b      	movs	r3, #11
 80017d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017da:	4619      	mov	r1, r3
 80017dc:	4817      	ldr	r0, [pc, #92]	; (800183c <HAL_ETH_MspInit+0x190>)
 80017de:	f003 feaf 	bl	8005540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017f4:	230b      	movs	r3, #11
 80017f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fc:	4619      	mov	r1, r3
 80017fe:	4810      	ldr	r0, [pc, #64]	; (8001840 <HAL_ETH_MspInit+0x194>)
 8001800:	f003 fe9e 	bl	8005540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001804:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001816:	230b      	movs	r3, #11
 8001818:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800181a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181e:	4619      	mov	r1, r3
 8001820:	4808      	ldr	r0, [pc, #32]	; (8001844 <HAL_ETH_MspInit+0x198>)
 8001822:	f003 fe8d 	bl	8005540 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001826:	bf00      	nop
 8001828:	3738      	adds	r7, #56	; 0x38
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40028000 	.word	0x40028000
 8001834:	58024400 	.word	0x58024400
 8001838:	58020800 	.word	0x58020800
 800183c:	58020000 	.word	0x58020000
 8001840:	58020400 	.word	0x58020400
 8001844:	58021800 	.word	0x58021800

08001848 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a22      	ldr	r2, [pc, #136]	; (80018e0 <HAL_TIM_Base_MspInit+0x98>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d13d      	bne.n	80018d6 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <HAL_TIM_Base_MspInit+0x9c>)
 800185c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001860:	4a20      	ldr	r2, [pc, #128]	; (80018e4 <HAL_TIM_Base_MspInit+0x9c>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800186a:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <HAL_TIM_Base_MspInit+0x9c>)
 800186c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream1;
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <HAL_TIM_Base_MspInit+0xa0>)
 800187a:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <HAL_TIM_Base_MspInit+0xa4>)
 800187c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_TIM_Base_MspInit+0xa0>)
 8001880:	220b      	movs	r2, #11
 8001882:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_TIM_Base_MspInit+0xa0>)
 8001886:	2240      	movs	r2, #64	; 0x40
 8001888:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HAL_TIM_Base_MspInit+0xa0>)
 800188c:	2200      	movs	r2, #0
 800188e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_TIM_Base_MspInit+0xa0>)
 8001892:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001896:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <HAL_TIM_Base_MspInit+0xa0>)
 800189a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800189e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <HAL_TIM_Base_MspInit+0xa0>)
 80018a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018a6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <HAL_TIM_Base_MspInit+0xa0>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_TIM_Base_MspInit+0xa0>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <HAL_TIM_Base_MspInit+0xa0>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80018ba:	480b      	ldr	r0, [pc, #44]	; (80018e8 <HAL_TIM_Base_MspInit+0xa0>)
 80018bc:	f000 fbf0 	bl	80020a0 <HAL_DMA_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80018c6:	f7ff fed1 	bl	800166c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a06      	ldr	r2, [pc, #24]	; (80018e8 <HAL_TIM_Base_MspInit+0xa0>)
 80018ce:	625a      	str	r2, [r3, #36]	; 0x24
 80018d0:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <HAL_TIM_Base_MspInit+0xa0>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40010000 	.word	0x40010000
 80018e4:	58024400 	.word	0x58024400
 80018e8:	24000290 	.word	0x24000290
 80018ec:	40020028 	.word	0x40020028

080018f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a13      	ldr	r2, [pc, #76]	; (800195c <HAL_TIM_MspPostInit+0x6c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d11f      	bne.n	8001952 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001912:	4b13      	ldr	r3, [pc, #76]	; (8001960 <HAL_TIM_MspPostInit+0x70>)
 8001914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001918:	4a11      	ldr	r2, [pc, #68]	; (8001960 <HAL_TIM_MspPostInit+0x70>)
 800191a:	f043 0310 	orr.w	r3, r3, #16
 800191e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <HAL_TIM_MspPostInit+0x70>)
 8001924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001928:	f003 0310 	and.w	r3, r3, #16
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001934:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001942:	2301      	movs	r3, #1
 8001944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001946:	f107 030c 	add.w	r3, r7, #12
 800194a:	4619      	mov	r1, r3
 800194c:	4805      	ldr	r0, [pc, #20]	; (8001964 <HAL_TIM_MspPostInit+0x74>)
 800194e:	f003 fdf7 	bl	8005540 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001952:	bf00      	nop
 8001954:	3720      	adds	r7, #32
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40010000 	.word	0x40010000
 8001960:	58024400 	.word	0x58024400
 8001964:	58021000 	.word	0x58021000

08001968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b0b8      	sub	sp, #224	; 0xe0
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	22bc      	movs	r2, #188	; 0xbc
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f00e ff45 	bl	8010818 <memset>
  if(huart->Instance==USART3)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a29      	ldr	r2, [pc, #164]	; (8001a38 <HAL_UART_MspInit+0xd0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d14a      	bne.n	8001a2e <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001998:	2302      	movs	r3, #2
 800199a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a2:	f107 0310 	add.w	r3, r7, #16
 80019a6:	4618      	mov	r0, r3
 80019a8:	f006 fcde 	bl	8008368 <HAL_RCCEx_PeriphCLKConfig>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80019b2:	f7ff fe5b 	bl	800166c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80019b6:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <HAL_UART_MspInit+0xd4>)
 80019b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019bc:	4a1f      	ldr	r2, [pc, #124]	; (8001a3c <HAL_UART_MspInit+0xd4>)
 80019be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019c6:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <HAL_UART_MspInit+0xd4>)
 80019c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d4:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <HAL_UART_MspInit+0xd4>)
 80019d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019da:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <HAL_UART_MspInit+0xd4>)
 80019dc:	f043 0308 	orr.w	r3, r3, #8
 80019e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e4:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <HAL_UART_MspInit+0xd4>)
 80019e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80019f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a0c:	2307      	movs	r3, #7
 8001a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a12:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a16:	4619      	mov	r1, r3
 8001a18:	4809      	ldr	r0, [pc, #36]	; (8001a40 <HAL_UART_MspInit+0xd8>)
 8001a1a:	f003 fd91 	bl	8005540 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2100      	movs	r1, #0
 8001a22:	2027      	movs	r0, #39	; 0x27
 8001a24:	f000 fb07 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a28:	2027      	movs	r0, #39	; 0x27
 8001a2a:	f000 fb1e 	bl	800206a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a2e:	bf00      	nop
 8001a30:	37e0      	adds	r7, #224	; 0xe0
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40004800 	.word	0x40004800
 8001a3c:	58024400 	.word	0x58024400
 8001a40:	58020c00 	.word	0x58020c00

08001a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <NMI_Handler+0x4>

08001a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <HardFault_Handler+0x4>

08001a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <MemManage_Handler+0x4>

08001a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <BusFault_Handler+0x4>

08001a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <UsageFault_Handler+0x4>

08001a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a90:	f000 f992 	bl	8001db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <DMA1_Stream1_IRQHandler+0x10>)
 8001a9e:	f001 fe27 	bl	80036f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	24000290 	.word	0x24000290

08001aac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <USART3_IRQHandler+0x10>)
 8001ab2:	f009 fcc5 	bl	800b440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	24000420 	.word	0x24000420

08001ac0 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8001ac6:	f004 f96f 	bl	8005da8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	24000fac 	.word	0x24000fac

08001ad4 <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <OTG_FS_EP1_IN_IRQHandler+0x10>)
 8001ada:	f004 f965 	bl	8005da8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	24000fac 	.word	0x24000fac

08001ae8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <OTG_FS_IRQHandler+0x10>)
 8001aee:	f004 f95b 	bl	8005da8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	24000fac 	.word	0x24000fac

08001afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b04:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <_sbrk+0x5c>)
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <_sbrk+0x60>)
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <_sbrk+0x64>)
 8001b1a:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <_sbrk+0x68>)
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d207      	bcs.n	8001b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b2c:	f00e fe3a 	bl	80107a4 <__errno>
 8001b30:	4603      	mov	r3, r0
 8001b32:	220c      	movs	r2, #12
 8001b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b36:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3a:	e009      	b.n	8001b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <_sbrk+0x64>)
 8001b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	24080000 	.word	0x24080000
 8001b5c:	00000400 	.word	0x00000400
 8001b60:	2400027c 	.word	0x2400027c
 8001b64:	240012c0 	.word	0x240012c0

08001b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <SystemInit+0xec>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b72:	4a38      	ldr	r2, [pc, #224]	; (8001c54 <SystemInit+0xec>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b7c:	4b36      	ldr	r3, [pc, #216]	; (8001c58 <SystemInit+0xf0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	2b06      	cmp	r3, #6
 8001b86:	d807      	bhi.n	8001b98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b88:	4b33      	ldr	r3, [pc, #204]	; (8001c58 <SystemInit+0xf0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f023 030f 	bic.w	r3, r3, #15
 8001b90:	4a31      	ldr	r2, [pc, #196]	; (8001c58 <SystemInit+0xf0>)
 8001b92:	f043 0307 	orr.w	r3, r3, #7
 8001b96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b98:	4b30      	ldr	r3, [pc, #192]	; (8001c5c <SystemInit+0xf4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a2f      	ldr	r2, [pc, #188]	; (8001c5c <SystemInit+0xf4>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ba4:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <SystemInit+0xf4>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001baa:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <SystemInit+0xf4>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	492b      	ldr	r1, [pc, #172]	; (8001c5c <SystemInit+0xf4>)
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <SystemInit+0xf8>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bb6:	4b28      	ldr	r3, [pc, #160]	; (8001c58 <SystemInit+0xf0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bc2:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <SystemInit+0xf0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 030f 	bic.w	r3, r3, #15
 8001bca:	4a23      	ldr	r2, [pc, #140]	; (8001c58 <SystemInit+0xf0>)
 8001bcc:	f043 0307 	orr.w	r3, r3, #7
 8001bd0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001bd2:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <SystemInit+0xf4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001bd8:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <SystemInit+0xf4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001bde:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <SystemInit+0xf4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <SystemInit+0xf4>)
 8001be6:	4a1f      	ldr	r2, [pc, #124]	; (8001c64 <SystemInit+0xfc>)
 8001be8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001bea:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <SystemInit+0xf4>)
 8001bec:	4a1e      	ldr	r2, [pc, #120]	; (8001c68 <SystemInit+0x100>)
 8001bee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001bf0:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <SystemInit+0xf4>)
 8001bf2:	4a1e      	ldr	r2, [pc, #120]	; (8001c6c <SystemInit+0x104>)
 8001bf4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <SystemInit+0xf4>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001bfc:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <SystemInit+0xf4>)
 8001bfe:	4a1b      	ldr	r2, [pc, #108]	; (8001c6c <SystemInit+0x104>)
 8001c00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c02:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <SystemInit+0xf4>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c08:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <SystemInit+0xf4>)
 8001c0a:	4a18      	ldr	r2, [pc, #96]	; (8001c6c <SystemInit+0x104>)
 8001c0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c0e:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <SystemInit+0xf4>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <SystemInit+0xf4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a10      	ldr	r2, [pc, #64]	; (8001c5c <SystemInit+0xf4>)
 8001c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c20:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <SystemInit+0xf4>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <SystemInit+0x108>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <SystemInit+0x10c>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c32:	d202      	bcs.n	8001c3a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c34:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <SystemInit+0x110>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <SystemInit+0x114>)
 8001c3c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c40:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <SystemInit+0xec>)
 8001c44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c48:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000ed00 	.word	0xe000ed00
 8001c58:	52002000 	.word	0x52002000
 8001c5c:	58024400 	.word	0x58024400
 8001c60:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c64:	02020200 	.word	0x02020200
 8001c68:	01ff0000 	.word	0x01ff0000
 8001c6c:	01010280 	.word	0x01010280
 8001c70:	5c001000 	.word	0x5c001000
 8001c74:	ffff0000 	.word	0xffff0000
 8001c78:	51008108 	.word	0x51008108
 8001c7c:	52004000 	.word	0x52004000

08001c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c84:	f7ff ff70 	bl	8001b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c88:	480c      	ldr	r0, [pc, #48]	; (8001cbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c8a:	490d      	ldr	r1, [pc, #52]	; (8001cc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	; (8001cc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c90:	e002      	b.n	8001c98 <LoopCopyDataInit>

08001c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c96:	3304      	adds	r3, #4

08001c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c9c:	d3f9      	bcc.n	8001c92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ca0:	4c0a      	ldr	r4, [pc, #40]	; (8001ccc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca4:	e001      	b.n	8001caa <LoopFillZerobss>

08001ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca8:	3204      	adds	r2, #4

08001caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cac:	d3fb      	bcc.n	8001ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cae:	f00e fd7f 	bl	80107b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cb2:	f7fe fce9 	bl	8000688 <main>
  bx  lr
 8001cb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cb8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001cbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001cc0:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 8001cc4:	080121a8 	.word	0x080121a8
  ldr r2, =_sbss
 8001cc8:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 8001ccc:	240012c0 	.word	0x240012c0

08001cd0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd0:	e7fe      	b.n	8001cd0 <ADC3_IRQHandler>
	...

08001cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cda:	2003      	movs	r0, #3
 8001cdc:	f000 f9a0 	bl	8002020 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ce0:	f006 f96c 	bl	8007fbc <HAL_RCC_GetSysClockFreq>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_Init+0x68>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	4913      	ldr	r1, [pc, #76]	; (8001d40 <HAL_Init+0x6c>)
 8001cf2:	5ccb      	ldrb	r3, [r1, r3]
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_Init+0x68>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <HAL_Init+0x6c>)
 8001d08:	5cd3      	ldrb	r3, [r2, r3]
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
 8001d14:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <HAL_Init+0x70>)
 8001d16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d18:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <HAL_Init+0x74>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f000 f814 	bl	8001d4c <HAL_InitTick>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e002      	b.n	8001d34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d2e:	f7ff fca3 	bl	8001678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	58024400 	.word	0x58024400
 8001d40:	08011f4c 	.word	0x08011f4c
 8001d44:	24000004 	.word	0x24000004
 8001d48:	24000000 	.word	0x24000000

08001d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d54:	4b15      	ldr	r3, [pc, #84]	; (8001dac <HAL_InitTick+0x60>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e021      	b.n	8001da4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d60:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <HAL_InitTick+0x64>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <HAL_InitTick+0x60>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 f985 	bl	8002086 <HAL_SYSTICK_Config>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00e      	b.n	8001da4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b0f      	cmp	r3, #15
 8001d8a:	d80a      	bhi.n	8001da2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f000 f94f 	bl	8002036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d98:	4a06      	ldr	r2, [pc, #24]	; (8001db4 <HAL_InitTick+0x68>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	2400000c 	.word	0x2400000c
 8001db0:	24000000 	.word	0x24000000
 8001db4:	24000008 	.word	0x24000008

08001db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_IncTick+0x20>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_IncTick+0x24>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <HAL_IncTick+0x24>)
 8001dca:	6013      	str	r3, [r2, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	2400000c 	.word	0x2400000c
 8001ddc:	240007d0 	.word	0x240007d0

08001de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return uwTick;
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_GetTick+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	240007d0 	.word	0x240007d0

08001df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e00:	f7ff ffee 	bl	8001de0 <HAL_GetTick>
 8001e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e10:	d005      	beq.n	8001e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_Delay+0x44>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e1e:	bf00      	nop
 8001e20:	f7ff ffde 	bl	8001de0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d8f7      	bhi.n	8001e20 <HAL_Delay+0x28>
  {
  }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2400000c 	.word	0x2400000c

08001e40 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <HAL_GetREVID+0x14>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	0c1b      	lsrs	r3, r3, #16
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	5c001000 	.word	0x5c001000

08001e58 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001e68:	4904      	ldr	r1, [pc, #16]	; (8001e7c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	58000400 	.word	0x58000400

08001e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <__NVIC_SetPriorityGrouping+0x40>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eae:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <__NVIC_SetPriorityGrouping+0x40>)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	60d3      	str	r3, [r2, #12]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00
 8001ec4:	05fa0000 	.word	0x05fa0000

08001ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	f003 0307 	and.w	r3, r3, #7
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	db0b      	blt.n	8001f0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	f003 021f 	and.w	r2, r3, #31
 8001efc:	4907      	ldr	r1, [pc, #28]	; (8001f1c <__NVIC_EnableIRQ+0x38>)
 8001efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f02:	095b      	lsrs	r3, r3, #5
 8001f04:	2001      	movs	r0, #1
 8001f06:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000e100 	.word	0xe000e100

08001f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	db0a      	blt.n	8001f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	490c      	ldr	r1, [pc, #48]	; (8001f6c <__NVIC_SetPriority+0x4c>)
 8001f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f3e:	0112      	lsls	r2, r2, #4
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	440b      	add	r3, r1
 8001f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f48:	e00a      	b.n	8001f60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4908      	ldr	r1, [pc, #32]	; (8001f70 <__NVIC_SetPriority+0x50>)
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	3b04      	subs	r3, #4
 8001f58:	0112      	lsls	r2, r2, #4
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	761a      	strb	r2, [r3, #24]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000e100 	.word	0xe000e100
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f1c3 0307 	rsb	r3, r3, #7
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	bf28      	it	cs
 8001f92:	2304      	movcs	r3, #4
 8001f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	2b06      	cmp	r3, #6
 8001f9c:	d902      	bls.n	8001fa4 <NVIC_EncodePriority+0x30>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3b03      	subs	r3, #3
 8001fa2:	e000      	b.n	8001fa6 <NVIC_EncodePriority+0x32>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	43d9      	mvns	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	4313      	orrs	r3, r2
         );
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fec:	d301      	bcc.n	8001ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00f      	b.n	8002012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <SysTick_Config+0x40>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffa:	210f      	movs	r1, #15
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f7ff ff8e 	bl	8001f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <SysTick_Config+0x40>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200a:	4b04      	ldr	r3, [pc, #16]	; (800201c <SysTick_Config+0x40>)
 800200c:	2207      	movs	r2, #7
 800200e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	e000e010 	.word	0xe000e010

08002020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ff29 	bl	8001e80 <__NVIC_SetPriorityGrouping>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002044:	f7ff ff40 	bl	8001ec8 <__NVIC_GetPriorityGrouping>
 8002048:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f7ff ff90 	bl	8001f74 <NVIC_EncodePriority>
 8002054:	4602      	mov	r2, r0
 8002056:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff5f 	bl	8001f20 <__NVIC_SetPriority>
}
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002074:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff33 	bl	8001ee4 <__NVIC_EnableIRQ>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ffa4 	bl	8001fdc <SysTick_Config>
 8002094:	4603      	mov	r3, r0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80020a8:	f7ff fe9a 	bl	8001de0 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e316      	b.n	80026e6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a66      	ldr	r2, [pc, #408]	; (8002258 <HAL_DMA_Init+0x1b8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d04a      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a65      	ldr	r2, [pc, #404]	; (800225c <HAL_DMA_Init+0x1bc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d045      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a63      	ldr	r2, [pc, #396]	; (8002260 <HAL_DMA_Init+0x1c0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d040      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a62      	ldr	r2, [pc, #392]	; (8002264 <HAL_DMA_Init+0x1c4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d03b      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a60      	ldr	r2, [pc, #384]	; (8002268 <HAL_DMA_Init+0x1c8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d036      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a5f      	ldr	r2, [pc, #380]	; (800226c <HAL_DMA_Init+0x1cc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d031      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a5d      	ldr	r2, [pc, #372]	; (8002270 <HAL_DMA_Init+0x1d0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d02c      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a5c      	ldr	r2, [pc, #368]	; (8002274 <HAL_DMA_Init+0x1d4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d027      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a5a      	ldr	r2, [pc, #360]	; (8002278 <HAL_DMA_Init+0x1d8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d022      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a59      	ldr	r2, [pc, #356]	; (800227c <HAL_DMA_Init+0x1dc>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d01d      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a57      	ldr	r2, [pc, #348]	; (8002280 <HAL_DMA_Init+0x1e0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d018      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a56      	ldr	r2, [pc, #344]	; (8002284 <HAL_DMA_Init+0x1e4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d013      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a54      	ldr	r2, [pc, #336]	; (8002288 <HAL_DMA_Init+0x1e8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00e      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a53      	ldr	r2, [pc, #332]	; (800228c <HAL_DMA_Init+0x1ec>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d009      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a51      	ldr	r2, [pc, #324]	; (8002290 <HAL_DMA_Init+0x1f0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d004      	beq.n	8002158 <HAL_DMA_Init+0xb8>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a50      	ldr	r2, [pc, #320]	; (8002294 <HAL_DMA_Init+0x1f4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d101      	bne.n	800215c <HAL_DMA_Init+0xbc>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_DMA_Init+0xbe>
 800215c:	2300      	movs	r3, #0
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 813b 	beq.w	80023da <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a37      	ldr	r2, [pc, #220]	; (8002258 <HAL_DMA_Init+0x1b8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d04a      	beq.n	8002214 <HAL_DMA_Init+0x174>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a36      	ldr	r2, [pc, #216]	; (800225c <HAL_DMA_Init+0x1bc>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d045      	beq.n	8002214 <HAL_DMA_Init+0x174>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a34      	ldr	r2, [pc, #208]	; (8002260 <HAL_DMA_Init+0x1c0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d040      	beq.n	8002214 <HAL_DMA_Init+0x174>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a33      	ldr	r2, [pc, #204]	; (8002264 <HAL_DMA_Init+0x1c4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d03b      	beq.n	8002214 <HAL_DMA_Init+0x174>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a31      	ldr	r2, [pc, #196]	; (8002268 <HAL_DMA_Init+0x1c8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d036      	beq.n	8002214 <HAL_DMA_Init+0x174>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a30      	ldr	r2, [pc, #192]	; (800226c <HAL_DMA_Init+0x1cc>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d031      	beq.n	8002214 <HAL_DMA_Init+0x174>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a2e      	ldr	r2, [pc, #184]	; (8002270 <HAL_DMA_Init+0x1d0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d02c      	beq.n	8002214 <HAL_DMA_Init+0x174>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a2d      	ldr	r2, [pc, #180]	; (8002274 <HAL_DMA_Init+0x1d4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d027      	beq.n	8002214 <HAL_DMA_Init+0x174>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a2b      	ldr	r2, [pc, #172]	; (8002278 <HAL_DMA_Init+0x1d8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d022      	beq.n	8002214 <HAL_DMA_Init+0x174>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a2a      	ldr	r2, [pc, #168]	; (800227c <HAL_DMA_Init+0x1dc>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d01d      	beq.n	8002214 <HAL_DMA_Init+0x174>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a28      	ldr	r2, [pc, #160]	; (8002280 <HAL_DMA_Init+0x1e0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d018      	beq.n	8002214 <HAL_DMA_Init+0x174>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a27      	ldr	r2, [pc, #156]	; (8002284 <HAL_DMA_Init+0x1e4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d013      	beq.n	8002214 <HAL_DMA_Init+0x174>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a25      	ldr	r2, [pc, #148]	; (8002288 <HAL_DMA_Init+0x1e8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00e      	beq.n	8002214 <HAL_DMA_Init+0x174>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a24      	ldr	r2, [pc, #144]	; (800228c <HAL_DMA_Init+0x1ec>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d009      	beq.n	8002214 <HAL_DMA_Init+0x174>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a22      	ldr	r2, [pc, #136]	; (8002290 <HAL_DMA_Init+0x1f0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d004      	beq.n	8002214 <HAL_DMA_Init+0x174>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a21      	ldr	r2, [pc, #132]	; (8002294 <HAL_DMA_Init+0x1f4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d108      	bne.n	8002226 <HAL_DMA_Init+0x186>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	e007      	b.n	8002236 <HAL_DMA_Init+0x196>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0201 	bic.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002236:	e02f      	b.n	8002298 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002238:	f7ff fdd2 	bl	8001de0 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b05      	cmp	r3, #5
 8002244:	d928      	bls.n	8002298 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2220      	movs	r2, #32
 800224a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2203      	movs	r2, #3
 8002250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e246      	b.n	80026e6 <HAL_DMA_Init+0x646>
 8002258:	40020010 	.word	0x40020010
 800225c:	40020028 	.word	0x40020028
 8002260:	40020040 	.word	0x40020040
 8002264:	40020058 	.word	0x40020058
 8002268:	40020070 	.word	0x40020070
 800226c:	40020088 	.word	0x40020088
 8002270:	400200a0 	.word	0x400200a0
 8002274:	400200b8 	.word	0x400200b8
 8002278:	40020410 	.word	0x40020410
 800227c:	40020428 	.word	0x40020428
 8002280:	40020440 	.word	0x40020440
 8002284:	40020458 	.word	0x40020458
 8002288:	40020470 	.word	0x40020470
 800228c:	40020488 	.word	0x40020488
 8002290:	400204a0 	.word	0x400204a0
 8002294:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1c8      	bne.n	8002238 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4b83      	ldr	r3, [pc, #524]	; (80024c0 <HAL_DMA_Init+0x420>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80022be:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d107      	bne.n	80022fc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	4313      	orrs	r3, r2
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80022fc:	4b71      	ldr	r3, [pc, #452]	; (80024c4 <HAL_DMA_Init+0x424>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b71      	ldr	r3, [pc, #452]	; (80024c8 <HAL_DMA_Init+0x428>)
 8002302:	4013      	ands	r3, r2
 8002304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002308:	d328      	bcc.n	800235c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b28      	cmp	r3, #40	; 0x28
 8002310:	d903      	bls.n	800231a <HAL_DMA_Init+0x27a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b2e      	cmp	r3, #46	; 0x2e
 8002318:	d917      	bls.n	800234a <HAL_DMA_Init+0x2aa>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b3e      	cmp	r3, #62	; 0x3e
 8002320:	d903      	bls.n	800232a <HAL_DMA_Init+0x28a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b42      	cmp	r3, #66	; 0x42
 8002328:	d90f      	bls.n	800234a <HAL_DMA_Init+0x2aa>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b46      	cmp	r3, #70	; 0x46
 8002330:	d903      	bls.n	800233a <HAL_DMA_Init+0x29a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b48      	cmp	r3, #72	; 0x48
 8002338:	d907      	bls.n	800234a <HAL_DMA_Init+0x2aa>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b4e      	cmp	r3, #78	; 0x4e
 8002340:	d905      	bls.n	800234e <HAL_DMA_Init+0x2ae>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b52      	cmp	r3, #82	; 0x52
 8002348:	d801      	bhi.n	800234e <HAL_DMA_Init+0x2ae>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_DMA_Init+0x2b0>
 800234e:	2300      	movs	r3, #0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800235a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f023 0307 	bic.w	r3, r3, #7
 8002372:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	4313      	orrs	r3, r2
 800237c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	2b04      	cmp	r3, #4
 8002384:	d117      	bne.n	80023b6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00e      	beq.n	80023b6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f002 fb31 	bl	8004a00 <DMA_CheckFifoParam>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2240      	movs	r2, #64	; 0x40
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e197      	b.n	80026e6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f002 fa6c 	bl	800489c <DMA_CalcBaseAndBitshift>
 80023c4:	4603      	mov	r3, r0
 80023c6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	223f      	movs	r2, #63	; 0x3f
 80023d2:	409a      	lsls	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	e0cd      	b.n	8002576 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a3b      	ldr	r2, [pc, #236]	; (80024cc <HAL_DMA_Init+0x42c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d022      	beq.n	800242a <HAL_DMA_Init+0x38a>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a39      	ldr	r2, [pc, #228]	; (80024d0 <HAL_DMA_Init+0x430>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d01d      	beq.n	800242a <HAL_DMA_Init+0x38a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a38      	ldr	r2, [pc, #224]	; (80024d4 <HAL_DMA_Init+0x434>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d018      	beq.n	800242a <HAL_DMA_Init+0x38a>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a36      	ldr	r2, [pc, #216]	; (80024d8 <HAL_DMA_Init+0x438>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d013      	beq.n	800242a <HAL_DMA_Init+0x38a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a35      	ldr	r2, [pc, #212]	; (80024dc <HAL_DMA_Init+0x43c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d00e      	beq.n	800242a <HAL_DMA_Init+0x38a>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a33      	ldr	r2, [pc, #204]	; (80024e0 <HAL_DMA_Init+0x440>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d009      	beq.n	800242a <HAL_DMA_Init+0x38a>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a32      	ldr	r2, [pc, #200]	; (80024e4 <HAL_DMA_Init+0x444>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d004      	beq.n	800242a <HAL_DMA_Init+0x38a>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a30      	ldr	r2, [pc, #192]	; (80024e8 <HAL_DMA_Init+0x448>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d101      	bne.n	800242e <HAL_DMA_Init+0x38e>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <HAL_DMA_Init+0x390>
 800242e:	2300      	movs	r3, #0
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 8097 	beq.w	8002564 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a24      	ldr	r2, [pc, #144]	; (80024cc <HAL_DMA_Init+0x42c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d021      	beq.n	8002484 <HAL_DMA_Init+0x3e4>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a22      	ldr	r2, [pc, #136]	; (80024d0 <HAL_DMA_Init+0x430>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d01c      	beq.n	8002484 <HAL_DMA_Init+0x3e4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a21      	ldr	r2, [pc, #132]	; (80024d4 <HAL_DMA_Init+0x434>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d017      	beq.n	8002484 <HAL_DMA_Init+0x3e4>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a1f      	ldr	r2, [pc, #124]	; (80024d8 <HAL_DMA_Init+0x438>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d012      	beq.n	8002484 <HAL_DMA_Init+0x3e4>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a1e      	ldr	r2, [pc, #120]	; (80024dc <HAL_DMA_Init+0x43c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d00d      	beq.n	8002484 <HAL_DMA_Init+0x3e4>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <HAL_DMA_Init+0x440>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d008      	beq.n	8002484 <HAL_DMA_Init+0x3e4>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_DMA_Init+0x444>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d003      	beq.n	8002484 <HAL_DMA_Init+0x3e4>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a19      	ldr	r2, [pc, #100]	; (80024e8 <HAL_DMA_Init+0x448>)
 8002482:	4293      	cmp	r3, r2
 8002484:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2202      	movs	r2, #2
 8002492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_DMA_Init+0x44c>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b40      	cmp	r3, #64	; 0x40
 80024ac:	d020      	beq.n	80024f0 <HAL_DMA_Init+0x450>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2b80      	cmp	r3, #128	; 0x80
 80024b4:	d102      	bne.n	80024bc <HAL_DMA_Init+0x41c>
 80024b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024ba:	e01a      	b.n	80024f2 <HAL_DMA_Init+0x452>
 80024bc:	2300      	movs	r3, #0
 80024be:	e018      	b.n	80024f2 <HAL_DMA_Init+0x452>
 80024c0:	fe10803f 	.word	0xfe10803f
 80024c4:	5c001000 	.word	0x5c001000
 80024c8:	ffff0000 	.word	0xffff0000
 80024cc:	58025408 	.word	0x58025408
 80024d0:	5802541c 	.word	0x5802541c
 80024d4:	58025430 	.word	0x58025430
 80024d8:	58025444 	.word	0x58025444
 80024dc:	58025458 	.word	0x58025458
 80024e0:	5802546c 	.word	0x5802546c
 80024e4:	58025480 	.word	0x58025480
 80024e8:	58025494 	.word	0x58025494
 80024ec:	fffe000f 	.word	0xfffe000f
 80024f0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68d2      	ldr	r2, [r2, #12]
 80024f6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002500:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002508:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002510:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002518:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002520:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4313      	orrs	r3, r2
 8002526:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	4b6e      	ldr	r3, [pc, #440]	; (80026f0 <HAL_DMA_Init+0x650>)
 8002538:	4413      	add	r3, r2
 800253a:	4a6e      	ldr	r2, [pc, #440]	; (80026f4 <HAL_DMA_Init+0x654>)
 800253c:	fba2 2303 	umull	r2, r3, r2, r3
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	009a      	lsls	r2, r3, #2
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f002 f9a7 	bl	800489c <DMA_CalcBaseAndBitshift>
 800254e:	4603      	mov	r3, r0
 8002550:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	2201      	movs	r2, #1
 800255c:	409a      	lsls	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	e008      	b.n	8002576 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2240      	movs	r2, #64	; 0x40
 8002568:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2203      	movs	r2, #3
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e0b7      	b.n	80026e6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a5f      	ldr	r2, [pc, #380]	; (80026f8 <HAL_DMA_Init+0x658>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d072      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a5d      	ldr	r2, [pc, #372]	; (80026fc <HAL_DMA_Init+0x65c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d06d      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a5c      	ldr	r2, [pc, #368]	; (8002700 <HAL_DMA_Init+0x660>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d068      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a5a      	ldr	r2, [pc, #360]	; (8002704 <HAL_DMA_Init+0x664>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d063      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a59      	ldr	r2, [pc, #356]	; (8002708 <HAL_DMA_Init+0x668>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d05e      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a57      	ldr	r2, [pc, #348]	; (800270c <HAL_DMA_Init+0x66c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d059      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a56      	ldr	r2, [pc, #344]	; (8002710 <HAL_DMA_Init+0x670>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d054      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a54      	ldr	r2, [pc, #336]	; (8002714 <HAL_DMA_Init+0x674>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d04f      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a53      	ldr	r2, [pc, #332]	; (8002718 <HAL_DMA_Init+0x678>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d04a      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a51      	ldr	r2, [pc, #324]	; (800271c <HAL_DMA_Init+0x67c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d045      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a50      	ldr	r2, [pc, #320]	; (8002720 <HAL_DMA_Init+0x680>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d040      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a4e      	ldr	r2, [pc, #312]	; (8002724 <HAL_DMA_Init+0x684>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d03b      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a4d      	ldr	r2, [pc, #308]	; (8002728 <HAL_DMA_Init+0x688>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d036      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a4b      	ldr	r2, [pc, #300]	; (800272c <HAL_DMA_Init+0x68c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d031      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a4a      	ldr	r2, [pc, #296]	; (8002730 <HAL_DMA_Init+0x690>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d02c      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a48      	ldr	r2, [pc, #288]	; (8002734 <HAL_DMA_Init+0x694>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d027      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a47      	ldr	r2, [pc, #284]	; (8002738 <HAL_DMA_Init+0x698>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d022      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a45      	ldr	r2, [pc, #276]	; (800273c <HAL_DMA_Init+0x69c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d01d      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a44      	ldr	r2, [pc, #272]	; (8002740 <HAL_DMA_Init+0x6a0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d018      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a42      	ldr	r2, [pc, #264]	; (8002744 <HAL_DMA_Init+0x6a4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d013      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a41      	ldr	r2, [pc, #260]	; (8002748 <HAL_DMA_Init+0x6a8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00e      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a3f      	ldr	r2, [pc, #252]	; (800274c <HAL_DMA_Init+0x6ac>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d009      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a3e      	ldr	r2, [pc, #248]	; (8002750 <HAL_DMA_Init+0x6b0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d004      	beq.n	8002666 <HAL_DMA_Init+0x5c6>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a3c      	ldr	r2, [pc, #240]	; (8002754 <HAL_DMA_Init+0x6b4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d101      	bne.n	800266a <HAL_DMA_Init+0x5ca>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_DMA_Init+0x5cc>
 800266a:	2300      	movs	r3, #0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d032      	beq.n	80026d6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f002 fa41 	bl	8004af8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b80      	cmp	r3, #128	; 0x80
 800267c:	d102      	bne.n	8002684 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002698:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d010      	beq.n	80026c4 <HAL_DMA_Init+0x624>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d80c      	bhi.n	80026c4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f002 fabe 	bl	8004c2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	e008      	b.n	80026d6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	a7fdabf8 	.word	0xa7fdabf8
 80026f4:	cccccccd 	.word	0xcccccccd
 80026f8:	40020010 	.word	0x40020010
 80026fc:	40020028 	.word	0x40020028
 8002700:	40020040 	.word	0x40020040
 8002704:	40020058 	.word	0x40020058
 8002708:	40020070 	.word	0x40020070
 800270c:	40020088 	.word	0x40020088
 8002710:	400200a0 	.word	0x400200a0
 8002714:	400200b8 	.word	0x400200b8
 8002718:	40020410 	.word	0x40020410
 800271c:	40020428 	.word	0x40020428
 8002720:	40020440 	.word	0x40020440
 8002724:	40020458 	.word	0x40020458
 8002728:	40020470 	.word	0x40020470
 800272c:	40020488 	.word	0x40020488
 8002730:	400204a0 	.word	0x400204a0
 8002734:	400204b8 	.word	0x400204b8
 8002738:	58025408 	.word	0x58025408
 800273c:	5802541c 	.word	0x5802541c
 8002740:	58025430 	.word	0x58025430
 8002744:	58025444 	.word	0x58025444
 8002748:	58025458 	.word	0x58025458
 800274c:	5802546c 	.word	0x5802546c
 8002750:	58025480 	.word	0x58025480
 8002754:	58025494 	.word	0x58025494

08002758 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
 8002764:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e226      	b.n	8002bc2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_DMA_Start_IT+0x2a>
 800277e:	2302      	movs	r3, #2
 8002780:	e21f      	b.n	8002bc2 <HAL_DMA_Start_IT+0x46a>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b01      	cmp	r3, #1
 8002794:	f040 820a 	bne.w	8002bac <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a68      	ldr	r2, [pc, #416]	; (800294c <HAL_DMA_Start_IT+0x1f4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d04a      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a66      	ldr	r2, [pc, #408]	; (8002950 <HAL_DMA_Start_IT+0x1f8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d045      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a65      	ldr	r2, [pc, #404]	; (8002954 <HAL_DMA_Start_IT+0x1fc>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d040      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a63      	ldr	r2, [pc, #396]	; (8002958 <HAL_DMA_Start_IT+0x200>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d03b      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a62      	ldr	r2, [pc, #392]	; (800295c <HAL_DMA_Start_IT+0x204>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d036      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a60      	ldr	r2, [pc, #384]	; (8002960 <HAL_DMA_Start_IT+0x208>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d031      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a5f      	ldr	r2, [pc, #380]	; (8002964 <HAL_DMA_Start_IT+0x20c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d02c      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a5d      	ldr	r2, [pc, #372]	; (8002968 <HAL_DMA_Start_IT+0x210>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d027      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a5c      	ldr	r2, [pc, #368]	; (800296c <HAL_DMA_Start_IT+0x214>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d022      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a5a      	ldr	r2, [pc, #360]	; (8002970 <HAL_DMA_Start_IT+0x218>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d01d      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a59      	ldr	r2, [pc, #356]	; (8002974 <HAL_DMA_Start_IT+0x21c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d018      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a57      	ldr	r2, [pc, #348]	; (8002978 <HAL_DMA_Start_IT+0x220>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d013      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a56      	ldr	r2, [pc, #344]	; (800297c <HAL_DMA_Start_IT+0x224>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00e      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a54      	ldr	r2, [pc, #336]	; (8002980 <HAL_DMA_Start_IT+0x228>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d009      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a53      	ldr	r2, [pc, #332]	; (8002984 <HAL_DMA_Start_IT+0x22c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d004      	beq.n	8002846 <HAL_DMA_Start_IT+0xee>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a51      	ldr	r2, [pc, #324]	; (8002988 <HAL_DMA_Start_IT+0x230>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d108      	bne.n	8002858 <HAL_DMA_Start_IT+0x100>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0201 	bic.w	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	e007      	b.n	8002868 <HAL_DMA_Start_IT+0x110>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f001 fe68 	bl	8004544 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a34      	ldr	r2, [pc, #208]	; (800294c <HAL_DMA_Start_IT+0x1f4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d04a      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a33      	ldr	r2, [pc, #204]	; (8002950 <HAL_DMA_Start_IT+0x1f8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d045      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a31      	ldr	r2, [pc, #196]	; (8002954 <HAL_DMA_Start_IT+0x1fc>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d040      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a30      	ldr	r2, [pc, #192]	; (8002958 <HAL_DMA_Start_IT+0x200>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d03b      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a2e      	ldr	r2, [pc, #184]	; (800295c <HAL_DMA_Start_IT+0x204>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d036      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a2d      	ldr	r2, [pc, #180]	; (8002960 <HAL_DMA_Start_IT+0x208>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d031      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a2b      	ldr	r2, [pc, #172]	; (8002964 <HAL_DMA_Start_IT+0x20c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d02c      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a2a      	ldr	r2, [pc, #168]	; (8002968 <HAL_DMA_Start_IT+0x210>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d027      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a28      	ldr	r2, [pc, #160]	; (800296c <HAL_DMA_Start_IT+0x214>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d022      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a27      	ldr	r2, [pc, #156]	; (8002970 <HAL_DMA_Start_IT+0x218>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d01d      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a25      	ldr	r2, [pc, #148]	; (8002974 <HAL_DMA_Start_IT+0x21c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d018      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a24      	ldr	r2, [pc, #144]	; (8002978 <HAL_DMA_Start_IT+0x220>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d013      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a22      	ldr	r2, [pc, #136]	; (800297c <HAL_DMA_Start_IT+0x224>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00e      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a21      	ldr	r2, [pc, #132]	; (8002980 <HAL_DMA_Start_IT+0x228>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d009      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1f      	ldr	r2, [pc, #124]	; (8002984 <HAL_DMA_Start_IT+0x22c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d004      	beq.n	8002914 <HAL_DMA_Start_IT+0x1bc>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a1e      	ldr	r2, [pc, #120]	; (8002988 <HAL_DMA_Start_IT+0x230>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d101      	bne.n	8002918 <HAL_DMA_Start_IT+0x1c0>
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <HAL_DMA_Start_IT+0x1c2>
 8002918:	2300      	movs	r3, #0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d036      	beq.n	800298c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f023 021e 	bic.w	r2, r3, #30
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 0216 	orr.w	r2, r2, #22
 8002930:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d03e      	beq.n	80029b8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0208 	orr.w	r2, r2, #8
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	e035      	b.n	80029b8 <HAL_DMA_Start_IT+0x260>
 800294c:	40020010 	.word	0x40020010
 8002950:	40020028 	.word	0x40020028
 8002954:	40020040 	.word	0x40020040
 8002958:	40020058 	.word	0x40020058
 800295c:	40020070 	.word	0x40020070
 8002960:	40020088 	.word	0x40020088
 8002964:	400200a0 	.word	0x400200a0
 8002968:	400200b8 	.word	0x400200b8
 800296c:	40020410 	.word	0x40020410
 8002970:	40020428 	.word	0x40020428
 8002974:	40020440 	.word	0x40020440
 8002978:	40020458 	.word	0x40020458
 800297c:	40020470 	.word	0x40020470
 8002980:	40020488 	.word	0x40020488
 8002984:	400204a0 	.word	0x400204a0
 8002988:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 020e 	bic.w	r2, r3, #14
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 020a 	orr.w	r2, r2, #10
 800299e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d007      	beq.n	80029b8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0204 	orr.w	r2, r2, #4
 80029b6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a83      	ldr	r2, [pc, #524]	; (8002bcc <HAL_DMA_Start_IT+0x474>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d072      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a82      	ldr	r2, [pc, #520]	; (8002bd0 <HAL_DMA_Start_IT+0x478>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d06d      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a80      	ldr	r2, [pc, #512]	; (8002bd4 <HAL_DMA_Start_IT+0x47c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d068      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a7f      	ldr	r2, [pc, #508]	; (8002bd8 <HAL_DMA_Start_IT+0x480>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d063      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a7d      	ldr	r2, [pc, #500]	; (8002bdc <HAL_DMA_Start_IT+0x484>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d05e      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a7c      	ldr	r2, [pc, #496]	; (8002be0 <HAL_DMA_Start_IT+0x488>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d059      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a7a      	ldr	r2, [pc, #488]	; (8002be4 <HAL_DMA_Start_IT+0x48c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d054      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a79      	ldr	r2, [pc, #484]	; (8002be8 <HAL_DMA_Start_IT+0x490>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d04f      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a77      	ldr	r2, [pc, #476]	; (8002bec <HAL_DMA_Start_IT+0x494>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d04a      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a76      	ldr	r2, [pc, #472]	; (8002bf0 <HAL_DMA_Start_IT+0x498>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d045      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a74      	ldr	r2, [pc, #464]	; (8002bf4 <HAL_DMA_Start_IT+0x49c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d040      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a73      	ldr	r2, [pc, #460]	; (8002bf8 <HAL_DMA_Start_IT+0x4a0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d03b      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a71      	ldr	r2, [pc, #452]	; (8002bfc <HAL_DMA_Start_IT+0x4a4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d036      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a70      	ldr	r2, [pc, #448]	; (8002c00 <HAL_DMA_Start_IT+0x4a8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d031      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a6e      	ldr	r2, [pc, #440]	; (8002c04 <HAL_DMA_Start_IT+0x4ac>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d02c      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a6d      	ldr	r2, [pc, #436]	; (8002c08 <HAL_DMA_Start_IT+0x4b0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d027      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a6b      	ldr	r2, [pc, #428]	; (8002c0c <HAL_DMA_Start_IT+0x4b4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d022      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a6a      	ldr	r2, [pc, #424]	; (8002c10 <HAL_DMA_Start_IT+0x4b8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d01d      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a68      	ldr	r2, [pc, #416]	; (8002c14 <HAL_DMA_Start_IT+0x4bc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d018      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a67      	ldr	r2, [pc, #412]	; (8002c18 <HAL_DMA_Start_IT+0x4c0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d013      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a65      	ldr	r2, [pc, #404]	; (8002c1c <HAL_DMA_Start_IT+0x4c4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00e      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a64      	ldr	r2, [pc, #400]	; (8002c20 <HAL_DMA_Start_IT+0x4c8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d009      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a62      	ldr	r2, [pc, #392]	; (8002c24 <HAL_DMA_Start_IT+0x4cc>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x350>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a61      	ldr	r2, [pc, #388]	; (8002c28 <HAL_DMA_Start_IT+0x4d0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d101      	bne.n	8002aac <HAL_DMA_Start_IT+0x354>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <HAL_DMA_Start_IT+0x356>
 8002aac:	2300      	movs	r3, #0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01a      	beq.n	8002ae8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d007      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ace:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a37      	ldr	r2, [pc, #220]	; (8002bcc <HAL_DMA_Start_IT+0x474>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d04a      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a36      	ldr	r2, [pc, #216]	; (8002bd0 <HAL_DMA_Start_IT+0x478>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d045      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a34      	ldr	r2, [pc, #208]	; (8002bd4 <HAL_DMA_Start_IT+0x47c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d040      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a33      	ldr	r2, [pc, #204]	; (8002bd8 <HAL_DMA_Start_IT+0x480>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d03b      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a31      	ldr	r2, [pc, #196]	; (8002bdc <HAL_DMA_Start_IT+0x484>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d036      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a30      	ldr	r2, [pc, #192]	; (8002be0 <HAL_DMA_Start_IT+0x488>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d031      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a2e      	ldr	r2, [pc, #184]	; (8002be4 <HAL_DMA_Start_IT+0x48c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d02c      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a2d      	ldr	r2, [pc, #180]	; (8002be8 <HAL_DMA_Start_IT+0x490>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d027      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a2b      	ldr	r2, [pc, #172]	; (8002bec <HAL_DMA_Start_IT+0x494>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d022      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a2a      	ldr	r2, [pc, #168]	; (8002bf0 <HAL_DMA_Start_IT+0x498>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d01d      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a28      	ldr	r2, [pc, #160]	; (8002bf4 <HAL_DMA_Start_IT+0x49c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d018      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a27      	ldr	r2, [pc, #156]	; (8002bf8 <HAL_DMA_Start_IT+0x4a0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d013      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a25      	ldr	r2, [pc, #148]	; (8002bfc <HAL_DMA_Start_IT+0x4a4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00e      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a24      	ldr	r2, [pc, #144]	; (8002c00 <HAL_DMA_Start_IT+0x4a8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d009      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a22      	ldr	r2, [pc, #136]	; (8002c04 <HAL_DMA_Start_IT+0x4ac>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d004      	beq.n	8002b88 <HAL_DMA_Start_IT+0x430>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a21      	ldr	r2, [pc, #132]	; (8002c08 <HAL_DMA_Start_IT+0x4b0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d108      	bne.n	8002b9a <HAL_DMA_Start_IT+0x442>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	e012      	b.n	8002bc0 <HAL_DMA_Start_IT+0x468>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0201 	orr.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	e009      	b.n	8002bc0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40020010 	.word	0x40020010
 8002bd0:	40020028 	.word	0x40020028
 8002bd4:	40020040 	.word	0x40020040
 8002bd8:	40020058 	.word	0x40020058
 8002bdc:	40020070 	.word	0x40020070
 8002be0:	40020088 	.word	0x40020088
 8002be4:	400200a0 	.word	0x400200a0
 8002be8:	400200b8 	.word	0x400200b8
 8002bec:	40020410 	.word	0x40020410
 8002bf0:	40020428 	.word	0x40020428
 8002bf4:	40020440 	.word	0x40020440
 8002bf8:	40020458 	.word	0x40020458
 8002bfc:	40020470 	.word	0x40020470
 8002c00:	40020488 	.word	0x40020488
 8002c04:	400204a0 	.word	0x400204a0
 8002c08:	400204b8 	.word	0x400204b8
 8002c0c:	58025408 	.word	0x58025408
 8002c10:	5802541c 	.word	0x5802541c
 8002c14:	58025430 	.word	0x58025430
 8002c18:	58025444 	.word	0x58025444
 8002c1c:	58025458 	.word	0x58025458
 8002c20:	5802546c 	.word	0x5802546c
 8002c24:	58025480 	.word	0x58025480
 8002c28:	58025494 	.word	0x58025494

08002c2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002c34:	f7ff f8d4 	bl	8001de0 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e2dc      	b.n	80031fe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d008      	beq.n	8002c62 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2280      	movs	r2, #128	; 0x80
 8002c54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e2cd      	b.n	80031fe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a76      	ldr	r2, [pc, #472]	; (8002e40 <HAL_DMA_Abort+0x214>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d04a      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a74      	ldr	r2, [pc, #464]	; (8002e44 <HAL_DMA_Abort+0x218>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d045      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a73      	ldr	r2, [pc, #460]	; (8002e48 <HAL_DMA_Abort+0x21c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d040      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a71      	ldr	r2, [pc, #452]	; (8002e4c <HAL_DMA_Abort+0x220>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d03b      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a70      	ldr	r2, [pc, #448]	; (8002e50 <HAL_DMA_Abort+0x224>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d036      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a6e      	ldr	r2, [pc, #440]	; (8002e54 <HAL_DMA_Abort+0x228>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d031      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a6d      	ldr	r2, [pc, #436]	; (8002e58 <HAL_DMA_Abort+0x22c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d02c      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a6b      	ldr	r2, [pc, #428]	; (8002e5c <HAL_DMA_Abort+0x230>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d027      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a6a      	ldr	r2, [pc, #424]	; (8002e60 <HAL_DMA_Abort+0x234>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d022      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a68      	ldr	r2, [pc, #416]	; (8002e64 <HAL_DMA_Abort+0x238>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01d      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a67      	ldr	r2, [pc, #412]	; (8002e68 <HAL_DMA_Abort+0x23c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d018      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a65      	ldr	r2, [pc, #404]	; (8002e6c <HAL_DMA_Abort+0x240>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d013      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a64      	ldr	r2, [pc, #400]	; (8002e70 <HAL_DMA_Abort+0x244>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d00e      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a62      	ldr	r2, [pc, #392]	; (8002e74 <HAL_DMA_Abort+0x248>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d009      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a61      	ldr	r2, [pc, #388]	; (8002e78 <HAL_DMA_Abort+0x24c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d004      	beq.n	8002d02 <HAL_DMA_Abort+0xd6>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a5f      	ldr	r2, [pc, #380]	; (8002e7c <HAL_DMA_Abort+0x250>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d101      	bne.n	8002d06 <HAL_DMA_Abort+0xda>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <HAL_DMA_Abort+0xdc>
 8002d06:	2300      	movs	r3, #0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d013      	beq.n	8002d34 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 021e 	bic.w	r2, r2, #30
 8002d1a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695a      	ldr	r2, [r3, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d2a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	e00a      	b.n	8002d4a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 020e 	bic.w	r2, r2, #14
 8002d42:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a3c      	ldr	r2, [pc, #240]	; (8002e40 <HAL_DMA_Abort+0x214>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d072      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a3a      	ldr	r2, [pc, #232]	; (8002e44 <HAL_DMA_Abort+0x218>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d06d      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a39      	ldr	r2, [pc, #228]	; (8002e48 <HAL_DMA_Abort+0x21c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d068      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a37      	ldr	r2, [pc, #220]	; (8002e4c <HAL_DMA_Abort+0x220>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d063      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a36      	ldr	r2, [pc, #216]	; (8002e50 <HAL_DMA_Abort+0x224>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d05e      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a34      	ldr	r2, [pc, #208]	; (8002e54 <HAL_DMA_Abort+0x228>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d059      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a33      	ldr	r2, [pc, #204]	; (8002e58 <HAL_DMA_Abort+0x22c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d054      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a31      	ldr	r2, [pc, #196]	; (8002e5c <HAL_DMA_Abort+0x230>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d04f      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a30      	ldr	r2, [pc, #192]	; (8002e60 <HAL_DMA_Abort+0x234>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d04a      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a2e      	ldr	r2, [pc, #184]	; (8002e64 <HAL_DMA_Abort+0x238>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d045      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a2d      	ldr	r2, [pc, #180]	; (8002e68 <HAL_DMA_Abort+0x23c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d040      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a2b      	ldr	r2, [pc, #172]	; (8002e6c <HAL_DMA_Abort+0x240>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d03b      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a2a      	ldr	r2, [pc, #168]	; (8002e70 <HAL_DMA_Abort+0x244>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d036      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a28      	ldr	r2, [pc, #160]	; (8002e74 <HAL_DMA_Abort+0x248>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d031      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a27      	ldr	r2, [pc, #156]	; (8002e78 <HAL_DMA_Abort+0x24c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d02c      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a25      	ldr	r2, [pc, #148]	; (8002e7c <HAL_DMA_Abort+0x250>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d027      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a24      	ldr	r2, [pc, #144]	; (8002e80 <HAL_DMA_Abort+0x254>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d022      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a22      	ldr	r2, [pc, #136]	; (8002e84 <HAL_DMA_Abort+0x258>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d01d      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a21      	ldr	r2, [pc, #132]	; (8002e88 <HAL_DMA_Abort+0x25c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d018      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a1f      	ldr	r2, [pc, #124]	; (8002e8c <HAL_DMA_Abort+0x260>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d013      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a1e      	ldr	r2, [pc, #120]	; (8002e90 <HAL_DMA_Abort+0x264>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d00e      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1c      	ldr	r2, [pc, #112]	; (8002e94 <HAL_DMA_Abort+0x268>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d009      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1b      	ldr	r2, [pc, #108]	; (8002e98 <HAL_DMA_Abort+0x26c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d004      	beq.n	8002e3a <HAL_DMA_Abort+0x20e>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a19      	ldr	r2, [pc, #100]	; (8002e9c <HAL_DMA_Abort+0x270>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d132      	bne.n	8002ea0 <HAL_DMA_Abort+0x274>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e031      	b.n	8002ea2 <HAL_DMA_Abort+0x276>
 8002e3e:	bf00      	nop
 8002e40:	40020010 	.word	0x40020010
 8002e44:	40020028 	.word	0x40020028
 8002e48:	40020040 	.word	0x40020040
 8002e4c:	40020058 	.word	0x40020058
 8002e50:	40020070 	.word	0x40020070
 8002e54:	40020088 	.word	0x40020088
 8002e58:	400200a0 	.word	0x400200a0
 8002e5c:	400200b8 	.word	0x400200b8
 8002e60:	40020410 	.word	0x40020410
 8002e64:	40020428 	.word	0x40020428
 8002e68:	40020440 	.word	0x40020440
 8002e6c:	40020458 	.word	0x40020458
 8002e70:	40020470 	.word	0x40020470
 8002e74:	40020488 	.word	0x40020488
 8002e78:	400204a0 	.word	0x400204a0
 8002e7c:	400204b8 	.word	0x400204b8
 8002e80:	58025408 	.word	0x58025408
 8002e84:	5802541c 	.word	0x5802541c
 8002e88:	58025430 	.word	0x58025430
 8002e8c:	58025444 	.word	0x58025444
 8002e90:	58025458 	.word	0x58025458
 8002e94:	5802546c 	.word	0x5802546c
 8002e98:	58025480 	.word	0x58025480
 8002e9c:	58025494 	.word	0x58025494
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a6d      	ldr	r2, [pc, #436]	; (8003070 <HAL_DMA_Abort+0x444>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d04a      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a6b      	ldr	r2, [pc, #428]	; (8003074 <HAL_DMA_Abort+0x448>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d045      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a6a      	ldr	r2, [pc, #424]	; (8003078 <HAL_DMA_Abort+0x44c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d040      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a68      	ldr	r2, [pc, #416]	; (800307c <HAL_DMA_Abort+0x450>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d03b      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a67      	ldr	r2, [pc, #412]	; (8003080 <HAL_DMA_Abort+0x454>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d036      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a65      	ldr	r2, [pc, #404]	; (8003084 <HAL_DMA_Abort+0x458>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d031      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a64      	ldr	r2, [pc, #400]	; (8003088 <HAL_DMA_Abort+0x45c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d02c      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a62      	ldr	r2, [pc, #392]	; (800308c <HAL_DMA_Abort+0x460>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d027      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a61      	ldr	r2, [pc, #388]	; (8003090 <HAL_DMA_Abort+0x464>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d022      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a5f      	ldr	r2, [pc, #380]	; (8003094 <HAL_DMA_Abort+0x468>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d01d      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a5e      	ldr	r2, [pc, #376]	; (8003098 <HAL_DMA_Abort+0x46c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d018      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a5c      	ldr	r2, [pc, #368]	; (800309c <HAL_DMA_Abort+0x470>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d013      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a5b      	ldr	r2, [pc, #364]	; (80030a0 <HAL_DMA_Abort+0x474>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00e      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a59      	ldr	r2, [pc, #356]	; (80030a4 <HAL_DMA_Abort+0x478>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d009      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a58      	ldr	r2, [pc, #352]	; (80030a8 <HAL_DMA_Abort+0x47c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d004      	beq.n	8002f56 <HAL_DMA_Abort+0x32a>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a56      	ldr	r2, [pc, #344]	; (80030ac <HAL_DMA_Abort+0x480>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d108      	bne.n	8002f68 <HAL_DMA_Abort+0x33c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0201 	bic.w	r2, r2, #1
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	e007      	b.n	8002f78 <HAL_DMA_Abort+0x34c>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0201 	bic.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f78:	e013      	b.n	8002fa2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f7a:	f7fe ff31 	bl	8001de0 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b05      	cmp	r3, #5
 8002f86:	d90c      	bls.n	8002fa2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2203      	movs	r2, #3
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e12d      	b.n	80031fe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1e5      	bne.n	8002f7a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a2f      	ldr	r2, [pc, #188]	; (8003070 <HAL_DMA_Abort+0x444>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d04a      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a2d      	ldr	r2, [pc, #180]	; (8003074 <HAL_DMA_Abort+0x448>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d045      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a2c      	ldr	r2, [pc, #176]	; (8003078 <HAL_DMA_Abort+0x44c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d040      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a2a      	ldr	r2, [pc, #168]	; (800307c <HAL_DMA_Abort+0x450>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d03b      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a29      	ldr	r2, [pc, #164]	; (8003080 <HAL_DMA_Abort+0x454>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d036      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a27      	ldr	r2, [pc, #156]	; (8003084 <HAL_DMA_Abort+0x458>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d031      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a26      	ldr	r2, [pc, #152]	; (8003088 <HAL_DMA_Abort+0x45c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d02c      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a24      	ldr	r2, [pc, #144]	; (800308c <HAL_DMA_Abort+0x460>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d027      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a23      	ldr	r2, [pc, #140]	; (8003090 <HAL_DMA_Abort+0x464>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d022      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a21      	ldr	r2, [pc, #132]	; (8003094 <HAL_DMA_Abort+0x468>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d01d      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a20      	ldr	r2, [pc, #128]	; (8003098 <HAL_DMA_Abort+0x46c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d018      	beq.n	800304e <HAL_DMA_Abort+0x422>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1e      	ldr	r2, [pc, #120]	; (800309c <HAL_DMA_Abort+0x470>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <HAL_DMA_Abort+0x474>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00e      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1b      	ldr	r2, [pc, #108]	; (80030a4 <HAL_DMA_Abort+0x478>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d009      	beq.n	800304e <HAL_DMA_Abort+0x422>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1a      	ldr	r2, [pc, #104]	; (80030a8 <HAL_DMA_Abort+0x47c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d004      	beq.n	800304e <HAL_DMA_Abort+0x422>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a18      	ldr	r2, [pc, #96]	; (80030ac <HAL_DMA_Abort+0x480>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d101      	bne.n	8003052 <HAL_DMA_Abort+0x426>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_DMA_Abort+0x428>
 8003052:	2300      	movs	r3, #0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d02b      	beq.n	80030b0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	223f      	movs	r2, #63	; 0x3f
 8003068:	409a      	lsls	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	609a      	str	r2, [r3, #8]
 800306e:	e02a      	b.n	80030c6 <HAL_DMA_Abort+0x49a>
 8003070:	40020010 	.word	0x40020010
 8003074:	40020028 	.word	0x40020028
 8003078:	40020040 	.word	0x40020040
 800307c:	40020058 	.word	0x40020058
 8003080:	40020070 	.word	0x40020070
 8003084:	40020088 	.word	0x40020088
 8003088:	400200a0 	.word	0x400200a0
 800308c:	400200b8 	.word	0x400200b8
 8003090:	40020410 	.word	0x40020410
 8003094:	40020428 	.word	0x40020428
 8003098:	40020440 	.word	0x40020440
 800309c:	40020458 	.word	0x40020458
 80030a0:	40020470 	.word	0x40020470
 80030a4:	40020488 	.word	0x40020488
 80030a8:	400204a0 	.word	0x400204a0
 80030ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ba:	f003 031f 	and.w	r3, r3, #31
 80030be:	2201      	movs	r2, #1
 80030c0:	409a      	lsls	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a4f      	ldr	r2, [pc, #316]	; (8003208 <HAL_DMA_Abort+0x5dc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d072      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a4d      	ldr	r2, [pc, #308]	; (800320c <HAL_DMA_Abort+0x5e0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d06d      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a4c      	ldr	r2, [pc, #304]	; (8003210 <HAL_DMA_Abort+0x5e4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d068      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a4a      	ldr	r2, [pc, #296]	; (8003214 <HAL_DMA_Abort+0x5e8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d063      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a49      	ldr	r2, [pc, #292]	; (8003218 <HAL_DMA_Abort+0x5ec>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d05e      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a47      	ldr	r2, [pc, #284]	; (800321c <HAL_DMA_Abort+0x5f0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d059      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a46      	ldr	r2, [pc, #280]	; (8003220 <HAL_DMA_Abort+0x5f4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d054      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a44      	ldr	r2, [pc, #272]	; (8003224 <HAL_DMA_Abort+0x5f8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d04f      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a43      	ldr	r2, [pc, #268]	; (8003228 <HAL_DMA_Abort+0x5fc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d04a      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a41      	ldr	r2, [pc, #260]	; (800322c <HAL_DMA_Abort+0x600>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d045      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a40      	ldr	r2, [pc, #256]	; (8003230 <HAL_DMA_Abort+0x604>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d040      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a3e      	ldr	r2, [pc, #248]	; (8003234 <HAL_DMA_Abort+0x608>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d03b      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a3d      	ldr	r2, [pc, #244]	; (8003238 <HAL_DMA_Abort+0x60c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d036      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a3b      	ldr	r2, [pc, #236]	; (800323c <HAL_DMA_Abort+0x610>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d031      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a3a      	ldr	r2, [pc, #232]	; (8003240 <HAL_DMA_Abort+0x614>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d02c      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a38      	ldr	r2, [pc, #224]	; (8003244 <HAL_DMA_Abort+0x618>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d027      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a37      	ldr	r2, [pc, #220]	; (8003248 <HAL_DMA_Abort+0x61c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d022      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a35      	ldr	r2, [pc, #212]	; (800324c <HAL_DMA_Abort+0x620>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d01d      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a34      	ldr	r2, [pc, #208]	; (8003250 <HAL_DMA_Abort+0x624>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d018      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a32      	ldr	r2, [pc, #200]	; (8003254 <HAL_DMA_Abort+0x628>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d013      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a31      	ldr	r2, [pc, #196]	; (8003258 <HAL_DMA_Abort+0x62c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d00e      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a2f      	ldr	r2, [pc, #188]	; (800325c <HAL_DMA_Abort+0x630>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d009      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a2e      	ldr	r2, [pc, #184]	; (8003260 <HAL_DMA_Abort+0x634>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d004      	beq.n	80031b6 <HAL_DMA_Abort+0x58a>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a2c      	ldr	r2, [pc, #176]	; (8003264 <HAL_DMA_Abort+0x638>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d101      	bne.n	80031ba <HAL_DMA_Abort+0x58e>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <HAL_DMA_Abort+0x590>
 80031ba:	2300      	movs	r3, #0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d015      	beq.n	80031ec <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80031c8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00c      	beq.n	80031ec <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031e0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80031ea:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40020010 	.word	0x40020010
 800320c:	40020028 	.word	0x40020028
 8003210:	40020040 	.word	0x40020040
 8003214:	40020058 	.word	0x40020058
 8003218:	40020070 	.word	0x40020070
 800321c:	40020088 	.word	0x40020088
 8003220:	400200a0 	.word	0x400200a0
 8003224:	400200b8 	.word	0x400200b8
 8003228:	40020410 	.word	0x40020410
 800322c:	40020428 	.word	0x40020428
 8003230:	40020440 	.word	0x40020440
 8003234:	40020458 	.word	0x40020458
 8003238:	40020470 	.word	0x40020470
 800323c:	40020488 	.word	0x40020488
 8003240:	400204a0 	.word	0x400204a0
 8003244:	400204b8 	.word	0x400204b8
 8003248:	58025408 	.word	0x58025408
 800324c:	5802541c 	.word	0x5802541c
 8003250:	58025430 	.word	0x58025430
 8003254:	58025444 	.word	0x58025444
 8003258:	58025458 	.word	0x58025458
 800325c:	5802546c 	.word	0x5802546c
 8003260:	58025480 	.word	0x58025480
 8003264:	58025494 	.word	0x58025494

08003268 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e205      	b.n	8003686 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d004      	beq.n	8003290 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2280      	movs	r2, #128	; 0x80
 800328a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e1fa      	b.n	8003686 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a8c      	ldr	r2, [pc, #560]	; (80034c8 <HAL_DMA_Abort_IT+0x260>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d04a      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a8b      	ldr	r2, [pc, #556]	; (80034cc <HAL_DMA_Abort_IT+0x264>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d045      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a89      	ldr	r2, [pc, #548]	; (80034d0 <HAL_DMA_Abort_IT+0x268>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d040      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a88      	ldr	r2, [pc, #544]	; (80034d4 <HAL_DMA_Abort_IT+0x26c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d03b      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a86      	ldr	r2, [pc, #536]	; (80034d8 <HAL_DMA_Abort_IT+0x270>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d036      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a85      	ldr	r2, [pc, #532]	; (80034dc <HAL_DMA_Abort_IT+0x274>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d031      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a83      	ldr	r2, [pc, #524]	; (80034e0 <HAL_DMA_Abort_IT+0x278>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d02c      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a82      	ldr	r2, [pc, #520]	; (80034e4 <HAL_DMA_Abort_IT+0x27c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d027      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a80      	ldr	r2, [pc, #512]	; (80034e8 <HAL_DMA_Abort_IT+0x280>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d022      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a7f      	ldr	r2, [pc, #508]	; (80034ec <HAL_DMA_Abort_IT+0x284>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d01d      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a7d      	ldr	r2, [pc, #500]	; (80034f0 <HAL_DMA_Abort_IT+0x288>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d018      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a7c      	ldr	r2, [pc, #496]	; (80034f4 <HAL_DMA_Abort_IT+0x28c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d013      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a7a      	ldr	r2, [pc, #488]	; (80034f8 <HAL_DMA_Abort_IT+0x290>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00e      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a79      	ldr	r2, [pc, #484]	; (80034fc <HAL_DMA_Abort_IT+0x294>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d009      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a77      	ldr	r2, [pc, #476]	; (8003500 <HAL_DMA_Abort_IT+0x298>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d004      	beq.n	8003330 <HAL_DMA_Abort_IT+0xc8>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a76      	ldr	r2, [pc, #472]	; (8003504 <HAL_DMA_Abort_IT+0x29c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d101      	bne.n	8003334 <HAL_DMA_Abort_IT+0xcc>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <HAL_DMA_Abort_IT+0xce>
 8003334:	2300      	movs	r3, #0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d065      	beq.n	8003406 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2204      	movs	r2, #4
 800333e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a60      	ldr	r2, [pc, #384]	; (80034c8 <HAL_DMA_Abort_IT+0x260>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d04a      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a5e      	ldr	r2, [pc, #376]	; (80034cc <HAL_DMA_Abort_IT+0x264>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d045      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a5d      	ldr	r2, [pc, #372]	; (80034d0 <HAL_DMA_Abort_IT+0x268>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d040      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a5b      	ldr	r2, [pc, #364]	; (80034d4 <HAL_DMA_Abort_IT+0x26c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d03b      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a5a      	ldr	r2, [pc, #360]	; (80034d8 <HAL_DMA_Abort_IT+0x270>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d036      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a58      	ldr	r2, [pc, #352]	; (80034dc <HAL_DMA_Abort_IT+0x274>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d031      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a57      	ldr	r2, [pc, #348]	; (80034e0 <HAL_DMA_Abort_IT+0x278>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d02c      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a55      	ldr	r2, [pc, #340]	; (80034e4 <HAL_DMA_Abort_IT+0x27c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d027      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a54      	ldr	r2, [pc, #336]	; (80034e8 <HAL_DMA_Abort_IT+0x280>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d022      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a52      	ldr	r2, [pc, #328]	; (80034ec <HAL_DMA_Abort_IT+0x284>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d01d      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a51      	ldr	r2, [pc, #324]	; (80034f0 <HAL_DMA_Abort_IT+0x288>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d018      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a4f      	ldr	r2, [pc, #316]	; (80034f4 <HAL_DMA_Abort_IT+0x28c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a4e      	ldr	r2, [pc, #312]	; (80034f8 <HAL_DMA_Abort_IT+0x290>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00e      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a4c      	ldr	r2, [pc, #304]	; (80034fc <HAL_DMA_Abort_IT+0x294>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a4b      	ldr	r2, [pc, #300]	; (8003500 <HAL_DMA_Abort_IT+0x298>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x17a>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a49      	ldr	r2, [pc, #292]	; (8003504 <HAL_DMA_Abort_IT+0x29c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d108      	bne.n	80033f4 <HAL_DMA_Abort_IT+0x18c>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0201 	bic.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	e147      	b.n	8003684 <HAL_DMA_Abort_IT+0x41c>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0201 	bic.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	e13e      	b.n	8003684 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 020e 	bic.w	r2, r2, #14
 8003414:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a2b      	ldr	r2, [pc, #172]	; (80034c8 <HAL_DMA_Abort_IT+0x260>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d04a      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a29      	ldr	r2, [pc, #164]	; (80034cc <HAL_DMA_Abort_IT+0x264>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d045      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a28      	ldr	r2, [pc, #160]	; (80034d0 <HAL_DMA_Abort_IT+0x268>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d040      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a26      	ldr	r2, [pc, #152]	; (80034d4 <HAL_DMA_Abort_IT+0x26c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d03b      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a25      	ldr	r2, [pc, #148]	; (80034d8 <HAL_DMA_Abort_IT+0x270>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d036      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a23      	ldr	r2, [pc, #140]	; (80034dc <HAL_DMA_Abort_IT+0x274>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d031      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a22      	ldr	r2, [pc, #136]	; (80034e0 <HAL_DMA_Abort_IT+0x278>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d02c      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a20      	ldr	r2, [pc, #128]	; (80034e4 <HAL_DMA_Abort_IT+0x27c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d027      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a1f      	ldr	r2, [pc, #124]	; (80034e8 <HAL_DMA_Abort_IT+0x280>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d022      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <HAL_DMA_Abort_IT+0x284>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d01d      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a1c      	ldr	r2, [pc, #112]	; (80034f0 <HAL_DMA_Abort_IT+0x288>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d018      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1a      	ldr	r2, [pc, #104]	; (80034f4 <HAL_DMA_Abort_IT+0x28c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d013      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a19      	ldr	r2, [pc, #100]	; (80034f8 <HAL_DMA_Abort_IT+0x290>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00e      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a17      	ldr	r2, [pc, #92]	; (80034fc <HAL_DMA_Abort_IT+0x294>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d009      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a16      	ldr	r2, [pc, #88]	; (8003500 <HAL_DMA_Abort_IT+0x298>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d004      	beq.n	80034b6 <HAL_DMA_Abort_IT+0x24e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a14      	ldr	r2, [pc, #80]	; (8003504 <HAL_DMA_Abort_IT+0x29c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d128      	bne.n	8003508 <HAL_DMA_Abort_IT+0x2a0>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0201 	bic.w	r2, r2, #1
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	e027      	b.n	8003518 <HAL_DMA_Abort_IT+0x2b0>
 80034c8:	40020010 	.word	0x40020010
 80034cc:	40020028 	.word	0x40020028
 80034d0:	40020040 	.word	0x40020040
 80034d4:	40020058 	.word	0x40020058
 80034d8:	40020070 	.word	0x40020070
 80034dc:	40020088 	.word	0x40020088
 80034e0:	400200a0 	.word	0x400200a0
 80034e4:	400200b8 	.word	0x400200b8
 80034e8:	40020410 	.word	0x40020410
 80034ec:	40020428 	.word	0x40020428
 80034f0:	40020440 	.word	0x40020440
 80034f4:	40020458 	.word	0x40020458
 80034f8:	40020470 	.word	0x40020470
 80034fc:	40020488 	.word	0x40020488
 8003500:	400204a0 	.word	0x400204a0
 8003504:	400204b8 	.word	0x400204b8
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0201 	bic.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a5c      	ldr	r2, [pc, #368]	; (8003690 <HAL_DMA_Abort_IT+0x428>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d072      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a5b      	ldr	r2, [pc, #364]	; (8003694 <HAL_DMA_Abort_IT+0x42c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d06d      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a59      	ldr	r2, [pc, #356]	; (8003698 <HAL_DMA_Abort_IT+0x430>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d068      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a58      	ldr	r2, [pc, #352]	; (800369c <HAL_DMA_Abort_IT+0x434>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d063      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a56      	ldr	r2, [pc, #344]	; (80036a0 <HAL_DMA_Abort_IT+0x438>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d05e      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a55      	ldr	r2, [pc, #340]	; (80036a4 <HAL_DMA_Abort_IT+0x43c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d059      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a53      	ldr	r2, [pc, #332]	; (80036a8 <HAL_DMA_Abort_IT+0x440>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d054      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a52      	ldr	r2, [pc, #328]	; (80036ac <HAL_DMA_Abort_IT+0x444>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d04f      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a50      	ldr	r2, [pc, #320]	; (80036b0 <HAL_DMA_Abort_IT+0x448>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d04a      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a4f      	ldr	r2, [pc, #316]	; (80036b4 <HAL_DMA_Abort_IT+0x44c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d045      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a4d      	ldr	r2, [pc, #308]	; (80036b8 <HAL_DMA_Abort_IT+0x450>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d040      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a4c      	ldr	r2, [pc, #304]	; (80036bc <HAL_DMA_Abort_IT+0x454>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d03b      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a4a      	ldr	r2, [pc, #296]	; (80036c0 <HAL_DMA_Abort_IT+0x458>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d036      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a49      	ldr	r2, [pc, #292]	; (80036c4 <HAL_DMA_Abort_IT+0x45c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d031      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a47      	ldr	r2, [pc, #284]	; (80036c8 <HAL_DMA_Abort_IT+0x460>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d02c      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a46      	ldr	r2, [pc, #280]	; (80036cc <HAL_DMA_Abort_IT+0x464>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d027      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a44      	ldr	r2, [pc, #272]	; (80036d0 <HAL_DMA_Abort_IT+0x468>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d022      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a43      	ldr	r2, [pc, #268]	; (80036d4 <HAL_DMA_Abort_IT+0x46c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d01d      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a41      	ldr	r2, [pc, #260]	; (80036d8 <HAL_DMA_Abort_IT+0x470>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d018      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a40      	ldr	r2, [pc, #256]	; (80036dc <HAL_DMA_Abort_IT+0x474>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d013      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a3e      	ldr	r2, [pc, #248]	; (80036e0 <HAL_DMA_Abort_IT+0x478>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00e      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a3d      	ldr	r2, [pc, #244]	; (80036e4 <HAL_DMA_Abort_IT+0x47c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d009      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a3b      	ldr	r2, [pc, #236]	; (80036e8 <HAL_DMA_Abort_IT+0x480>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d004      	beq.n	8003608 <HAL_DMA_Abort_IT+0x3a0>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a3a      	ldr	r2, [pc, #232]	; (80036ec <HAL_DMA_Abort_IT+0x484>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d101      	bne.n	800360c <HAL_DMA_Abort_IT+0x3a4>
 8003608:	2301      	movs	r3, #1
 800360a:	e000      	b.n	800360e <HAL_DMA_Abort_IT+0x3a6>
 800360c:	2300      	movs	r3, #0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d028      	beq.n	8003664 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800361c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003620:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003626:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	2201      	movs	r2, #1
 8003632:	409a      	lsls	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003640:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00c      	beq.n	8003664 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003658:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003662:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40020010 	.word	0x40020010
 8003694:	40020028 	.word	0x40020028
 8003698:	40020040 	.word	0x40020040
 800369c:	40020058 	.word	0x40020058
 80036a0:	40020070 	.word	0x40020070
 80036a4:	40020088 	.word	0x40020088
 80036a8:	400200a0 	.word	0x400200a0
 80036ac:	400200b8 	.word	0x400200b8
 80036b0:	40020410 	.word	0x40020410
 80036b4:	40020428 	.word	0x40020428
 80036b8:	40020440 	.word	0x40020440
 80036bc:	40020458 	.word	0x40020458
 80036c0:	40020470 	.word	0x40020470
 80036c4:	40020488 	.word	0x40020488
 80036c8:	400204a0 	.word	0x400204a0
 80036cc:	400204b8 	.word	0x400204b8
 80036d0:	58025408 	.word	0x58025408
 80036d4:	5802541c 	.word	0x5802541c
 80036d8:	58025430 	.word	0x58025430
 80036dc:	58025444 	.word	0x58025444
 80036e0:	58025458 	.word	0x58025458
 80036e4:	5802546c 	.word	0x5802546c
 80036e8:	58025480 	.word	0x58025480
 80036ec:	58025494 	.word	0x58025494

080036f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	; 0x28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036fc:	4b67      	ldr	r3, [pc, #412]	; (800389c <HAL_DMA_IRQHandler+0x1ac>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a67      	ldr	r2, [pc, #412]	; (80038a0 <HAL_DMA_IRQHandler+0x1b0>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	0a9b      	lsrs	r3, r3, #10
 8003708:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003714:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a5f      	ldr	r2, [pc, #380]	; (80038a4 <HAL_DMA_IRQHandler+0x1b4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d04a      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a5d      	ldr	r2, [pc, #372]	; (80038a8 <HAL_DMA_IRQHandler+0x1b8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d045      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a5c      	ldr	r2, [pc, #368]	; (80038ac <HAL_DMA_IRQHandler+0x1bc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d040      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a5a      	ldr	r2, [pc, #360]	; (80038b0 <HAL_DMA_IRQHandler+0x1c0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d03b      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a59      	ldr	r2, [pc, #356]	; (80038b4 <HAL_DMA_IRQHandler+0x1c4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d036      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a57      	ldr	r2, [pc, #348]	; (80038b8 <HAL_DMA_IRQHandler+0x1c8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d031      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a56      	ldr	r2, [pc, #344]	; (80038bc <HAL_DMA_IRQHandler+0x1cc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d02c      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a54      	ldr	r2, [pc, #336]	; (80038c0 <HAL_DMA_IRQHandler+0x1d0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d027      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a53      	ldr	r2, [pc, #332]	; (80038c4 <HAL_DMA_IRQHandler+0x1d4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d022      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a51      	ldr	r2, [pc, #324]	; (80038c8 <HAL_DMA_IRQHandler+0x1d8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d01d      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a50      	ldr	r2, [pc, #320]	; (80038cc <HAL_DMA_IRQHandler+0x1dc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d018      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a4e      	ldr	r2, [pc, #312]	; (80038d0 <HAL_DMA_IRQHandler+0x1e0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d013      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a4d      	ldr	r2, [pc, #308]	; (80038d4 <HAL_DMA_IRQHandler+0x1e4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00e      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a4b      	ldr	r2, [pc, #300]	; (80038d8 <HAL_DMA_IRQHandler+0x1e8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d009      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a4a      	ldr	r2, [pc, #296]	; (80038dc <HAL_DMA_IRQHandler+0x1ec>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d004      	beq.n	80037c2 <HAL_DMA_IRQHandler+0xd2>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a48      	ldr	r2, [pc, #288]	; (80038e0 <HAL_DMA_IRQHandler+0x1f0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d101      	bne.n	80037c6 <HAL_DMA_IRQHandler+0xd6>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <HAL_DMA_IRQHandler+0xd8>
 80037c6:	2300      	movs	r3, #0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 842b 	beq.w	8004024 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d2:	f003 031f 	and.w	r3, r3, #31
 80037d6:	2208      	movs	r2, #8
 80037d8:	409a      	lsls	r2, r3
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 80a2 	beq.w	8003928 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a2e      	ldr	r2, [pc, #184]	; (80038a4 <HAL_DMA_IRQHandler+0x1b4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d04a      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a2d      	ldr	r2, [pc, #180]	; (80038a8 <HAL_DMA_IRQHandler+0x1b8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d045      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a2b      	ldr	r2, [pc, #172]	; (80038ac <HAL_DMA_IRQHandler+0x1bc>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d040      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a2a      	ldr	r2, [pc, #168]	; (80038b0 <HAL_DMA_IRQHandler+0x1c0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d03b      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a28      	ldr	r2, [pc, #160]	; (80038b4 <HAL_DMA_IRQHandler+0x1c4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d036      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a27      	ldr	r2, [pc, #156]	; (80038b8 <HAL_DMA_IRQHandler+0x1c8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d031      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a25      	ldr	r2, [pc, #148]	; (80038bc <HAL_DMA_IRQHandler+0x1cc>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d02c      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a24      	ldr	r2, [pc, #144]	; (80038c0 <HAL_DMA_IRQHandler+0x1d0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d027      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a22      	ldr	r2, [pc, #136]	; (80038c4 <HAL_DMA_IRQHandler+0x1d4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d022      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a21      	ldr	r2, [pc, #132]	; (80038c8 <HAL_DMA_IRQHandler+0x1d8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d01d      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1f      	ldr	r2, [pc, #124]	; (80038cc <HAL_DMA_IRQHandler+0x1dc>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d018      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1e      	ldr	r2, [pc, #120]	; (80038d0 <HAL_DMA_IRQHandler+0x1e0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1c      	ldr	r2, [pc, #112]	; (80038d4 <HAL_DMA_IRQHandler+0x1e4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00e      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a1b      	ldr	r2, [pc, #108]	; (80038d8 <HAL_DMA_IRQHandler+0x1e8>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d009      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a19      	ldr	r2, [pc, #100]	; (80038dc <HAL_DMA_IRQHandler+0x1ec>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d004      	beq.n	8003884 <HAL_DMA_IRQHandler+0x194>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a18      	ldr	r2, [pc, #96]	; (80038e0 <HAL_DMA_IRQHandler+0x1f0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d12f      	bne.n	80038e4 <HAL_DMA_IRQHandler+0x1f4>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b00      	cmp	r3, #0
 8003890:	bf14      	ite	ne
 8003892:	2301      	movne	r3, #1
 8003894:	2300      	moveq	r3, #0
 8003896:	b2db      	uxtb	r3, r3
 8003898:	e02e      	b.n	80038f8 <HAL_DMA_IRQHandler+0x208>
 800389a:	bf00      	nop
 800389c:	24000000 	.word	0x24000000
 80038a0:	1b4e81b5 	.word	0x1b4e81b5
 80038a4:	40020010 	.word	0x40020010
 80038a8:	40020028 	.word	0x40020028
 80038ac:	40020040 	.word	0x40020040
 80038b0:	40020058 	.word	0x40020058
 80038b4:	40020070 	.word	0x40020070
 80038b8:	40020088 	.word	0x40020088
 80038bc:	400200a0 	.word	0x400200a0
 80038c0:	400200b8 	.word	0x400200b8
 80038c4:	40020410 	.word	0x40020410
 80038c8:	40020428 	.word	0x40020428
 80038cc:	40020440 	.word	0x40020440
 80038d0:	40020458 	.word	0x40020458
 80038d4:	40020470 	.word	0x40020470
 80038d8:	40020488 	.word	0x40020488
 80038dc:	400204a0 	.word	0x400204a0
 80038e0:	400204b8 	.word	0x400204b8
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	bf14      	ite	ne
 80038f2:	2301      	movne	r3, #1
 80038f4:	2300      	moveq	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d015      	beq.n	8003928 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0204 	bic.w	r2, r2, #4
 800390a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003910:	f003 031f 	and.w	r3, r3, #31
 8003914:	2208      	movs	r2, #8
 8003916:	409a      	lsls	r2, r3
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003920:	f043 0201 	orr.w	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392c:	f003 031f 	and.w	r3, r3, #31
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	fa22 f303 	lsr.w	r3, r2, r3
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d06e      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a69      	ldr	r2, [pc, #420]	; (8003ae8 <HAL_DMA_IRQHandler+0x3f8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d04a      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a67      	ldr	r2, [pc, #412]	; (8003aec <HAL_DMA_IRQHandler+0x3fc>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d045      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a66      	ldr	r2, [pc, #408]	; (8003af0 <HAL_DMA_IRQHandler+0x400>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d040      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a64      	ldr	r2, [pc, #400]	; (8003af4 <HAL_DMA_IRQHandler+0x404>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d03b      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a63      	ldr	r2, [pc, #396]	; (8003af8 <HAL_DMA_IRQHandler+0x408>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d036      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a61      	ldr	r2, [pc, #388]	; (8003afc <HAL_DMA_IRQHandler+0x40c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d031      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a60      	ldr	r2, [pc, #384]	; (8003b00 <HAL_DMA_IRQHandler+0x410>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d02c      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a5e      	ldr	r2, [pc, #376]	; (8003b04 <HAL_DMA_IRQHandler+0x414>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d027      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a5d      	ldr	r2, [pc, #372]	; (8003b08 <HAL_DMA_IRQHandler+0x418>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d022      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a5b      	ldr	r2, [pc, #364]	; (8003b0c <HAL_DMA_IRQHandler+0x41c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d01d      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a5a      	ldr	r2, [pc, #360]	; (8003b10 <HAL_DMA_IRQHandler+0x420>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d018      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a58      	ldr	r2, [pc, #352]	; (8003b14 <HAL_DMA_IRQHandler+0x424>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a57      	ldr	r2, [pc, #348]	; (8003b18 <HAL_DMA_IRQHandler+0x428>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00e      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a55      	ldr	r2, [pc, #340]	; (8003b1c <HAL_DMA_IRQHandler+0x42c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d009      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a54      	ldr	r2, [pc, #336]	; (8003b20 <HAL_DMA_IRQHandler+0x430>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d004      	beq.n	80039de <HAL_DMA_IRQHandler+0x2ee>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a52      	ldr	r2, [pc, #328]	; (8003b24 <HAL_DMA_IRQHandler+0x434>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d10a      	bne.n	80039f4 <HAL_DMA_IRQHandler+0x304>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	bf14      	ite	ne
 80039ec:	2301      	movne	r3, #1
 80039ee:	2300      	moveq	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	e003      	b.n	80039fc <HAL_DMA_IRQHandler+0x30c>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2300      	movs	r3, #0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00d      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	2201      	movs	r2, #1
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a14:	f043 0202 	orr.w	r2, r3, #2
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a20:	f003 031f 	and.w	r3, r3, #31
 8003a24:	2204      	movs	r2, #4
 8003a26:	409a      	lsls	r2, r3
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 808f 	beq.w	8003b50 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a2c      	ldr	r2, [pc, #176]	; (8003ae8 <HAL_DMA_IRQHandler+0x3f8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d04a      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a2a      	ldr	r2, [pc, #168]	; (8003aec <HAL_DMA_IRQHandler+0x3fc>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d045      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a29      	ldr	r2, [pc, #164]	; (8003af0 <HAL_DMA_IRQHandler+0x400>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d040      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a27      	ldr	r2, [pc, #156]	; (8003af4 <HAL_DMA_IRQHandler+0x404>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d03b      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a26      	ldr	r2, [pc, #152]	; (8003af8 <HAL_DMA_IRQHandler+0x408>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d036      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a24      	ldr	r2, [pc, #144]	; (8003afc <HAL_DMA_IRQHandler+0x40c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d031      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a23      	ldr	r2, [pc, #140]	; (8003b00 <HAL_DMA_IRQHandler+0x410>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d02c      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a21      	ldr	r2, [pc, #132]	; (8003b04 <HAL_DMA_IRQHandler+0x414>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d027      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a20      	ldr	r2, [pc, #128]	; (8003b08 <HAL_DMA_IRQHandler+0x418>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d022      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a1e      	ldr	r2, [pc, #120]	; (8003b0c <HAL_DMA_IRQHandler+0x41c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d01d      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1d      	ldr	r2, [pc, #116]	; (8003b10 <HAL_DMA_IRQHandler+0x420>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d018      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1b      	ldr	r2, [pc, #108]	; (8003b14 <HAL_DMA_IRQHandler+0x424>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1a      	ldr	r2, [pc, #104]	; (8003b18 <HAL_DMA_IRQHandler+0x428>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00e      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a18      	ldr	r2, [pc, #96]	; (8003b1c <HAL_DMA_IRQHandler+0x42c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d009      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a17      	ldr	r2, [pc, #92]	; (8003b20 <HAL_DMA_IRQHandler+0x430>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d004      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x3e2>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a15      	ldr	r2, [pc, #84]	; (8003b24 <HAL_DMA_IRQHandler+0x434>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d12a      	bne.n	8003b28 <HAL_DMA_IRQHandler+0x438>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	bf14      	ite	ne
 8003ae0:	2301      	movne	r3, #1
 8003ae2:	2300      	moveq	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	e023      	b.n	8003b30 <HAL_DMA_IRQHandler+0x440>
 8003ae8:	40020010 	.word	0x40020010
 8003aec:	40020028 	.word	0x40020028
 8003af0:	40020040 	.word	0x40020040
 8003af4:	40020058 	.word	0x40020058
 8003af8:	40020070 	.word	0x40020070
 8003afc:	40020088 	.word	0x40020088
 8003b00:	400200a0 	.word	0x400200a0
 8003b04:	400200b8 	.word	0x400200b8
 8003b08:	40020410 	.word	0x40020410
 8003b0c:	40020428 	.word	0x40020428
 8003b10:	40020440 	.word	0x40020440
 8003b14:	40020458 	.word	0x40020458
 8003b18:	40020470 	.word	0x40020470
 8003b1c:	40020488 	.word	0x40020488
 8003b20:	400204a0 	.word	0x400204a0
 8003b24:	400204b8 	.word	0x400204b8
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00d      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b48:	f043 0204 	orr.w	r2, r3, #4
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	2210      	movs	r2, #16
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80a6 	beq.w	8003cb2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a85      	ldr	r2, [pc, #532]	; (8003d80 <HAL_DMA_IRQHandler+0x690>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d04a      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a83      	ldr	r2, [pc, #524]	; (8003d84 <HAL_DMA_IRQHandler+0x694>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d045      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a82      	ldr	r2, [pc, #520]	; (8003d88 <HAL_DMA_IRQHandler+0x698>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d040      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a80      	ldr	r2, [pc, #512]	; (8003d8c <HAL_DMA_IRQHandler+0x69c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d03b      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a7f      	ldr	r2, [pc, #508]	; (8003d90 <HAL_DMA_IRQHandler+0x6a0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d036      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a7d      	ldr	r2, [pc, #500]	; (8003d94 <HAL_DMA_IRQHandler+0x6a4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d031      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a7c      	ldr	r2, [pc, #496]	; (8003d98 <HAL_DMA_IRQHandler+0x6a8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d02c      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a7a      	ldr	r2, [pc, #488]	; (8003d9c <HAL_DMA_IRQHandler+0x6ac>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d027      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a79      	ldr	r2, [pc, #484]	; (8003da0 <HAL_DMA_IRQHandler+0x6b0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d022      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a77      	ldr	r2, [pc, #476]	; (8003da4 <HAL_DMA_IRQHandler+0x6b4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d01d      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a76      	ldr	r2, [pc, #472]	; (8003da8 <HAL_DMA_IRQHandler+0x6b8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d018      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a74      	ldr	r2, [pc, #464]	; (8003dac <HAL_DMA_IRQHandler+0x6bc>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d013      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a73      	ldr	r2, [pc, #460]	; (8003db0 <HAL_DMA_IRQHandler+0x6c0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00e      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a71      	ldr	r2, [pc, #452]	; (8003db4 <HAL_DMA_IRQHandler+0x6c4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d009      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a70      	ldr	r2, [pc, #448]	; (8003db8 <HAL_DMA_IRQHandler+0x6c8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d004      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x516>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a6e      	ldr	r2, [pc, #440]	; (8003dbc <HAL_DMA_IRQHandler+0x6cc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d10a      	bne.n	8003c1c <HAL_DMA_IRQHandler+0x52c>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bf14      	ite	ne
 8003c14:	2301      	movne	r3, #1
 8003c16:	2300      	moveq	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	e009      	b.n	8003c30 <HAL_DMA_IRQHandler+0x540>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	bf14      	ite	ne
 8003c2a:	2301      	movne	r3, #1
 8003c2c:	2300      	moveq	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d03e      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	2210      	movs	r2, #16
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d018      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d108      	bne.n	8003c72 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d024      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	4798      	blx	r3
 8003c70:	e01f      	b.n	8003cb2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d01b      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	4798      	blx	r3
 8003c82:	e016      	b.n	8003cb2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d107      	bne.n	8003ca2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0208 	bic.w	r2, r2, #8
 8003ca0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	2220      	movs	r2, #32
 8003cbc:	409a      	lsls	r2, r3
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 8110 	beq.w	8003ee8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a2c      	ldr	r2, [pc, #176]	; (8003d80 <HAL_DMA_IRQHandler+0x690>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d04a      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a2b      	ldr	r2, [pc, #172]	; (8003d84 <HAL_DMA_IRQHandler+0x694>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d045      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a29      	ldr	r2, [pc, #164]	; (8003d88 <HAL_DMA_IRQHandler+0x698>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d040      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a28      	ldr	r2, [pc, #160]	; (8003d8c <HAL_DMA_IRQHandler+0x69c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d03b      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a26      	ldr	r2, [pc, #152]	; (8003d90 <HAL_DMA_IRQHandler+0x6a0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d036      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a25      	ldr	r2, [pc, #148]	; (8003d94 <HAL_DMA_IRQHandler+0x6a4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d031      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a23      	ldr	r2, [pc, #140]	; (8003d98 <HAL_DMA_IRQHandler+0x6a8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d02c      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a22      	ldr	r2, [pc, #136]	; (8003d9c <HAL_DMA_IRQHandler+0x6ac>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d027      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a20      	ldr	r2, [pc, #128]	; (8003da0 <HAL_DMA_IRQHandler+0x6b0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d022      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a1f      	ldr	r2, [pc, #124]	; (8003da4 <HAL_DMA_IRQHandler+0x6b4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d01d      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a1d      	ldr	r2, [pc, #116]	; (8003da8 <HAL_DMA_IRQHandler+0x6b8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d018      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a1c      	ldr	r2, [pc, #112]	; (8003dac <HAL_DMA_IRQHandler+0x6bc>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d013      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1a      	ldr	r2, [pc, #104]	; (8003db0 <HAL_DMA_IRQHandler+0x6c0>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d00e      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a19      	ldr	r2, [pc, #100]	; (8003db4 <HAL_DMA_IRQHandler+0x6c4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d009      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a17      	ldr	r2, [pc, #92]	; (8003db8 <HAL_DMA_IRQHandler+0x6c8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d004      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x678>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a16      	ldr	r2, [pc, #88]	; (8003dbc <HAL_DMA_IRQHandler+0x6cc>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d12b      	bne.n	8003dc0 <HAL_DMA_IRQHandler+0x6d0>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	bf14      	ite	ne
 8003d76:	2301      	movne	r3, #1
 8003d78:	2300      	moveq	r3, #0
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	e02a      	b.n	8003dd4 <HAL_DMA_IRQHandler+0x6e4>
 8003d7e:	bf00      	nop
 8003d80:	40020010 	.word	0x40020010
 8003d84:	40020028 	.word	0x40020028
 8003d88:	40020040 	.word	0x40020040
 8003d8c:	40020058 	.word	0x40020058
 8003d90:	40020070 	.word	0x40020070
 8003d94:	40020088 	.word	0x40020088
 8003d98:	400200a0 	.word	0x400200a0
 8003d9c:	400200b8 	.word	0x400200b8
 8003da0:	40020410 	.word	0x40020410
 8003da4:	40020428 	.word	0x40020428
 8003da8:	40020440 	.word	0x40020440
 8003dac:	40020458 	.word	0x40020458
 8003db0:	40020470 	.word	0x40020470
 8003db4:	40020488 	.word	0x40020488
 8003db8:	400204a0 	.word	0x400204a0
 8003dbc:	400204b8 	.word	0x400204b8
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	bf14      	ite	ne
 8003dce:	2301      	movne	r3, #1
 8003dd0:	2300      	moveq	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 8087 	beq.w	8003ee8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dde:	f003 031f 	and.w	r3, r3, #31
 8003de2:	2220      	movs	r2, #32
 8003de4:	409a      	lsls	r2, r3
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d139      	bne.n	8003e6a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0216 	bic.w	r2, r2, #22
 8003e04:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e14:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d103      	bne.n	8003e26 <HAL_DMA_IRQHandler+0x736>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0208 	bic.w	r2, r2, #8
 8003e34:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	223f      	movs	r2, #63	; 0x3f
 8003e40:	409a      	lsls	r2, r3
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 834a 	beq.w	80044f4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	4798      	blx	r3
          }
          return;
 8003e68:	e344      	b.n	80044f4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d018      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d108      	bne.n	8003e98 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d02c      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	4798      	blx	r3
 8003e96:	e027      	b.n	8003ee8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d023      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	4798      	blx	r3
 8003ea8:	e01e      	b.n	8003ee8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10f      	bne.n	8003ed8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0210 	bic.w	r2, r2, #16
 8003ec6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 8306 	beq.w	80044fe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 8088 	beq.w	8004010 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2204      	movs	r2, #4
 8003f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a7a      	ldr	r2, [pc, #488]	; (80040f8 <HAL_DMA_IRQHandler+0xa08>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d04a      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a79      	ldr	r2, [pc, #484]	; (80040fc <HAL_DMA_IRQHandler+0xa0c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d045      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a77      	ldr	r2, [pc, #476]	; (8004100 <HAL_DMA_IRQHandler+0xa10>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d040      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a76      	ldr	r2, [pc, #472]	; (8004104 <HAL_DMA_IRQHandler+0xa14>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d03b      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a74      	ldr	r2, [pc, #464]	; (8004108 <HAL_DMA_IRQHandler+0xa18>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d036      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a73      	ldr	r2, [pc, #460]	; (800410c <HAL_DMA_IRQHandler+0xa1c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d031      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a71      	ldr	r2, [pc, #452]	; (8004110 <HAL_DMA_IRQHandler+0xa20>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d02c      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a70      	ldr	r2, [pc, #448]	; (8004114 <HAL_DMA_IRQHandler+0xa24>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d027      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a6e      	ldr	r2, [pc, #440]	; (8004118 <HAL_DMA_IRQHandler+0xa28>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d022      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a6d      	ldr	r2, [pc, #436]	; (800411c <HAL_DMA_IRQHandler+0xa2c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d01d      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a6b      	ldr	r2, [pc, #428]	; (8004120 <HAL_DMA_IRQHandler+0xa30>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d018      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a6a      	ldr	r2, [pc, #424]	; (8004124 <HAL_DMA_IRQHandler+0xa34>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d013      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a68      	ldr	r2, [pc, #416]	; (8004128 <HAL_DMA_IRQHandler+0xa38>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00e      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a67      	ldr	r2, [pc, #412]	; (800412c <HAL_DMA_IRQHandler+0xa3c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d009      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a65      	ldr	r2, [pc, #404]	; (8004130 <HAL_DMA_IRQHandler+0xa40>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d004      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x8b8>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a64      	ldr	r2, [pc, #400]	; (8004134 <HAL_DMA_IRQHandler+0xa44>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d108      	bne.n	8003fba <HAL_DMA_IRQHandler+0x8ca>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0201 	bic.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	e007      	b.n	8003fca <HAL_DMA_IRQHandler+0x8da>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0201 	bic.w	r2, r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d307      	bcc.n	8003fe6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1f2      	bne.n	8003fca <HAL_DMA_IRQHandler+0x8da>
 8003fe4:	e000      	b.n	8003fe8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003fe6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d004      	beq.n	8004008 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2203      	movs	r2, #3
 8004002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004006:	e003      	b.n	8004010 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8272 	beq.w	80044fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4798      	blx	r3
 8004022:	e26c      	b.n	80044fe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a43      	ldr	r2, [pc, #268]	; (8004138 <HAL_DMA_IRQHandler+0xa48>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d022      	beq.n	8004074 <HAL_DMA_IRQHandler+0x984>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a42      	ldr	r2, [pc, #264]	; (800413c <HAL_DMA_IRQHandler+0xa4c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d01d      	beq.n	8004074 <HAL_DMA_IRQHandler+0x984>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a40      	ldr	r2, [pc, #256]	; (8004140 <HAL_DMA_IRQHandler+0xa50>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d018      	beq.n	8004074 <HAL_DMA_IRQHandler+0x984>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a3f      	ldr	r2, [pc, #252]	; (8004144 <HAL_DMA_IRQHandler+0xa54>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d013      	beq.n	8004074 <HAL_DMA_IRQHandler+0x984>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a3d      	ldr	r2, [pc, #244]	; (8004148 <HAL_DMA_IRQHandler+0xa58>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00e      	beq.n	8004074 <HAL_DMA_IRQHandler+0x984>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a3c      	ldr	r2, [pc, #240]	; (800414c <HAL_DMA_IRQHandler+0xa5c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d009      	beq.n	8004074 <HAL_DMA_IRQHandler+0x984>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a3a      	ldr	r2, [pc, #232]	; (8004150 <HAL_DMA_IRQHandler+0xa60>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d004      	beq.n	8004074 <HAL_DMA_IRQHandler+0x984>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a39      	ldr	r2, [pc, #228]	; (8004154 <HAL_DMA_IRQHandler+0xa64>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d101      	bne.n	8004078 <HAL_DMA_IRQHandler+0x988>
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <HAL_DMA_IRQHandler+0x98a>
 8004078:	2300      	movs	r3, #0
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 823f 	beq.w	80044fe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408c:	f003 031f 	and.w	r3, r3, #31
 8004090:	2204      	movs	r2, #4
 8004092:	409a      	lsls	r2, r3
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	4013      	ands	r3, r2
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80cd 	beq.w	8004238 <HAL_DMA_IRQHandler+0xb48>
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80c7 	beq.w	8004238 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ae:	f003 031f 	and.w	r3, r3, #31
 80040b2:	2204      	movs	r2, #4
 80040b4:	409a      	lsls	r2, r3
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d049      	beq.n	8004158 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 8210 	beq.w	80044f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040e0:	e20a      	b.n	80044f8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 8206 	beq.w	80044f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040f4:	e200      	b.n	80044f8 <HAL_DMA_IRQHandler+0xe08>
 80040f6:	bf00      	nop
 80040f8:	40020010 	.word	0x40020010
 80040fc:	40020028 	.word	0x40020028
 8004100:	40020040 	.word	0x40020040
 8004104:	40020058 	.word	0x40020058
 8004108:	40020070 	.word	0x40020070
 800410c:	40020088 	.word	0x40020088
 8004110:	400200a0 	.word	0x400200a0
 8004114:	400200b8 	.word	0x400200b8
 8004118:	40020410 	.word	0x40020410
 800411c:	40020428 	.word	0x40020428
 8004120:	40020440 	.word	0x40020440
 8004124:	40020458 	.word	0x40020458
 8004128:	40020470 	.word	0x40020470
 800412c:	40020488 	.word	0x40020488
 8004130:	400204a0 	.word	0x400204a0
 8004134:	400204b8 	.word	0x400204b8
 8004138:	58025408 	.word	0x58025408
 800413c:	5802541c 	.word	0x5802541c
 8004140:	58025430 	.word	0x58025430
 8004144:	58025444 	.word	0x58025444
 8004148:	58025458 	.word	0x58025458
 800414c:	5802546c 	.word	0x5802546c
 8004150:	58025480 	.word	0x58025480
 8004154:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b00      	cmp	r3, #0
 8004160:	d160      	bne.n	8004224 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a8c      	ldr	r2, [pc, #560]	; (8004398 <HAL_DMA_IRQHandler+0xca8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d04a      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a8a      	ldr	r2, [pc, #552]	; (800439c <HAL_DMA_IRQHandler+0xcac>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d045      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a89      	ldr	r2, [pc, #548]	; (80043a0 <HAL_DMA_IRQHandler+0xcb0>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d040      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a87      	ldr	r2, [pc, #540]	; (80043a4 <HAL_DMA_IRQHandler+0xcb4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d03b      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a86      	ldr	r2, [pc, #536]	; (80043a8 <HAL_DMA_IRQHandler+0xcb8>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d036      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a84      	ldr	r2, [pc, #528]	; (80043ac <HAL_DMA_IRQHandler+0xcbc>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d031      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a83      	ldr	r2, [pc, #524]	; (80043b0 <HAL_DMA_IRQHandler+0xcc0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d02c      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a81      	ldr	r2, [pc, #516]	; (80043b4 <HAL_DMA_IRQHandler+0xcc4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d027      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a80      	ldr	r2, [pc, #512]	; (80043b8 <HAL_DMA_IRQHandler+0xcc8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d022      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a7e      	ldr	r2, [pc, #504]	; (80043bc <HAL_DMA_IRQHandler+0xccc>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d01d      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a7d      	ldr	r2, [pc, #500]	; (80043c0 <HAL_DMA_IRQHandler+0xcd0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d018      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a7b      	ldr	r2, [pc, #492]	; (80043c4 <HAL_DMA_IRQHandler+0xcd4>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d013      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a7a      	ldr	r2, [pc, #488]	; (80043c8 <HAL_DMA_IRQHandler+0xcd8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00e      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a78      	ldr	r2, [pc, #480]	; (80043cc <HAL_DMA_IRQHandler+0xcdc>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d009      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a77      	ldr	r2, [pc, #476]	; (80043d0 <HAL_DMA_IRQHandler+0xce0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d004      	beq.n	8004202 <HAL_DMA_IRQHandler+0xb12>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a75      	ldr	r2, [pc, #468]	; (80043d4 <HAL_DMA_IRQHandler+0xce4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d108      	bne.n	8004214 <HAL_DMA_IRQHandler+0xb24>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0208 	bic.w	r2, r2, #8
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	e007      	b.n	8004224 <HAL_DMA_IRQHandler+0xb34>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0204 	bic.w	r2, r2, #4
 8004222:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8165 	beq.w	80044f8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004236:	e15f      	b.n	80044f8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	2202      	movs	r2, #2
 8004242:	409a      	lsls	r2, r3
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80c5 	beq.w	80043d8 <HAL_DMA_IRQHandler+0xce8>
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80bf 	beq.w	80043d8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425e:	f003 031f 	and.w	r3, r3, #31
 8004262:	2202      	movs	r2, #2
 8004264:	409a      	lsls	r2, r3
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d018      	beq.n	80042a6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 813a 	beq.w	80044fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004290:	e134      	b.n	80044fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 8130 	beq.w	80044fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042a4:	e12a      	b.n	80044fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f003 0320 	and.w	r3, r3, #32
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d168      	bne.n	8004382 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a38      	ldr	r2, [pc, #224]	; (8004398 <HAL_DMA_IRQHandler+0xca8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d04a      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a37      	ldr	r2, [pc, #220]	; (800439c <HAL_DMA_IRQHandler+0xcac>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d045      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a35      	ldr	r2, [pc, #212]	; (80043a0 <HAL_DMA_IRQHandler+0xcb0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d040      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a34      	ldr	r2, [pc, #208]	; (80043a4 <HAL_DMA_IRQHandler+0xcb4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d03b      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a32      	ldr	r2, [pc, #200]	; (80043a8 <HAL_DMA_IRQHandler+0xcb8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d036      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a31      	ldr	r2, [pc, #196]	; (80043ac <HAL_DMA_IRQHandler+0xcbc>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d031      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a2f      	ldr	r2, [pc, #188]	; (80043b0 <HAL_DMA_IRQHandler+0xcc0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d02c      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a2e      	ldr	r2, [pc, #184]	; (80043b4 <HAL_DMA_IRQHandler+0xcc4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d027      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a2c      	ldr	r2, [pc, #176]	; (80043b8 <HAL_DMA_IRQHandler+0xcc8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d022      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a2b      	ldr	r2, [pc, #172]	; (80043bc <HAL_DMA_IRQHandler+0xccc>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d01d      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a29      	ldr	r2, [pc, #164]	; (80043c0 <HAL_DMA_IRQHandler+0xcd0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d018      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a28      	ldr	r2, [pc, #160]	; (80043c4 <HAL_DMA_IRQHandler+0xcd4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d013      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a26      	ldr	r2, [pc, #152]	; (80043c8 <HAL_DMA_IRQHandler+0xcd8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00e      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a25      	ldr	r2, [pc, #148]	; (80043cc <HAL_DMA_IRQHandler+0xcdc>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d009      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a23      	ldr	r2, [pc, #140]	; (80043d0 <HAL_DMA_IRQHandler+0xce0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d004      	beq.n	8004350 <HAL_DMA_IRQHandler+0xc60>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a22      	ldr	r2, [pc, #136]	; (80043d4 <HAL_DMA_IRQHandler+0xce4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d108      	bne.n	8004362 <HAL_DMA_IRQHandler+0xc72>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0214 	bic.w	r2, r2, #20
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	e007      	b.n	8004372 <HAL_DMA_IRQHandler+0xc82>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 020a 	bic.w	r2, r2, #10
 8004370:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 80b8 	beq.w	80044fc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004394:	e0b2      	b.n	80044fc <HAL_DMA_IRQHandler+0xe0c>
 8004396:	bf00      	nop
 8004398:	40020010 	.word	0x40020010
 800439c:	40020028 	.word	0x40020028
 80043a0:	40020040 	.word	0x40020040
 80043a4:	40020058 	.word	0x40020058
 80043a8:	40020070 	.word	0x40020070
 80043ac:	40020088 	.word	0x40020088
 80043b0:	400200a0 	.word	0x400200a0
 80043b4:	400200b8 	.word	0x400200b8
 80043b8:	40020410 	.word	0x40020410
 80043bc:	40020428 	.word	0x40020428
 80043c0:	40020440 	.word	0x40020440
 80043c4:	40020458 	.word	0x40020458
 80043c8:	40020470 	.word	0x40020470
 80043cc:	40020488 	.word	0x40020488
 80043d0:	400204a0 	.word	0x400204a0
 80043d4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043dc:	f003 031f 	and.w	r3, r3, #31
 80043e0:	2208      	movs	r2, #8
 80043e2:	409a      	lsls	r2, r3
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 8088 	beq.w	80044fe <HAL_DMA_IRQHandler+0xe0e>
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 8082 	beq.w	80044fe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a41      	ldr	r2, [pc, #260]	; (8004504 <HAL_DMA_IRQHandler+0xe14>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d04a      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a3f      	ldr	r2, [pc, #252]	; (8004508 <HAL_DMA_IRQHandler+0xe18>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d045      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a3e      	ldr	r2, [pc, #248]	; (800450c <HAL_DMA_IRQHandler+0xe1c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d040      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a3c      	ldr	r2, [pc, #240]	; (8004510 <HAL_DMA_IRQHandler+0xe20>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d03b      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a3b      	ldr	r2, [pc, #236]	; (8004514 <HAL_DMA_IRQHandler+0xe24>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d036      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a39      	ldr	r2, [pc, #228]	; (8004518 <HAL_DMA_IRQHandler+0xe28>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d031      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a38      	ldr	r2, [pc, #224]	; (800451c <HAL_DMA_IRQHandler+0xe2c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d02c      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a36      	ldr	r2, [pc, #216]	; (8004520 <HAL_DMA_IRQHandler+0xe30>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d027      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a35      	ldr	r2, [pc, #212]	; (8004524 <HAL_DMA_IRQHandler+0xe34>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d022      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a33      	ldr	r2, [pc, #204]	; (8004528 <HAL_DMA_IRQHandler+0xe38>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d01d      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a32      	ldr	r2, [pc, #200]	; (800452c <HAL_DMA_IRQHandler+0xe3c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d018      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a30      	ldr	r2, [pc, #192]	; (8004530 <HAL_DMA_IRQHandler+0xe40>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d013      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a2f      	ldr	r2, [pc, #188]	; (8004534 <HAL_DMA_IRQHandler+0xe44>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00e      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a2d      	ldr	r2, [pc, #180]	; (8004538 <HAL_DMA_IRQHandler+0xe48>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d009      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a2c      	ldr	r2, [pc, #176]	; (800453c <HAL_DMA_IRQHandler+0xe4c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d004      	beq.n	800449a <HAL_DMA_IRQHandler+0xdaa>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a2a      	ldr	r2, [pc, #168]	; (8004540 <HAL_DMA_IRQHandler+0xe50>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d108      	bne.n	80044ac <HAL_DMA_IRQHandler+0xdbc>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 021c 	bic.w	r2, r2, #28
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	e007      	b.n	80044bc <HAL_DMA_IRQHandler+0xdcc>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 020e 	bic.w	r2, r2, #14
 80044ba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	2201      	movs	r2, #1
 80044c6:	409a      	lsls	r2, r3
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d009      	beq.n	80044fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
 80044f2:	e004      	b.n	80044fe <HAL_DMA_IRQHandler+0xe0e>
          return;
 80044f4:	bf00      	nop
 80044f6:	e002      	b.n	80044fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044f8:	bf00      	nop
 80044fa:	e000      	b.n	80044fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044fc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80044fe:	3728      	adds	r7, #40	; 0x28
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40020010 	.word	0x40020010
 8004508:	40020028 	.word	0x40020028
 800450c:	40020040 	.word	0x40020040
 8004510:	40020058 	.word	0x40020058
 8004514:	40020070 	.word	0x40020070
 8004518:	40020088 	.word	0x40020088
 800451c:	400200a0 	.word	0x400200a0
 8004520:	400200b8 	.word	0x400200b8
 8004524:	40020410 	.word	0x40020410
 8004528:	40020428 	.word	0x40020428
 800452c:	40020440 	.word	0x40020440
 8004530:	40020458 	.word	0x40020458
 8004534:	40020470 	.word	0x40020470
 8004538:	40020488 	.word	0x40020488
 800453c:	400204a0 	.word	0x400204a0
 8004540:	400204b8 	.word	0x400204b8

08004544 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004556:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a84      	ldr	r2, [pc, #528]	; (8004774 <DMA_SetConfig+0x230>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d072      	beq.n	800464e <DMA_SetConfig+0x10a>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a82      	ldr	r2, [pc, #520]	; (8004778 <DMA_SetConfig+0x234>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d06d      	beq.n	800464e <DMA_SetConfig+0x10a>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a81      	ldr	r2, [pc, #516]	; (800477c <DMA_SetConfig+0x238>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d068      	beq.n	800464e <DMA_SetConfig+0x10a>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a7f      	ldr	r2, [pc, #508]	; (8004780 <DMA_SetConfig+0x23c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d063      	beq.n	800464e <DMA_SetConfig+0x10a>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a7e      	ldr	r2, [pc, #504]	; (8004784 <DMA_SetConfig+0x240>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d05e      	beq.n	800464e <DMA_SetConfig+0x10a>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a7c      	ldr	r2, [pc, #496]	; (8004788 <DMA_SetConfig+0x244>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d059      	beq.n	800464e <DMA_SetConfig+0x10a>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a7b      	ldr	r2, [pc, #492]	; (800478c <DMA_SetConfig+0x248>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d054      	beq.n	800464e <DMA_SetConfig+0x10a>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a79      	ldr	r2, [pc, #484]	; (8004790 <DMA_SetConfig+0x24c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d04f      	beq.n	800464e <DMA_SetConfig+0x10a>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a78      	ldr	r2, [pc, #480]	; (8004794 <DMA_SetConfig+0x250>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d04a      	beq.n	800464e <DMA_SetConfig+0x10a>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a76      	ldr	r2, [pc, #472]	; (8004798 <DMA_SetConfig+0x254>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d045      	beq.n	800464e <DMA_SetConfig+0x10a>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a75      	ldr	r2, [pc, #468]	; (800479c <DMA_SetConfig+0x258>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d040      	beq.n	800464e <DMA_SetConfig+0x10a>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a73      	ldr	r2, [pc, #460]	; (80047a0 <DMA_SetConfig+0x25c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d03b      	beq.n	800464e <DMA_SetConfig+0x10a>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a72      	ldr	r2, [pc, #456]	; (80047a4 <DMA_SetConfig+0x260>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d036      	beq.n	800464e <DMA_SetConfig+0x10a>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a70      	ldr	r2, [pc, #448]	; (80047a8 <DMA_SetConfig+0x264>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d031      	beq.n	800464e <DMA_SetConfig+0x10a>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a6f      	ldr	r2, [pc, #444]	; (80047ac <DMA_SetConfig+0x268>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d02c      	beq.n	800464e <DMA_SetConfig+0x10a>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a6d      	ldr	r2, [pc, #436]	; (80047b0 <DMA_SetConfig+0x26c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d027      	beq.n	800464e <DMA_SetConfig+0x10a>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a6c      	ldr	r2, [pc, #432]	; (80047b4 <DMA_SetConfig+0x270>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d022      	beq.n	800464e <DMA_SetConfig+0x10a>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a6a      	ldr	r2, [pc, #424]	; (80047b8 <DMA_SetConfig+0x274>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d01d      	beq.n	800464e <DMA_SetConfig+0x10a>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a69      	ldr	r2, [pc, #420]	; (80047bc <DMA_SetConfig+0x278>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d018      	beq.n	800464e <DMA_SetConfig+0x10a>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a67      	ldr	r2, [pc, #412]	; (80047c0 <DMA_SetConfig+0x27c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d013      	beq.n	800464e <DMA_SetConfig+0x10a>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a66      	ldr	r2, [pc, #408]	; (80047c4 <DMA_SetConfig+0x280>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00e      	beq.n	800464e <DMA_SetConfig+0x10a>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a64      	ldr	r2, [pc, #400]	; (80047c8 <DMA_SetConfig+0x284>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d009      	beq.n	800464e <DMA_SetConfig+0x10a>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a63      	ldr	r2, [pc, #396]	; (80047cc <DMA_SetConfig+0x288>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d004      	beq.n	800464e <DMA_SetConfig+0x10a>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a61      	ldr	r2, [pc, #388]	; (80047d0 <DMA_SetConfig+0x28c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d101      	bne.n	8004652 <DMA_SetConfig+0x10e>
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <DMA_SetConfig+0x110>
 8004652:	2300      	movs	r3, #0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00d      	beq.n	8004674 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004660:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004666:	2b00      	cmp	r3, #0
 8004668:	d004      	beq.n	8004674 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004672:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a3e      	ldr	r2, [pc, #248]	; (8004774 <DMA_SetConfig+0x230>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d04a      	beq.n	8004714 <DMA_SetConfig+0x1d0>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a3d      	ldr	r2, [pc, #244]	; (8004778 <DMA_SetConfig+0x234>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d045      	beq.n	8004714 <DMA_SetConfig+0x1d0>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a3b      	ldr	r2, [pc, #236]	; (800477c <DMA_SetConfig+0x238>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d040      	beq.n	8004714 <DMA_SetConfig+0x1d0>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a3a      	ldr	r2, [pc, #232]	; (8004780 <DMA_SetConfig+0x23c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d03b      	beq.n	8004714 <DMA_SetConfig+0x1d0>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a38      	ldr	r2, [pc, #224]	; (8004784 <DMA_SetConfig+0x240>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d036      	beq.n	8004714 <DMA_SetConfig+0x1d0>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a37      	ldr	r2, [pc, #220]	; (8004788 <DMA_SetConfig+0x244>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d031      	beq.n	8004714 <DMA_SetConfig+0x1d0>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a35      	ldr	r2, [pc, #212]	; (800478c <DMA_SetConfig+0x248>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d02c      	beq.n	8004714 <DMA_SetConfig+0x1d0>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a34      	ldr	r2, [pc, #208]	; (8004790 <DMA_SetConfig+0x24c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d027      	beq.n	8004714 <DMA_SetConfig+0x1d0>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a32      	ldr	r2, [pc, #200]	; (8004794 <DMA_SetConfig+0x250>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d022      	beq.n	8004714 <DMA_SetConfig+0x1d0>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a31      	ldr	r2, [pc, #196]	; (8004798 <DMA_SetConfig+0x254>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d01d      	beq.n	8004714 <DMA_SetConfig+0x1d0>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a2f      	ldr	r2, [pc, #188]	; (800479c <DMA_SetConfig+0x258>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d018      	beq.n	8004714 <DMA_SetConfig+0x1d0>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a2e      	ldr	r2, [pc, #184]	; (80047a0 <DMA_SetConfig+0x25c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d013      	beq.n	8004714 <DMA_SetConfig+0x1d0>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a2c      	ldr	r2, [pc, #176]	; (80047a4 <DMA_SetConfig+0x260>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00e      	beq.n	8004714 <DMA_SetConfig+0x1d0>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a2b      	ldr	r2, [pc, #172]	; (80047a8 <DMA_SetConfig+0x264>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d009      	beq.n	8004714 <DMA_SetConfig+0x1d0>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a29      	ldr	r2, [pc, #164]	; (80047ac <DMA_SetConfig+0x268>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d004      	beq.n	8004714 <DMA_SetConfig+0x1d0>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a28      	ldr	r2, [pc, #160]	; (80047b0 <DMA_SetConfig+0x26c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d101      	bne.n	8004718 <DMA_SetConfig+0x1d4>
 8004714:	2301      	movs	r3, #1
 8004716:	e000      	b.n	800471a <DMA_SetConfig+0x1d6>
 8004718:	2300      	movs	r3, #0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d05a      	beq.n	80047d4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	223f      	movs	r2, #63	; 0x3f
 8004728:	409a      	lsls	r2, r3
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800473c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b40      	cmp	r3, #64	; 0x40
 800474c:	d108      	bne.n	8004760 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800475e:	e087      	b.n	8004870 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	60da      	str	r2, [r3, #12]
}
 8004770:	e07e      	b.n	8004870 <DMA_SetConfig+0x32c>
 8004772:	bf00      	nop
 8004774:	40020010 	.word	0x40020010
 8004778:	40020028 	.word	0x40020028
 800477c:	40020040 	.word	0x40020040
 8004780:	40020058 	.word	0x40020058
 8004784:	40020070 	.word	0x40020070
 8004788:	40020088 	.word	0x40020088
 800478c:	400200a0 	.word	0x400200a0
 8004790:	400200b8 	.word	0x400200b8
 8004794:	40020410 	.word	0x40020410
 8004798:	40020428 	.word	0x40020428
 800479c:	40020440 	.word	0x40020440
 80047a0:	40020458 	.word	0x40020458
 80047a4:	40020470 	.word	0x40020470
 80047a8:	40020488 	.word	0x40020488
 80047ac:	400204a0 	.word	0x400204a0
 80047b0:	400204b8 	.word	0x400204b8
 80047b4:	58025408 	.word	0x58025408
 80047b8:	5802541c 	.word	0x5802541c
 80047bc:	58025430 	.word	0x58025430
 80047c0:	58025444 	.word	0x58025444
 80047c4:	58025458 	.word	0x58025458
 80047c8:	5802546c 	.word	0x5802546c
 80047cc:	58025480 	.word	0x58025480
 80047d0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a28      	ldr	r2, [pc, #160]	; (800487c <DMA_SetConfig+0x338>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d022      	beq.n	8004824 <DMA_SetConfig+0x2e0>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a27      	ldr	r2, [pc, #156]	; (8004880 <DMA_SetConfig+0x33c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d01d      	beq.n	8004824 <DMA_SetConfig+0x2e0>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a25      	ldr	r2, [pc, #148]	; (8004884 <DMA_SetConfig+0x340>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d018      	beq.n	8004824 <DMA_SetConfig+0x2e0>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a24      	ldr	r2, [pc, #144]	; (8004888 <DMA_SetConfig+0x344>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d013      	beq.n	8004824 <DMA_SetConfig+0x2e0>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a22      	ldr	r2, [pc, #136]	; (800488c <DMA_SetConfig+0x348>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d00e      	beq.n	8004824 <DMA_SetConfig+0x2e0>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a21      	ldr	r2, [pc, #132]	; (8004890 <DMA_SetConfig+0x34c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d009      	beq.n	8004824 <DMA_SetConfig+0x2e0>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1f      	ldr	r2, [pc, #124]	; (8004894 <DMA_SetConfig+0x350>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d004      	beq.n	8004824 <DMA_SetConfig+0x2e0>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a1e      	ldr	r2, [pc, #120]	; (8004898 <DMA_SetConfig+0x354>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d101      	bne.n	8004828 <DMA_SetConfig+0x2e4>
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <DMA_SetConfig+0x2e6>
 8004828:	2300      	movs	r3, #0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d020      	beq.n	8004870 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	2201      	movs	r2, #1
 8004838:	409a      	lsls	r2, r3
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2b40      	cmp	r3, #64	; 0x40
 800484c:	d108      	bne.n	8004860 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	60da      	str	r2, [r3, #12]
}
 800485e:	e007      	b.n	8004870 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	60da      	str	r2, [r3, #12]
}
 8004870:	bf00      	nop
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	58025408 	.word	0x58025408
 8004880:	5802541c 	.word	0x5802541c
 8004884:	58025430 	.word	0x58025430
 8004888:	58025444 	.word	0x58025444
 800488c:	58025458 	.word	0x58025458
 8004890:	5802546c 	.word	0x5802546c
 8004894:	58025480 	.word	0x58025480
 8004898:	58025494 	.word	0x58025494

0800489c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a42      	ldr	r2, [pc, #264]	; (80049b4 <DMA_CalcBaseAndBitshift+0x118>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d04a      	beq.n	8004944 <DMA_CalcBaseAndBitshift+0xa8>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a41      	ldr	r2, [pc, #260]	; (80049b8 <DMA_CalcBaseAndBitshift+0x11c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d045      	beq.n	8004944 <DMA_CalcBaseAndBitshift+0xa8>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a3f      	ldr	r2, [pc, #252]	; (80049bc <DMA_CalcBaseAndBitshift+0x120>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d040      	beq.n	8004944 <DMA_CalcBaseAndBitshift+0xa8>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a3e      	ldr	r2, [pc, #248]	; (80049c0 <DMA_CalcBaseAndBitshift+0x124>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d03b      	beq.n	8004944 <DMA_CalcBaseAndBitshift+0xa8>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a3c      	ldr	r2, [pc, #240]	; (80049c4 <DMA_CalcBaseAndBitshift+0x128>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d036      	beq.n	8004944 <DMA_CalcBaseAndBitshift+0xa8>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a3b      	ldr	r2, [pc, #236]	; (80049c8 <DMA_CalcBaseAndBitshift+0x12c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d031      	beq.n	8004944 <DMA_CalcBaseAndBitshift+0xa8>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a39      	ldr	r2, [pc, #228]	; (80049cc <DMA_CalcBaseAndBitshift+0x130>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d02c      	beq.n	8004944 <DMA_CalcBaseAndBitshift+0xa8>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a38      	ldr	r2, [pc, #224]	; (80049d0 <DMA_CalcBaseAndBitshift+0x134>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d027      	beq.n	8004944 <DMA_CalcBaseAndBitshift+0xa8>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a36      	ldr	r2, [pc, #216]	; (80049d4 <DMA_CalcBaseAndBitshift+0x138>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d022      	beq.n	8004944 <DMA_CalcBaseAndBitshift+0xa8>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a35      	ldr	r2, [pc, #212]	; (80049d8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d01d      	beq.n	8004944 <DMA_CalcBaseAndBitshift+0xa8>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a33      	ldr	r2, [pc, #204]	; (80049dc <DMA_CalcBaseAndBitshift+0x140>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d018      	beq.n	8004944 <DMA_CalcBaseAndBitshift+0xa8>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a32      	ldr	r2, [pc, #200]	; (80049e0 <DMA_CalcBaseAndBitshift+0x144>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d013      	beq.n	8004944 <DMA_CalcBaseAndBitshift+0xa8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a30      	ldr	r2, [pc, #192]	; (80049e4 <DMA_CalcBaseAndBitshift+0x148>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00e      	beq.n	8004944 <DMA_CalcBaseAndBitshift+0xa8>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a2f      	ldr	r2, [pc, #188]	; (80049e8 <DMA_CalcBaseAndBitshift+0x14c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d009      	beq.n	8004944 <DMA_CalcBaseAndBitshift+0xa8>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a2d      	ldr	r2, [pc, #180]	; (80049ec <DMA_CalcBaseAndBitshift+0x150>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d004      	beq.n	8004944 <DMA_CalcBaseAndBitshift+0xa8>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a2c      	ldr	r2, [pc, #176]	; (80049f0 <DMA_CalcBaseAndBitshift+0x154>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d101      	bne.n	8004948 <DMA_CalcBaseAndBitshift+0xac>
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <DMA_CalcBaseAndBitshift+0xae>
 8004948:	2300      	movs	r3, #0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d024      	beq.n	8004998 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	3b10      	subs	r3, #16
 8004956:	4a27      	ldr	r2, [pc, #156]	; (80049f4 <DMA_CalcBaseAndBitshift+0x158>)
 8004958:	fba2 2303 	umull	r2, r3, r2, r3
 800495c:	091b      	lsrs	r3, r3, #4
 800495e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	4a24      	ldr	r2, [pc, #144]	; (80049f8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004968:	5cd3      	ldrb	r3, [r2, r3]
 800496a:	461a      	mov	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b03      	cmp	r3, #3
 8004974:	d908      	bls.n	8004988 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	4b1f      	ldr	r3, [pc, #124]	; (80049fc <DMA_CalcBaseAndBitshift+0x160>)
 800497e:	4013      	ands	r3, r2
 8004980:	1d1a      	adds	r2, r3, #4
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	659a      	str	r2, [r3, #88]	; 0x58
 8004986:	e00d      	b.n	80049a4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	4b1b      	ldr	r3, [pc, #108]	; (80049fc <DMA_CalcBaseAndBitshift+0x160>)
 8004990:	4013      	ands	r3, r2
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6593      	str	r3, [r2, #88]	; 0x58
 8004996:	e005      	b.n	80049a4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	40020010 	.word	0x40020010
 80049b8:	40020028 	.word	0x40020028
 80049bc:	40020040 	.word	0x40020040
 80049c0:	40020058 	.word	0x40020058
 80049c4:	40020070 	.word	0x40020070
 80049c8:	40020088 	.word	0x40020088
 80049cc:	400200a0 	.word	0x400200a0
 80049d0:	400200b8 	.word	0x400200b8
 80049d4:	40020410 	.word	0x40020410
 80049d8:	40020428 	.word	0x40020428
 80049dc:	40020440 	.word	0x40020440
 80049e0:	40020458 	.word	0x40020458
 80049e4:	40020470 	.word	0x40020470
 80049e8:	40020488 	.word	0x40020488
 80049ec:	400204a0 	.word	0x400204a0
 80049f0:	400204b8 	.word	0x400204b8
 80049f4:	aaaaaaab 	.word	0xaaaaaaab
 80049f8:	08011f5c 	.word	0x08011f5c
 80049fc:	fffffc00 	.word	0xfffffc00

08004a00 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d120      	bne.n	8004a56 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d858      	bhi.n	8004ace <DMA_CheckFifoParam+0xce>
 8004a1c:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <DMA_CheckFifoParam+0x24>)
 8004a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a22:	bf00      	nop
 8004a24:	08004a35 	.word	0x08004a35
 8004a28:	08004a47 	.word	0x08004a47
 8004a2c:	08004a35 	.word	0x08004a35
 8004a30:	08004acf 	.word	0x08004acf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d048      	beq.n	8004ad2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a44:	e045      	b.n	8004ad2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a4e:	d142      	bne.n	8004ad6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a54:	e03f      	b.n	8004ad6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a5e:	d123      	bne.n	8004aa8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d838      	bhi.n	8004ada <DMA_CheckFifoParam+0xda>
 8004a68:	a201      	add	r2, pc, #4	; (adr r2, 8004a70 <DMA_CheckFifoParam+0x70>)
 8004a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6e:	bf00      	nop
 8004a70:	08004a81 	.word	0x08004a81
 8004a74:	08004a87 	.word	0x08004a87
 8004a78:	08004a81 	.word	0x08004a81
 8004a7c:	08004a99 	.word	0x08004a99
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	73fb      	strb	r3, [r7, #15]
        break;
 8004a84:	e030      	b.n	8004ae8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d025      	beq.n	8004ade <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a96:	e022      	b.n	8004ade <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004aa0:	d11f      	bne.n	8004ae2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004aa6:	e01c      	b.n	8004ae2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d902      	bls.n	8004ab6 <DMA_CheckFifoParam+0xb6>
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	d003      	beq.n	8004abc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ab4:	e018      	b.n	8004ae8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	73fb      	strb	r3, [r7, #15]
        break;
 8004aba:	e015      	b.n	8004ae8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00e      	beq.n	8004ae6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	73fb      	strb	r3, [r7, #15]
    break;
 8004acc:	e00b      	b.n	8004ae6 <DMA_CheckFifoParam+0xe6>
        break;
 8004ace:	bf00      	nop
 8004ad0:	e00a      	b.n	8004ae8 <DMA_CheckFifoParam+0xe8>
        break;
 8004ad2:	bf00      	nop
 8004ad4:	e008      	b.n	8004ae8 <DMA_CheckFifoParam+0xe8>
        break;
 8004ad6:	bf00      	nop
 8004ad8:	e006      	b.n	8004ae8 <DMA_CheckFifoParam+0xe8>
        break;
 8004ada:	bf00      	nop
 8004adc:	e004      	b.n	8004ae8 <DMA_CheckFifoParam+0xe8>
        break;
 8004ade:	bf00      	nop
 8004ae0:	e002      	b.n	8004ae8 <DMA_CheckFifoParam+0xe8>
        break;
 8004ae2:	bf00      	nop
 8004ae4:	e000      	b.n	8004ae8 <DMA_CheckFifoParam+0xe8>
    break;
 8004ae6:	bf00      	nop
    }
  }

  return status;
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop

08004af8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a38      	ldr	r2, [pc, #224]	; (8004bec <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d022      	beq.n	8004b56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a36      	ldr	r2, [pc, #216]	; (8004bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d01d      	beq.n	8004b56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a35      	ldr	r2, [pc, #212]	; (8004bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d018      	beq.n	8004b56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a33      	ldr	r2, [pc, #204]	; (8004bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d013      	beq.n	8004b56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a32      	ldr	r2, [pc, #200]	; (8004bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00e      	beq.n	8004b56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a30      	ldr	r2, [pc, #192]	; (8004c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d009      	beq.n	8004b56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a2f      	ldr	r2, [pc, #188]	; (8004c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d004      	beq.n	8004b56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a2d      	ldr	r2, [pc, #180]	; (8004c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d101      	bne.n	8004b5a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004b56:	2301      	movs	r3, #1
 8004b58:	e000      	b.n	8004b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01a      	beq.n	8004b96 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	3b08      	subs	r3, #8
 8004b68:	4a28      	ldr	r2, [pc, #160]	; (8004c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6e:	091b      	lsrs	r3, r3, #4
 8004b70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4b26      	ldr	r3, [pc, #152]	; (8004c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a24      	ldr	r2, [pc, #144]	; (8004c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004b84:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f003 031f 	and.w	r3, r3, #31
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	409a      	lsls	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004b94:	e024      	b.n	8004be0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	3b10      	subs	r3, #16
 8004b9e:	4a1e      	ldr	r2, [pc, #120]	; (8004c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4a1c      	ldr	r2, [pc, #112]	; (8004c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d806      	bhi.n	8004bbe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4a1b      	ldr	r2, [pc, #108]	; (8004c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d902      	bls.n	8004bbe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	3308      	adds	r3, #8
 8004bbc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4b18      	ldr	r3, [pc, #96]	; (8004c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a16      	ldr	r2, [pc, #88]	; (8004c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004bd0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 031f 	and.w	r3, r3, #31
 8004bd8:	2201      	movs	r2, #1
 8004bda:	409a      	lsls	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004be0:	bf00      	nop
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	58025408 	.word	0x58025408
 8004bf0:	5802541c 	.word	0x5802541c
 8004bf4:	58025430 	.word	0x58025430
 8004bf8:	58025444 	.word	0x58025444
 8004bfc:	58025458 	.word	0x58025458
 8004c00:	5802546c 	.word	0x5802546c
 8004c04:	58025480 	.word	0x58025480
 8004c08:	58025494 	.word	0x58025494
 8004c0c:	cccccccd 	.word	0xcccccccd
 8004c10:	16009600 	.word	0x16009600
 8004c14:	58025880 	.word	0x58025880
 8004c18:	aaaaaaab 	.word	0xaaaaaaab
 8004c1c:	400204b8 	.word	0x400204b8
 8004c20:	4002040f 	.word	0x4002040f
 8004c24:	10008200 	.word	0x10008200
 8004c28:	40020880 	.word	0x40020880

08004c2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d04a      	beq.n	8004cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d847      	bhi.n	8004cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a25      	ldr	r2, [pc, #148]	; (8004ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d022      	beq.n	8004c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a24      	ldr	r2, [pc, #144]	; (8004ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d01d      	beq.n	8004c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a22      	ldr	r2, [pc, #136]	; (8004cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d018      	beq.n	8004c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a21      	ldr	r2, [pc, #132]	; (8004cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d013      	beq.n	8004c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a1f      	ldr	r2, [pc, #124]	; (8004cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00e      	beq.n	8004c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a1e      	ldr	r2, [pc, #120]	; (8004cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d009      	beq.n	8004c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a1c      	ldr	r2, [pc, #112]	; (8004cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a1b      	ldr	r2, [pc, #108]	; (8004d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d101      	bne.n	8004c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4b17      	ldr	r3, [pc, #92]	; (8004d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004ca6:	4413      	add	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	461a      	mov	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a15      	ldr	r2, [pc, #84]	; (8004d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004cb4:	671a      	str	r2, [r3, #112]	; 0x70
 8004cb6:	e009      	b.n	8004ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4b14      	ldr	r3, [pc, #80]	; (8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a11      	ldr	r2, [pc, #68]	; (8004d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004cca:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	409a      	lsls	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004cd8:	bf00      	nop
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	58025408 	.word	0x58025408
 8004ce8:	5802541c 	.word	0x5802541c
 8004cec:	58025430 	.word	0x58025430
 8004cf0:	58025444 	.word	0x58025444
 8004cf4:	58025458 	.word	0x58025458
 8004cf8:	5802546c 	.word	0x5802546c
 8004cfc:	58025480 	.word	0x58025480
 8004d00:	58025494 	.word	0x58025494
 8004d04:	1600963f 	.word	0x1600963f
 8004d08:	58025940 	.word	0x58025940
 8004d0c:	1000823f 	.word	0x1000823f
 8004d10:	40020940 	.word	0x40020940

08004d14 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e0c6      	b.n	8004eb4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d102      	bne.n	8004d34 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fc fcbc 	bl	80016ac <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2223      	movs	r2, #35	; 0x23
 8004d38:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d3a:	4b60      	ldr	r3, [pc, #384]	; (8004ebc <HAL_ETH_Init+0x1a8>)
 8004d3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d40:	4a5e      	ldr	r2, [pc, #376]	; (8004ebc <HAL_ETH_Init+0x1a8>)
 8004d42:	f043 0302 	orr.w	r3, r3, #2
 8004d46:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d4a:	4b5c      	ldr	r3, [pc, #368]	; (8004ebc <HAL_ETH_Init+0x1a8>)
 8004d4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	60bb      	str	r3, [r7, #8]
 8004d56:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	7a1b      	ldrb	r3, [r3, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d103      	bne.n	8004d68 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004d60:	2000      	movs	r0, #0
 8004d62:	f7fd f879 	bl	8001e58 <HAL_SYSCFG_ETHInterfaceSelect>
 8004d66:	e003      	b.n	8004d70 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004d68:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004d6c:	f7fd f874 	bl	8001e58 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0201 	orr.w	r2, r2, #1
 8004d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d88:	f7fd f82a 	bl	8001de0 <HAL_GetTick>
 8004d8c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004d8e:	e00f      	b.n	8004db0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8004d90:	f7fd f826 	bl	8001de0 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d9e:	d907      	bls.n	8004db0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2204      	movs	r2, #4
 8004da4:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	22e0      	movs	r2, #224	; 0xe0
 8004daa:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e081      	b.n	8004eb4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1e6      	bne.n	8004d90 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fac0 	bl	8005348 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004dc8:	f003 fa72 	bl	80082b0 <HAL_RCC_GetHCLKFreq>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	4a3c      	ldr	r2, [pc, #240]	; (8004ec0 <HAL_ETH_Init+0x1ac>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	0c9a      	lsrs	r2, r3, #18
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	3a01      	subs	r2, #1
 8004ddc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fa13 	bl	800520c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004dfc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004e00:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d007      	beq.n	8004e1e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	22e0      	movs	r2, #224	; 0xe0
 8004e18:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e04a      	b.n	8004eb4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	f241 1308 	movw	r3, #4360	; 0x1108
 8004e26:	4413      	add	r3, r2
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4b26      	ldr	r3, [pc, #152]	; (8004ec4 <HAL_ETH_Init+0x1b0>)
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6952      	ldr	r2, [r2, #20]
 8004e32:	0052      	lsls	r2, r2, #1
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	6809      	ldr	r1, [r1, #0]
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	f241 1308 	movw	r3, #4360	; 0x1108
 8004e3e:	440b      	add	r3, r1
 8004e40:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 fad8 	bl	80053f8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fb1c 	bl	8005486 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	3305      	adds	r3, #5
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	021a      	lsls	r2, r3, #8
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	4619      	mov	r1, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	3303      	adds	r3, #3
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	061a      	lsls	r2, r3, #24
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	3302      	adds	r3, #2
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	041b      	lsls	r3, r3, #16
 8004e80:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	3301      	adds	r3, #1
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e8c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004e9a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e9c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2210      	movs	r2, #16
 8004eaa:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2210      	movs	r2, #16
 8004eb0:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	58024400 	.word	0x58024400
 8004ec0:	431bde83 	.word	0x431bde83
 8004ec4:	ffff8001 	.word	0xffff8001

08004ec8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8004eda:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	791b      	ldrb	r3, [r3, #4]
 8004ee0:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8004ee2:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	7b1b      	ldrb	r3, [r3, #12]
 8004ee8:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004eea:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	7b5b      	ldrb	r3, [r3, #13]
 8004ef0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004ef2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	7b9b      	ldrb	r3, [r3, #14]
 8004ef8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004efa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	7bdb      	ldrb	r3, [r3, #15]
 8004f00:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004f02:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	7c12      	ldrb	r2, [r2, #16]
 8004f08:	2a00      	cmp	r2, #0
 8004f0a:	d102      	bne.n	8004f12 <ETH_SetMACConfig+0x4a>
 8004f0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004f10:	e000      	b.n	8004f14 <ETH_SetMACConfig+0x4c>
 8004f12:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004f14:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	7c52      	ldrb	r2, [r2, #17]
 8004f1a:	2a00      	cmp	r2, #0
 8004f1c:	d102      	bne.n	8004f24 <ETH_SetMACConfig+0x5c>
 8004f1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f22:	e000      	b.n	8004f26 <ETH_SetMACConfig+0x5e>
 8004f24:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004f26:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	7c9b      	ldrb	r3, [r3, #18]
 8004f2c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004f2e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004f34:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8004f3a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	7f1b      	ldrb	r3, [r3, #28]
 8004f40:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8004f42:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	7f5b      	ldrb	r3, [r3, #29]
 8004f48:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004f4a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	7f92      	ldrb	r2, [r2, #30]
 8004f50:	2a00      	cmp	r2, #0
 8004f52:	d102      	bne.n	8004f5a <ETH_SetMACConfig+0x92>
 8004f54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f58:	e000      	b.n	8004f5c <ETH_SetMACConfig+0x94>
 8004f5a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004f5c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	7fdb      	ldrb	r3, [r3, #31]
 8004f62:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004f64:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004f6c:	2a00      	cmp	r2, #0
 8004f6e:	d102      	bne.n	8004f76 <ETH_SetMACConfig+0xae>
 8004f70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f74:	e000      	b.n	8004f78 <ETH_SetMACConfig+0xb0>
 8004f76:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004f78:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004f7e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f86:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004f88:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	4b56      	ldr	r3, [pc, #344]	; (80050f4 <ETH_SetMACConfig+0x22c>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	68f9      	ldr	r1, [r7, #12]
 8004fa2:	430b      	orrs	r3, r1
 8004fa4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004faa:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fb2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004fb4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fbc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004fbe:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004fc6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004fc8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004fd0:	2a00      	cmp	r2, #0
 8004fd2:	d102      	bne.n	8004fda <ETH_SetMACConfig+0x112>
 8004fd4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004fd8:	e000      	b.n	8004fdc <ETH_SetMACConfig+0x114>
 8004fda:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004fdc:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	4b42      	ldr	r3, [pc, #264]	; (80050f8 <ETH_SetMACConfig+0x230>)
 8004fee:	4013      	ands	r3, r2
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	68f9      	ldr	r1, [r7, #12]
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005000:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	4b3a      	ldr	r3, [pc, #232]	; (80050fc <ETH_SetMACConfig+0x234>)
 8005012:	4013      	ands	r3, r2
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6812      	ldr	r2, [r2, #0]
 8005018:	68f9      	ldr	r1, [r7, #12]
 800501a:	430b      	orrs	r3, r1
 800501c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005024:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800502a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005032:	2a00      	cmp	r2, #0
 8005034:	d101      	bne.n	800503a <ETH_SetMACConfig+0x172>
 8005036:	2280      	movs	r2, #128	; 0x80
 8005038:	e000      	b.n	800503c <ETH_SetMACConfig+0x174>
 800503a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800503c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005042:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005044:	4313      	orrs	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800504e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005052:	4013      	ands	r3, r2
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6812      	ldr	r2, [r2, #0]
 8005058:	68f9      	ldr	r1, [r7, #12]
 800505a:	430b      	orrs	r3, r1
 800505c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005064:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800506c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507a:	f023 0103 	bic.w	r1, r3, #3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	430a      	orrs	r2, r1
 8005086:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005092:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80050ae:	2a00      	cmp	r2, #0
 80050b0:	d101      	bne.n	80050b6 <ETH_SetMACConfig+0x1ee>
 80050b2:	2240      	movs	r2, #64	; 0x40
 80050b4:	e000      	b.n	80050b8 <ETH_SetMACConfig+0x1f0>
 80050b6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80050b8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80050c0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80050c2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80050ca:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80050d8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80050e8:	bf00      	nop
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	00048083 	.word	0x00048083
 80050f8:	c0f88000 	.word	0xc0f88000
 80050fc:	fffffef0 	.word	0xfffffef0

08005100 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	4b38      	ldr	r3, [pc, #224]	; (80051f8 <ETH_SetDMAConfig+0xf8>)
 8005116:	4013      	ands	r3, r2
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	6812      	ldr	r2, [r2, #0]
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	6809      	ldr	r1, [r1, #0]
 8005120:	431a      	orrs	r2, r3
 8005122:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005126:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	791b      	ldrb	r3, [r3, #4]
 800512c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005132:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	7b1b      	ldrb	r3, [r3, #12]
 8005138:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	f241 0304 	movw	r3, #4100	; 0x1004
 8005146:	4413      	add	r3, r2
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4b2c      	ldr	r3, [pc, #176]	; (80051fc <ETH_SetDMAConfig+0xfc>)
 800514c:	4013      	ands	r3, r2
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6811      	ldr	r1, [r2, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	431a      	orrs	r2, r3
 8005156:	f241 0304 	movw	r3, #4100	; 0x1004
 800515a:	440b      	add	r3, r1
 800515c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	7b5b      	ldrb	r3, [r3, #13]
 8005162:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005168:	4313      	orrs	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	4b22      	ldr	r3, [pc, #136]	; (8005200 <ETH_SetDMAConfig+0x100>)
 8005178:	4013      	ands	r3, r2
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6811      	ldr	r1, [r2, #0]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	431a      	orrs	r2, r3
 8005182:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8005186:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	7d1b      	ldrb	r3, [r3, #20]
 8005190:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005192:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	7f5b      	ldrb	r3, [r3, #29]
 8005198:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	f241 1304 	movw	r3, #4356	; 0x1104
 80051a6:	4413      	add	r3, r2
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	4b16      	ldr	r3, [pc, #88]	; (8005204 <ETH_SetDMAConfig+0x104>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6811      	ldr	r1, [r2, #0]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	431a      	orrs	r2, r3
 80051b6:	f241 1304 	movw	r3, #4356	; 0x1104
 80051ba:	440b      	add	r3, r1
 80051bc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	7f1b      	ldrb	r3, [r3, #28]
 80051c2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	f241 1308 	movw	r3, #4360	; 0x1108
 80051d4:	4413      	add	r3, r2
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <ETH_SetDMAConfig+0x108>)
 80051da:	4013      	ands	r3, r2
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6811      	ldr	r1, [r2, #0]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	431a      	orrs	r2, r3
 80051e4:	f241 1308 	movw	r3, #4360	; 0x1108
 80051e8:	440b      	add	r3, r1
 80051ea:	601a      	str	r2, [r3, #0]
}
 80051ec:	bf00      	nop
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	ffff87fd 	.word	0xffff87fd
 80051fc:	ffff2ffe 	.word	0xffff2ffe
 8005200:	fffec000 	.word	0xfffec000
 8005204:	ffc0efef 	.word	0xffc0efef
 8005208:	7fc0ffff 	.word	0x7fc0ffff

0800520c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b0a4      	sub	sp, #144	; 0x90
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005214:	2301      	movs	r3, #1
 8005216:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800521a:	2300      	movs	r3, #0
 800521c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800521e:	2300      	movs	r3, #0
 8005220:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005224:	2300      	movs	r3, #0
 8005226:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800522a:	2301      	movs	r3, #1
 800522c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005230:	2301      	movs	r3, #1
 8005232:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005236:	2301      	movs	r3, #1
 8005238:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800523c:	2300      	movs	r3, #0
 800523e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005242:	2301      	movs	r3, #1
 8005244:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800524c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800524e:	2300      	movs	r3, #0
 8005250:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005254:	2300      	movs	r3, #0
 8005256:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005258:	2300      	movs	r3, #0
 800525a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800525e:	2300      	movs	r3, #0
 8005260:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005264:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005268:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800526a:	2300      	movs	r3, #0
 800526c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005270:	2300      	movs	r3, #0
 8005272:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005274:	2301      	movs	r3, #1
 8005276:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800527a:	2300      	movs	r3, #0
 800527c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005280:	2300      	movs	r3, #0
 8005282:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005286:	2300      	movs	r3, #0
 8005288:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800528a:	2300      	movs	r3, #0
 800528c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800528e:	2300      	movs	r3, #0
 8005290:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005292:	2300      	movs	r3, #0
 8005294:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005298:	2300      	movs	r3, #0
 800529a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800529e:	2301      	movs	r3, #1
 80052a0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80052a4:	2320      	movs	r3, #32
 80052a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80052b0:	2300      	movs	r3, #0
 80052b2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80052b6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80052ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80052bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052c0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80052c2:	2300      	movs	r3, #0
 80052c4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80052c8:	2302      	movs	r3, #2
 80052ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80052ce:	2300      	movs	r3, #0
 80052d0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80052d4:	2300      	movs	r3, #0
 80052d6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80052da:	2300      	movs	r3, #0
 80052dc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80052e0:	2301      	movs	r3, #1
 80052e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80052e6:	2300      	movs	r3, #0
 80052e8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80052ea:	2301      	movs	r3, #1
 80052ec:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80052f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052f4:	4619      	mov	r1, r3
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7ff fde6 	bl	8004ec8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80052fc:	2301      	movs	r3, #1
 80052fe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005300:	2301      	movs	r3, #1
 8005302:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005304:	2300      	movs	r3, #0
 8005306:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005308:	2300      	movs	r3, #0
 800530a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800530e:	2300      	movs	r3, #0
 8005310:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005312:	2300      	movs	r3, #0
 8005314:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005316:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800531a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800531c:	2300      	movs	r3, #0
 800531e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005320:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005324:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005326:	2300      	movs	r3, #0
 8005328:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800532c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005330:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005332:	f107 0308 	add.w	r3, r7, #8
 8005336:	4619      	mov	r1, r3
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7ff fee1 	bl	8005100 <ETH_SetDMAConfig>
}
 800533e:	bf00      	nop
 8005340:	3790      	adds	r7, #144	; 0x90
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005358:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005360:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005362:	f002 ffa5 	bl	80082b0 <HAL_RCC_GetHCLKFreq>
 8005366:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4a1e      	ldr	r2, [pc, #120]	; (80053e4 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d908      	bls.n	8005382 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d804      	bhi.n	8005382 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	e027      	b.n	80053d2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	4a18      	ldr	r2, [pc, #96]	; (80053e8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d908      	bls.n	800539c <ETH_MAC_MDIO_ClkConfig+0x54>
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4a17      	ldr	r2, [pc, #92]	; (80053ec <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d204      	bcs.n	800539c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	e01a      	b.n	80053d2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4a13      	ldr	r2, [pc, #76]	; (80053ec <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d303      	bcc.n	80053ac <ETH_MAC_MDIO_ClkConfig+0x64>
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	4a12      	ldr	r2, [pc, #72]	; (80053f0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d911      	bls.n	80053d0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4a10      	ldr	r2, [pc, #64]	; (80053f0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d908      	bls.n	80053c6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4a0f      	ldr	r2, [pc, #60]	; (80053f4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d804      	bhi.n	80053c6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	e005      	b.n	80053d2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	e000      	b.n	80053d2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80053d0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80053dc:	bf00      	nop
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	01312cff 	.word	0x01312cff
 80053e8:	02160ebf 	.word	0x02160ebf
 80053ec:	03938700 	.word	0x03938700
 80053f0:	05f5e0ff 	.word	0x05f5e0ff
 80053f4:	08f0d17f 	.word	0x08f0d17f

080053f8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005400:	2300      	movs	r3, #0
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	e01d      	b.n	8005442 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68d9      	ldr	r1, [r3, #12]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4613      	mov	r3, r2
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	4413      	add	r3, r2
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	440b      	add	r3, r1
 8005416:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2200      	movs	r2, #0
 8005422:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2200      	movs	r2, #0
 8005428:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2200      	movs	r2, #0
 800542e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005430:	68b9      	ldr	r1, [r7, #8]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	3206      	adds	r2, #6
 8005438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3301      	adds	r3, #1
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b03      	cmp	r3, #3
 8005446:	d9de      	bls.n	8005406 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	f241 132c 	movw	r3, #4396	; 0x112c
 8005456:	4413      	add	r3, r2
 8005458:	2203      	movs	r2, #3
 800545a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68d9      	ldr	r1, [r3, #12]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	f241 1314 	movw	r3, #4372	; 0x1114
 8005468:	4413      	add	r3, r2
 800546a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005478:	601a      	str	r2, [r3, #0]
}
 800547a:	bf00      	nop
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005486:	b480      	push	{r7}
 8005488:	b085      	sub	sp, #20
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	e024      	b.n	80054de <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6919      	ldr	r1, [r3, #16]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4613      	mov	r3, r2
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	4413      	add	r3, r2
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	440b      	add	r3, r1
 80054a4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2200      	movs	r2, #0
 80054b0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2200      	movs	r2, #0
 80054b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2200      	movs	r2, #0
 80054bc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2200      	movs	r2, #0
 80054c2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2200      	movs	r2, #0
 80054c8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3310      	adds	r3, #16
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	440b      	add	r3, r1
 80054d6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	3301      	adds	r3, #1
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	d9d7      	bls.n	8005494 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	f241 1330 	movw	r3, #4400	; 0x1130
 800550a:	4413      	add	r3, r2
 800550c:	2203      	movs	r2, #3
 800550e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6919      	ldr	r1, [r3, #16]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	f241 131c 	movw	r3, #4380	; 0x111c
 800551c:	4413      	add	r3, r2
 800551e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	f241 1328 	movw	r3, #4392	; 0x1128
 8005530:	4413      	add	r3, r2
 8005532:	6019      	str	r1, [r3, #0]
}
 8005534:	bf00      	nop
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005540:	b480      	push	{r7}
 8005542:	b089      	sub	sp, #36	; 0x24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800554a:	2300      	movs	r3, #0
 800554c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800554e:	4b89      	ldr	r3, [pc, #548]	; (8005774 <HAL_GPIO_Init+0x234>)
 8005550:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005552:	e194      	b.n	800587e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	2101      	movs	r1, #1
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	fa01 f303 	lsl.w	r3, r1, r3
 8005560:	4013      	ands	r3, r2
 8005562:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 8186 	beq.w	8005878 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d00b      	beq.n	800558c <HAL_GPIO_Init+0x4c>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b02      	cmp	r3, #2
 800557a:	d007      	beq.n	800558c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005580:	2b11      	cmp	r3, #17
 8005582:	d003      	beq.n	800558c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b12      	cmp	r3, #18
 800558a:	d130      	bne.n	80055ee <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	2203      	movs	r2, #3
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	43db      	mvns	r3, r3
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	4013      	ands	r3, r2
 80055a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	fa02 f303 	lsl.w	r3, r2, r3
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055c2:	2201      	movs	r2, #1
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ca:	43db      	mvns	r3, r3
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	4013      	ands	r3, r2
 80055d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	091b      	lsrs	r3, r3, #4
 80055d8:	f003 0201 	and.w	r2, r3, #1
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	2203      	movs	r2, #3
 80055fa:	fa02 f303 	lsl.w	r3, r2, r3
 80055fe:	43db      	mvns	r3, r3
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	4013      	ands	r3, r2
 8005604:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	4313      	orrs	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b02      	cmp	r3, #2
 8005624:	d003      	beq.n	800562e <HAL_GPIO_Init+0xee>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	2b12      	cmp	r3, #18
 800562c:	d123      	bne.n	8005676 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	08da      	lsrs	r2, r3, #3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	3208      	adds	r2, #8
 8005636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800563a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	220f      	movs	r2, #15
 8005646:	fa02 f303 	lsl.w	r3, r2, r3
 800564a:	43db      	mvns	r3, r3
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	4013      	ands	r3, r2
 8005650:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	691a      	ldr	r2, [r3, #16]
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	fa02 f303 	lsl.w	r3, r2, r3
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	4313      	orrs	r3, r2
 8005666:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	08da      	lsrs	r2, r3, #3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3208      	adds	r2, #8
 8005670:	69b9      	ldr	r1, [r7, #24]
 8005672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	2203      	movs	r2, #3
 8005682:	fa02 f303 	lsl.w	r3, r2, r3
 8005686:	43db      	mvns	r3, r3
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	4013      	ands	r3, r2
 800568c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f003 0203 	and.w	r2, r3, #3
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	fa02 f303 	lsl.w	r3, r2, r3
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 80e0 	beq.w	8005878 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056b8:	4b2f      	ldr	r3, [pc, #188]	; (8005778 <HAL_GPIO_Init+0x238>)
 80056ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056be:	4a2e      	ldr	r2, [pc, #184]	; (8005778 <HAL_GPIO_Init+0x238>)
 80056c0:	f043 0302 	orr.w	r3, r3, #2
 80056c4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80056c8:	4b2b      	ldr	r3, [pc, #172]	; (8005778 <HAL_GPIO_Init+0x238>)
 80056ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056d6:	4a29      	ldr	r2, [pc, #164]	; (800577c <HAL_GPIO_Init+0x23c>)
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	089b      	lsrs	r3, r3, #2
 80056dc:	3302      	adds	r3, #2
 80056de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	f003 0303 	and.w	r3, r3, #3
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	220f      	movs	r2, #15
 80056ee:	fa02 f303 	lsl.w	r3, r2, r3
 80056f2:	43db      	mvns	r3, r3
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	4013      	ands	r3, r2
 80056f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a20      	ldr	r2, [pc, #128]	; (8005780 <HAL_GPIO_Init+0x240>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d052      	beq.n	80057a8 <HAL_GPIO_Init+0x268>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a1f      	ldr	r2, [pc, #124]	; (8005784 <HAL_GPIO_Init+0x244>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d031      	beq.n	800576e <HAL_GPIO_Init+0x22e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a1e      	ldr	r2, [pc, #120]	; (8005788 <HAL_GPIO_Init+0x248>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d02b      	beq.n	800576a <HAL_GPIO_Init+0x22a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a1d      	ldr	r2, [pc, #116]	; (800578c <HAL_GPIO_Init+0x24c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d025      	beq.n	8005766 <HAL_GPIO_Init+0x226>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a1c      	ldr	r2, [pc, #112]	; (8005790 <HAL_GPIO_Init+0x250>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d01f      	beq.n	8005762 <HAL_GPIO_Init+0x222>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a1b      	ldr	r2, [pc, #108]	; (8005794 <HAL_GPIO_Init+0x254>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d019      	beq.n	800575e <HAL_GPIO_Init+0x21e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a1a      	ldr	r2, [pc, #104]	; (8005798 <HAL_GPIO_Init+0x258>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d013      	beq.n	800575a <HAL_GPIO_Init+0x21a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a19      	ldr	r2, [pc, #100]	; (800579c <HAL_GPIO_Init+0x25c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d00d      	beq.n	8005756 <HAL_GPIO_Init+0x216>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a18      	ldr	r2, [pc, #96]	; (80057a0 <HAL_GPIO_Init+0x260>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d007      	beq.n	8005752 <HAL_GPIO_Init+0x212>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a17      	ldr	r2, [pc, #92]	; (80057a4 <HAL_GPIO_Init+0x264>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d101      	bne.n	800574e <HAL_GPIO_Init+0x20e>
 800574a:	2309      	movs	r3, #9
 800574c:	e02d      	b.n	80057aa <HAL_GPIO_Init+0x26a>
 800574e:	230a      	movs	r3, #10
 8005750:	e02b      	b.n	80057aa <HAL_GPIO_Init+0x26a>
 8005752:	2308      	movs	r3, #8
 8005754:	e029      	b.n	80057aa <HAL_GPIO_Init+0x26a>
 8005756:	2307      	movs	r3, #7
 8005758:	e027      	b.n	80057aa <HAL_GPIO_Init+0x26a>
 800575a:	2306      	movs	r3, #6
 800575c:	e025      	b.n	80057aa <HAL_GPIO_Init+0x26a>
 800575e:	2305      	movs	r3, #5
 8005760:	e023      	b.n	80057aa <HAL_GPIO_Init+0x26a>
 8005762:	2304      	movs	r3, #4
 8005764:	e021      	b.n	80057aa <HAL_GPIO_Init+0x26a>
 8005766:	2303      	movs	r3, #3
 8005768:	e01f      	b.n	80057aa <HAL_GPIO_Init+0x26a>
 800576a:	2302      	movs	r3, #2
 800576c:	e01d      	b.n	80057aa <HAL_GPIO_Init+0x26a>
 800576e:	2301      	movs	r3, #1
 8005770:	e01b      	b.n	80057aa <HAL_GPIO_Init+0x26a>
 8005772:	bf00      	nop
 8005774:	58000080 	.word	0x58000080
 8005778:	58024400 	.word	0x58024400
 800577c:	58000400 	.word	0x58000400
 8005780:	58020000 	.word	0x58020000
 8005784:	58020400 	.word	0x58020400
 8005788:	58020800 	.word	0x58020800
 800578c:	58020c00 	.word	0x58020c00
 8005790:	58021000 	.word	0x58021000
 8005794:	58021400 	.word	0x58021400
 8005798:	58021800 	.word	0x58021800
 800579c:	58021c00 	.word	0x58021c00
 80057a0:	58022000 	.word	0x58022000
 80057a4:	58022400 	.word	0x58022400
 80057a8:	2300      	movs	r3, #0
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	f002 0203 	and.w	r2, r2, #3
 80057b0:	0092      	lsls	r2, r2, #2
 80057b2:	4093      	lsls	r3, r2
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057ba:	4938      	ldr	r1, [pc, #224]	; (800589c <HAL_GPIO_Init+0x35c>)
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	089b      	lsrs	r3, r3, #2
 80057c0:	3302      	adds	r3, #2
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	43db      	mvns	r3, r3
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	4013      	ands	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	43db      	mvns	r3, r3
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	4013      	ands	r3, r2
 8005800:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4313      	orrs	r3, r2
 8005814:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800581c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	43db      	mvns	r3, r3
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	4013      	ands	r3, r2
 800582c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	4313      	orrs	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005842:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800584a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	43db      	mvns	r3, r3
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4013      	ands	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	3301      	adds	r3, #1
 800587c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	fa22 f303 	lsr.w	r3, r2, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	f47f ae63 	bne.w	8005554 <HAL_GPIO_Init+0x14>
  }
}
 800588e:	bf00      	nop
 8005890:	bf00      	nop
 8005892:	3724      	adds	r7, #36	; 0x24
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	58000400 	.word	0x58000400

080058a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	460b      	mov	r3, r1
 80058aa:	807b      	strh	r3, [r7, #2]
 80058ac:	4613      	mov	r3, r2
 80058ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058b0:	787b      	ldrb	r3, [r7, #1]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058b6:	887a      	ldrh	r2, [r7, #2]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80058bc:	e003      	b.n	80058c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80058be:	887b      	ldrh	r3, [r7, #2]
 80058c0:	041a      	lsls	r2, r3, #16
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	619a      	str	r2, [r3, #24]
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80058d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058d4:	b08f      	sub	sp, #60	; 0x3c
 80058d6:	af0a      	add	r7, sp, #40	; 0x28
 80058d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e054      	b.n	800598e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d106      	bne.n	8005904 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f00a fc76 	bl	80101f0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2203      	movs	r2, #3
 8005908:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005914:	2b00      	cmp	r3, #0
 8005916:	d102      	bne.n	800591e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4618      	mov	r0, r3
 8005924:	f007 fcd1 	bl	800d2ca <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	603b      	str	r3, [r7, #0]
 800592e:	687e      	ldr	r6, [r7, #4]
 8005930:	466d      	mov	r5, sp
 8005932:	f106 0410 	add.w	r4, r6, #16
 8005936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800593a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800593c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800593e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005942:	e885 0003 	stmia.w	r5, {r0, r1}
 8005946:	1d33      	adds	r3, r6, #4
 8005948:	cb0e      	ldmia	r3, {r1, r2, r3}
 800594a:	6838      	ldr	r0, [r7, #0]
 800594c:	f007 fc3e 	bl	800d1cc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2101      	movs	r1, #1
 8005956:	4618      	mov	r0, r3
 8005958:	f007 fcc8 	bl	800d2ec <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	603b      	str	r3, [r7, #0]
 8005962:	687e      	ldr	r6, [r7, #4]
 8005964:	466d      	mov	r5, sp
 8005966:	f106 0410 	add.w	r4, r6, #16
 800596a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800596c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800596e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005972:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005976:	e885 0003 	stmia.w	r5, {r0, r1}
 800597a:	1d33      	adds	r3, r6, #4
 800597c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800597e:	6838      	ldr	r0, [r7, #0]
 8005980:	f007 fe12 	bl	800d5a8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005996 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8005996:	b590      	push	{r4, r7, lr}
 8005998:	b089      	sub	sp, #36	; 0x24
 800599a:	af04      	add	r7, sp, #16
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	4608      	mov	r0, r1
 80059a0:	4611      	mov	r1, r2
 80059a2:	461a      	mov	r2, r3
 80059a4:	4603      	mov	r3, r0
 80059a6:	70fb      	strb	r3, [r7, #3]
 80059a8:	460b      	mov	r3, r1
 80059aa:	70bb      	strb	r3, [r7, #2]
 80059ac:	4613      	mov	r3, r2
 80059ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d101      	bne.n	80059be <HAL_HCD_HC_Init+0x28>
 80059ba:	2302      	movs	r3, #2
 80059bc:	e076      	b.n	8005aac <HAL_HCD_HC_Init+0x116>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80059c6:	78fb      	ldrb	r3, [r7, #3]
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	212c      	movs	r1, #44	; 0x2c
 80059cc:	fb01 f303 	mul.w	r3, r1, r3
 80059d0:	4413      	add	r3, r2
 80059d2:	333d      	adds	r3, #61	; 0x3d
 80059d4:	2200      	movs	r2, #0
 80059d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80059d8:	78fb      	ldrb	r3, [r7, #3]
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	212c      	movs	r1, #44	; 0x2c
 80059de:	fb01 f303 	mul.w	r3, r1, r3
 80059e2:	4413      	add	r3, r2
 80059e4:	3338      	adds	r3, #56	; 0x38
 80059e6:	787a      	ldrb	r2, [r7, #1]
 80059e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80059ea:	78fb      	ldrb	r3, [r7, #3]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	212c      	movs	r1, #44	; 0x2c
 80059f0:	fb01 f303 	mul.w	r3, r1, r3
 80059f4:	4413      	add	r3, r2
 80059f6:	3340      	adds	r3, #64	; 0x40
 80059f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80059fa:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80059fc:	78fb      	ldrb	r3, [r7, #3]
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	212c      	movs	r1, #44	; 0x2c
 8005a02:	fb01 f303 	mul.w	r3, r1, r3
 8005a06:	4413      	add	r3, r2
 8005a08:	3339      	adds	r3, #57	; 0x39
 8005a0a:	78fa      	ldrb	r2, [r7, #3]
 8005a0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005a0e:	78fb      	ldrb	r3, [r7, #3]
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	212c      	movs	r1, #44	; 0x2c
 8005a14:	fb01 f303 	mul.w	r3, r1, r3
 8005a18:	4413      	add	r3, r2
 8005a1a:	333f      	adds	r3, #63	; 0x3f
 8005a1c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005a20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005a22:	78fb      	ldrb	r3, [r7, #3]
 8005a24:	78ba      	ldrb	r2, [r7, #2]
 8005a26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a2a:	b2d0      	uxtb	r0, r2
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	212c      	movs	r1, #44	; 0x2c
 8005a30:	fb01 f303 	mul.w	r3, r1, r3
 8005a34:	4413      	add	r3, r2
 8005a36:	333a      	adds	r3, #58	; 0x3a
 8005a38:	4602      	mov	r2, r0
 8005a3a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005a3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	da09      	bge.n	8005a58 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	212c      	movs	r1, #44	; 0x2c
 8005a4a:	fb01 f303 	mul.w	r3, r1, r3
 8005a4e:	4413      	add	r3, r2
 8005a50:	333b      	adds	r3, #59	; 0x3b
 8005a52:	2201      	movs	r2, #1
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	e008      	b.n	8005a6a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	212c      	movs	r1, #44	; 0x2c
 8005a5e:	fb01 f303 	mul.w	r3, r1, r3
 8005a62:	4413      	add	r3, r2
 8005a64:	333b      	adds	r3, #59	; 0x3b
 8005a66:	2200      	movs	r2, #0
 8005a68:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005a6a:	78fb      	ldrb	r3, [r7, #3]
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	212c      	movs	r1, #44	; 0x2c
 8005a70:	fb01 f303 	mul.w	r3, r1, r3
 8005a74:	4413      	add	r3, r2
 8005a76:	333c      	adds	r3, #60	; 0x3c
 8005a78:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005a7c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	787c      	ldrb	r4, [r7, #1]
 8005a84:	78ba      	ldrb	r2, [r7, #2]
 8005a86:	78f9      	ldrb	r1, [r7, #3]
 8005a88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a8a:	9302      	str	r3, [sp, #8]
 8005a8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a90:	9301      	str	r3, [sp, #4]
 8005a92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	4623      	mov	r3, r4
 8005a9a:	f007 ff01 	bl	800d8a0 <USB_HC_Init>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd90      	pop	{r4, r7, pc}

08005ab4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d101      	bne.n	8005ad2 <HAL_HCD_HC_Halt+0x1e>
 8005ace:	2302      	movs	r3, #2
 8005ad0:	e00f      	b.n	8005af2 <HAL_HCD_HC_Halt+0x3e>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	78fa      	ldrb	r2, [r7, #3]
 8005ae0:	4611      	mov	r1, r2
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f008 f93d 	bl	800dd62 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	4608      	mov	r0, r1
 8005b06:	4611      	mov	r1, r2
 8005b08:	461a      	mov	r2, r3
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	70fb      	strb	r3, [r7, #3]
 8005b0e:	460b      	mov	r3, r1
 8005b10:	70bb      	strb	r3, [r7, #2]
 8005b12:	4613      	mov	r3, r2
 8005b14:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005b16:	78fb      	ldrb	r3, [r7, #3]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	212c      	movs	r1, #44	; 0x2c
 8005b1c:	fb01 f303 	mul.w	r3, r1, r3
 8005b20:	4413      	add	r3, r2
 8005b22:	333b      	adds	r3, #59	; 0x3b
 8005b24:	78ba      	ldrb	r2, [r7, #2]
 8005b26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005b28:	78fb      	ldrb	r3, [r7, #3]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	212c      	movs	r1, #44	; 0x2c
 8005b2e:	fb01 f303 	mul.w	r3, r1, r3
 8005b32:	4413      	add	r3, r2
 8005b34:	333f      	adds	r3, #63	; 0x3f
 8005b36:	787a      	ldrb	r2, [r7, #1]
 8005b38:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005b3a:	7c3b      	ldrb	r3, [r7, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d112      	bne.n	8005b66 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	212c      	movs	r1, #44	; 0x2c
 8005b46:	fb01 f303 	mul.w	r3, r1, r3
 8005b4a:	4413      	add	r3, r2
 8005b4c:	3342      	adds	r3, #66	; 0x42
 8005b4e:	2203      	movs	r2, #3
 8005b50:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005b52:	78fb      	ldrb	r3, [r7, #3]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	212c      	movs	r1, #44	; 0x2c
 8005b58:	fb01 f303 	mul.w	r3, r1, r3
 8005b5c:	4413      	add	r3, r2
 8005b5e:	333d      	adds	r3, #61	; 0x3d
 8005b60:	7f3a      	ldrb	r2, [r7, #28]
 8005b62:	701a      	strb	r2, [r3, #0]
 8005b64:	e008      	b.n	8005b78 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005b66:	78fb      	ldrb	r3, [r7, #3]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	212c      	movs	r1, #44	; 0x2c
 8005b6c:	fb01 f303 	mul.w	r3, r1, r3
 8005b70:	4413      	add	r3, r2
 8005b72:	3342      	adds	r3, #66	; 0x42
 8005b74:	2202      	movs	r2, #2
 8005b76:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005b78:	787b      	ldrb	r3, [r7, #1]
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	f200 80c6 	bhi.w	8005d0c <HAL_HCD_HC_SubmitRequest+0x210>
 8005b80:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8005b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b86:	bf00      	nop
 8005b88:	08005b99 	.word	0x08005b99
 8005b8c:	08005cf9 	.word	0x08005cf9
 8005b90:	08005bfd 	.word	0x08005bfd
 8005b94:	08005c7b 	.word	0x08005c7b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005b98:	7c3b      	ldrb	r3, [r7, #16]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	f040 80b8 	bne.w	8005d10 <HAL_HCD_HC_SubmitRequest+0x214>
 8005ba0:	78bb      	ldrb	r3, [r7, #2]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f040 80b4 	bne.w	8005d10 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8005ba8:	8b3b      	ldrh	r3, [r7, #24]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d108      	bne.n	8005bc0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005bae:	78fb      	ldrb	r3, [r7, #3]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	212c      	movs	r1, #44	; 0x2c
 8005bb4:	fb01 f303 	mul.w	r3, r1, r3
 8005bb8:	4413      	add	r3, r2
 8005bba:	3355      	adds	r3, #85	; 0x55
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005bc0:	78fb      	ldrb	r3, [r7, #3]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	212c      	movs	r1, #44	; 0x2c
 8005bc6:	fb01 f303 	mul.w	r3, r1, r3
 8005bca:	4413      	add	r3, r2
 8005bcc:	3355      	adds	r3, #85	; 0x55
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d109      	bne.n	8005be8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005bd4:	78fb      	ldrb	r3, [r7, #3]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	212c      	movs	r1, #44	; 0x2c
 8005bda:	fb01 f303 	mul.w	r3, r1, r3
 8005bde:	4413      	add	r3, r2
 8005be0:	3342      	adds	r3, #66	; 0x42
 8005be2:	2200      	movs	r2, #0
 8005be4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005be6:	e093      	b.n	8005d10 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	212c      	movs	r1, #44	; 0x2c
 8005bee:	fb01 f303 	mul.w	r3, r1, r3
 8005bf2:	4413      	add	r3, r2
 8005bf4:	3342      	adds	r3, #66	; 0x42
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	701a      	strb	r2, [r3, #0]
      break;
 8005bfa:	e089      	b.n	8005d10 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005bfc:	78bb      	ldrb	r3, [r7, #2]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d11d      	bne.n	8005c3e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005c02:	78fb      	ldrb	r3, [r7, #3]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	212c      	movs	r1, #44	; 0x2c
 8005c08:	fb01 f303 	mul.w	r3, r1, r3
 8005c0c:	4413      	add	r3, r2
 8005c0e:	3355      	adds	r3, #85	; 0x55
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005c16:	78fb      	ldrb	r3, [r7, #3]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	212c      	movs	r1, #44	; 0x2c
 8005c1c:	fb01 f303 	mul.w	r3, r1, r3
 8005c20:	4413      	add	r3, r2
 8005c22:	3342      	adds	r3, #66	; 0x42
 8005c24:	2200      	movs	r2, #0
 8005c26:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005c28:	e073      	b.n	8005d12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005c2a:	78fb      	ldrb	r3, [r7, #3]
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	212c      	movs	r1, #44	; 0x2c
 8005c30:	fb01 f303 	mul.w	r3, r1, r3
 8005c34:	4413      	add	r3, r2
 8005c36:	3342      	adds	r3, #66	; 0x42
 8005c38:	2202      	movs	r2, #2
 8005c3a:	701a      	strb	r2, [r3, #0]
      break;
 8005c3c:	e069      	b.n	8005d12 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005c3e:	78fb      	ldrb	r3, [r7, #3]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	212c      	movs	r1, #44	; 0x2c
 8005c44:	fb01 f303 	mul.w	r3, r1, r3
 8005c48:	4413      	add	r3, r2
 8005c4a:	3354      	adds	r3, #84	; 0x54
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d109      	bne.n	8005c66 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005c52:	78fb      	ldrb	r3, [r7, #3]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	212c      	movs	r1, #44	; 0x2c
 8005c58:	fb01 f303 	mul.w	r3, r1, r3
 8005c5c:	4413      	add	r3, r2
 8005c5e:	3342      	adds	r3, #66	; 0x42
 8005c60:	2200      	movs	r2, #0
 8005c62:	701a      	strb	r2, [r3, #0]
      break;
 8005c64:	e055      	b.n	8005d12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005c66:	78fb      	ldrb	r3, [r7, #3]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	212c      	movs	r1, #44	; 0x2c
 8005c6c:	fb01 f303 	mul.w	r3, r1, r3
 8005c70:	4413      	add	r3, r2
 8005c72:	3342      	adds	r3, #66	; 0x42
 8005c74:	2202      	movs	r2, #2
 8005c76:	701a      	strb	r2, [r3, #0]
      break;
 8005c78:	e04b      	b.n	8005d12 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005c7a:	78bb      	ldrb	r3, [r7, #2]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d11d      	bne.n	8005cbc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	212c      	movs	r1, #44	; 0x2c
 8005c86:	fb01 f303 	mul.w	r3, r1, r3
 8005c8a:	4413      	add	r3, r2
 8005c8c:	3355      	adds	r3, #85	; 0x55
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d109      	bne.n	8005ca8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	212c      	movs	r1, #44	; 0x2c
 8005c9a:	fb01 f303 	mul.w	r3, r1, r3
 8005c9e:	4413      	add	r3, r2
 8005ca0:	3342      	adds	r3, #66	; 0x42
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005ca6:	e034      	b.n	8005d12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005ca8:	78fb      	ldrb	r3, [r7, #3]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	212c      	movs	r1, #44	; 0x2c
 8005cae:	fb01 f303 	mul.w	r3, r1, r3
 8005cb2:	4413      	add	r3, r2
 8005cb4:	3342      	adds	r3, #66	; 0x42
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	701a      	strb	r2, [r3, #0]
      break;
 8005cba:	e02a      	b.n	8005d12 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	212c      	movs	r1, #44	; 0x2c
 8005cc2:	fb01 f303 	mul.w	r3, r1, r3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	3354      	adds	r3, #84	; 0x54
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d109      	bne.n	8005ce4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005cd0:	78fb      	ldrb	r3, [r7, #3]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	212c      	movs	r1, #44	; 0x2c
 8005cd6:	fb01 f303 	mul.w	r3, r1, r3
 8005cda:	4413      	add	r3, r2
 8005cdc:	3342      	adds	r3, #66	; 0x42
 8005cde:	2200      	movs	r2, #0
 8005ce0:	701a      	strb	r2, [r3, #0]
      break;
 8005ce2:	e016      	b.n	8005d12 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	212c      	movs	r1, #44	; 0x2c
 8005cea:	fb01 f303 	mul.w	r3, r1, r3
 8005cee:	4413      	add	r3, r2
 8005cf0:	3342      	adds	r3, #66	; 0x42
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	701a      	strb	r2, [r3, #0]
      break;
 8005cf6:	e00c      	b.n	8005d12 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	212c      	movs	r1, #44	; 0x2c
 8005cfe:	fb01 f303 	mul.w	r3, r1, r3
 8005d02:	4413      	add	r3, r2
 8005d04:	3342      	adds	r3, #66	; 0x42
 8005d06:	2200      	movs	r2, #0
 8005d08:	701a      	strb	r2, [r3, #0]
      break;
 8005d0a:	e002      	b.n	8005d12 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8005d0c:	bf00      	nop
 8005d0e:	e000      	b.n	8005d12 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8005d10:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005d12:	78fb      	ldrb	r3, [r7, #3]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	212c      	movs	r1, #44	; 0x2c
 8005d18:	fb01 f303 	mul.w	r3, r1, r3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	3344      	adds	r3, #68	; 0x44
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	8b3a      	ldrh	r2, [r7, #24]
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	202c      	movs	r0, #44	; 0x2c
 8005d2c:	fb00 f303 	mul.w	r3, r0, r3
 8005d30:	440b      	add	r3, r1
 8005d32:	334c      	adds	r3, #76	; 0x4c
 8005d34:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005d36:	78fb      	ldrb	r3, [r7, #3]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	212c      	movs	r1, #44	; 0x2c
 8005d3c:	fb01 f303 	mul.w	r3, r1, r3
 8005d40:	4413      	add	r3, r2
 8005d42:	3360      	adds	r3, #96	; 0x60
 8005d44:	2200      	movs	r2, #0
 8005d46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	212c      	movs	r1, #44	; 0x2c
 8005d4e:	fb01 f303 	mul.w	r3, r1, r3
 8005d52:	4413      	add	r3, r2
 8005d54:	3350      	adds	r3, #80	; 0x50
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005d5a:	78fb      	ldrb	r3, [r7, #3]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	212c      	movs	r1, #44	; 0x2c
 8005d60:	fb01 f303 	mul.w	r3, r1, r3
 8005d64:	4413      	add	r3, r2
 8005d66:	3339      	adds	r3, #57	; 0x39
 8005d68:	78fa      	ldrb	r2, [r7, #3]
 8005d6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005d6c:	78fb      	ldrb	r3, [r7, #3]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	212c      	movs	r1, #44	; 0x2c
 8005d72:	fb01 f303 	mul.w	r3, r1, r3
 8005d76:	4413      	add	r3, r2
 8005d78:	3361      	adds	r3, #97	; 0x61
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6818      	ldr	r0, [r3, #0]
 8005d82:	78fb      	ldrb	r3, [r7, #3]
 8005d84:	222c      	movs	r2, #44	; 0x2c
 8005d86:	fb02 f303 	mul.w	r3, r2, r3
 8005d8a:	3338      	adds	r3, #56	; 0x38
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	18d1      	adds	r1, r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	461a      	mov	r2, r3
 8005d98:	f007 fe90 	bl	800dabc <USB_HC_StartXfer>
 8005d9c:	4603      	mov	r3, r0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop

08005da8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f007 fbaf 	bl	800d522 <USB_GetMode>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	f040 80ef 	bne.w	8005faa <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f007 fb93 	bl	800d4fc <USB_ReadInterrupts>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 80e5 	beq.w	8005fa8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f007 fb8a 	bl	800d4fc <USB_ReadInterrupts>
 8005de8:	4603      	mov	r3, r0
 8005dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005df2:	d104      	bne.n	8005dfe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005dfc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f007 fb7a 	bl	800d4fc <USB_ReadInterrupts>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e12:	d104      	bne.n	8005e1e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f007 fb6a 	bl	800d4fc <USB_ReadInterrupts>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e32:	d104      	bne.n	8005e3e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005e3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f007 fb5a 	bl	800d4fc <USB_ReadInterrupts>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d103      	bne.n	8005e5a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2202      	movs	r2, #2
 8005e58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f007 fb4c 	bl	800d4fc <USB_ReadInterrupts>
 8005e64:	4603      	mov	r3, r0
 8005e66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e6e:	d115      	bne.n	8005e9c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005e78:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d108      	bne.n	8005e9c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f00a fa5e 	bl	801034c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2101      	movs	r1, #1
 8005e96:	4618      	mov	r0, r3
 8005e98:	f007 fc3c 	bl	800d714 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f007 fb2b 	bl	800d4fc <USB_ReadInterrupts>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005eb0:	d102      	bne.n	8005eb8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f001 f9ff 	bl	80072b6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f007 fb1d 	bl	800d4fc <USB_ReadInterrupts>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	f003 0308 	and.w	r3, r3, #8
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d106      	bne.n	8005eda <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f00a fa21 	bl	8010314 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2208      	movs	r2, #8
 8005ed8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f007 fb0c 	bl	800d4fc <USB_ReadInterrupts>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	f003 0310 	and.w	r3, r3, #16
 8005eea:	2b10      	cmp	r3, #16
 8005eec:	d101      	bne.n	8005ef2 <HAL_HCD_IRQHandler+0x14a>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <HAL_HCD_IRQHandler+0x14c>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d012      	beq.n	8005f1e <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699a      	ldr	r2, [r3, #24]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0210 	bic.w	r2, r2, #16
 8005f06:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f001 f902 	bl	8007112 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	699a      	ldr	r2, [r3, #24]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f042 0210 	orr.w	r2, r2, #16
 8005f1c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f007 faea 	bl	800d4fc <USB_ReadInterrupts>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f32:	d13a      	bne.n	8005faa <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f007 ff01 	bl	800dd40 <USB_HC_ReadInterrupt>
 8005f3e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005f40:	2300      	movs	r3, #0
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	e025      	b.n	8005f92 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f003 030f 	and.w	r3, r3, #15
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d018      	beq.n	8005f8c <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f70:	d106      	bne.n	8005f80 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	4619      	mov	r1, r3
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f8ab 	bl	80060d4 <HCD_HC_IN_IRQHandler>
 8005f7e:	e005      	b.n	8005f8c <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	4619      	mov	r1, r3
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fcc6 	bl	8006918 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d3d4      	bcc.n	8005f46 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005fa4:	615a      	str	r2, [r3, #20]
 8005fa6:	e000      	b.n	8005faa <HAL_HCD_IRQHandler+0x202>
      return;
 8005fa8:	bf00      	nop
    }
  }
}
 8005faa:	3718      	adds	r7, #24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_HCD_Start+0x16>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e013      	b.n	8005fee <HAL_HCD_Start+0x3e>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f007 f968 	bl	800d2a8 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2101      	movs	r1, #1
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f007 fbfc 	bl	800d7dc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b082      	sub	sp, #8
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_HCD_Stop+0x16>
 8006008:	2302      	movs	r3, #2
 800600a:	e00d      	b.n	8006028 <HAL_HCD_Stop+0x32>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4618      	mov	r0, r3
 800601a:	f007 fffb 	bl	800e014 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4618      	mov	r0, r3
 800603e:	f007 fba3 	bl	800d788 <USB_ResetPort>
 8006042:	4603      	mov	r3, r0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	460b      	mov	r3, r1
 8006056:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	212c      	movs	r1, #44	; 0x2c
 800605e:	fb01 f303 	mul.w	r3, r1, r3
 8006062:	4413      	add	r3, r2
 8006064:	3360      	adds	r3, #96	; 0x60
 8006066:	781b      	ldrb	r3, [r3, #0]
}
 8006068:	4618      	mov	r0, r3
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	460b      	mov	r3, r1
 800607e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006080:	78fb      	ldrb	r3, [r7, #3]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	212c      	movs	r1, #44	; 0x2c
 8006086:	fb01 f303 	mul.w	r3, r1, r3
 800608a:	4413      	add	r3, r2
 800608c:	3350      	adds	r3, #80	; 0x50
 800608e:	681b      	ldr	r3, [r3, #0]
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f007 fbe7 	bl	800d87c <USB_GetCurrentFrame>
 80060ae:	4603      	mov	r3, r0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f007 fbc2 	bl	800d84e <USB_GetHostSpeed>
 80060ca:	4603      	mov	r3, r0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	460b      	mov	r3, r1
 80060de:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80060ea:	78fb      	ldrb	r3, [r7, #3]
 80060ec:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b04      	cmp	r3, #4
 8006102:	d119      	bne.n	8006138 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	4413      	add	r3, r2
 800610c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006110:	461a      	mov	r2, r3
 8006112:	2304      	movs	r3, #4
 8006114:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	4413      	add	r3, r2
 800611e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	0151      	lsls	r1, r2, #5
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	440a      	add	r2, r1
 800612c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006130:	f043 0302 	orr.w	r3, r3, #2
 8006134:	60d3      	str	r3, [r2, #12]
 8006136:	e101      	b.n	800633c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	4413      	add	r3, r2
 8006140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800614e:	d12b      	bne.n	80061a8 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	4413      	add	r3, r2
 8006158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800615c:	461a      	mov	r2, r3
 800615e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006162:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	212c      	movs	r1, #44	; 0x2c
 800616a:	fb01 f303 	mul.w	r3, r1, r3
 800616e:	4413      	add	r3, r2
 8006170:	3361      	adds	r3, #97	; 0x61
 8006172:	2207      	movs	r2, #7
 8006174:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	4413      	add	r3, r2
 800617e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	0151      	lsls	r1, r2, #5
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	440a      	add	r2, r1
 800618c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006190:	f043 0302 	orr.w	r3, r3, #2
 8006194:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	b2d2      	uxtb	r2, r2
 800619e:	4611      	mov	r1, r2
 80061a0:	4618      	mov	r0, r3
 80061a2:	f007 fdde 	bl	800dd62 <USB_HC_Halt>
 80061a6:	e0c9      	b.n	800633c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b20      	cmp	r3, #32
 80061bc:	d109      	bne.n	80061d2 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ca:	461a      	mov	r2, r3
 80061cc:	2320      	movs	r3, #32
 80061ce:	6093      	str	r3, [r2, #8]
 80061d0:	e0b4      	b.n	800633c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f003 0308 	and.w	r3, r3, #8
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d133      	bne.n	8006250 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	0151      	lsls	r1, r2, #5
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	440a      	add	r2, r1
 80061fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006202:	f043 0302 	orr.w	r3, r3, #2
 8006206:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	212c      	movs	r1, #44	; 0x2c
 800620e:	fb01 f303 	mul.w	r3, r1, r3
 8006212:	4413      	add	r3, r2
 8006214:	3361      	adds	r3, #97	; 0x61
 8006216:	2205      	movs	r2, #5
 8006218:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	4413      	add	r3, r2
 8006222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006226:	461a      	mov	r2, r3
 8006228:	2310      	movs	r3, #16
 800622a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	4413      	add	r3, r2
 8006234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006238:	461a      	mov	r2, r3
 800623a:	2308      	movs	r3, #8
 800623c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	b2d2      	uxtb	r2, r2
 8006246:	4611      	mov	r1, r2
 8006248:	4618      	mov	r0, r3
 800624a:	f007 fd8a 	bl	800dd62 <USB_HC_Halt>
 800624e:	e075      	b.n	800633c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	4413      	add	r3, r2
 8006258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006266:	d134      	bne.n	80062d2 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	4413      	add	r3, r2
 8006270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	0151      	lsls	r1, r2, #5
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	440a      	add	r2, r1
 800627e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006282:	f043 0302 	orr.w	r3, r3, #2
 8006286:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	212c      	movs	r1, #44	; 0x2c
 800628e:	fb01 f303 	mul.w	r3, r1, r3
 8006292:	4413      	add	r3, r2
 8006294:	3361      	adds	r3, #97	; 0x61
 8006296:	2208      	movs	r2, #8
 8006298:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a6:	461a      	mov	r2, r3
 80062a8:	2310      	movs	r3, #16
 80062aa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b8:	461a      	mov	r2, r3
 80062ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062be:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	4611      	mov	r1, r2
 80062ca:	4618      	mov	r0, r3
 80062cc:	f007 fd49 	bl	800dd62 <USB_HC_Halt>
 80062d0:	e034      	b.n	800633c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e4:	2b80      	cmp	r3, #128	; 0x80
 80062e6:	d129      	bne.n	800633c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	0151      	lsls	r1, r2, #5
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	440a      	add	r2, r1
 80062fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006302:	f043 0302 	orr.w	r3, r3, #2
 8006306:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	212c      	movs	r1, #44	; 0x2c
 800630e:	fb01 f303 	mul.w	r3, r1, r3
 8006312:	4413      	add	r3, r2
 8006314:	3361      	adds	r3, #97	; 0x61
 8006316:	2206      	movs	r2, #6
 8006318:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	4611      	mov	r1, r2
 8006324:	4618      	mov	r0, r3
 8006326:	f007 fd1c 	bl	800dd62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	4413      	add	r3, r2
 8006332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006336:	461a      	mov	r2, r3
 8006338:	2380      	movs	r3, #128	; 0x80
 800633a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	4413      	add	r3, r2
 8006344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800634e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006352:	d122      	bne.n	800639a <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	4413      	add	r3, r2
 800635c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	0151      	lsls	r1, r2, #5
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	440a      	add	r2, r1
 800636a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800636e:	f043 0302 	orr.w	r3, r3, #2
 8006372:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	b2d2      	uxtb	r2, r2
 800637c:	4611      	mov	r1, r2
 800637e:	4618      	mov	r0, r3
 8006380:	f007 fcef 	bl	800dd62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	4413      	add	r3, r2
 800638c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006390:	461a      	mov	r2, r3
 8006392:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006396:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8006398:	e2ba      	b.n	8006910 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	f040 811b 	bne.w	80065e8 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d019      	beq.n	80063ee <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	212c      	movs	r1, #44	; 0x2c
 80063c0:	fb01 f303 	mul.w	r3, r1, r3
 80063c4:	4413      	add	r3, r2
 80063c6:	3348      	adds	r3, #72	; 0x48
 80063c8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	0159      	lsls	r1, r3, #5
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	440b      	add	r3, r1
 80063d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80063dc:	1ad2      	subs	r2, r2, r3
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	202c      	movs	r0, #44	; 0x2c
 80063e4:	fb00 f303 	mul.w	r3, r0, r3
 80063e8:	440b      	add	r3, r1
 80063ea:	3350      	adds	r3, #80	; 0x50
 80063ec:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	212c      	movs	r1, #44	; 0x2c
 80063f4:	fb01 f303 	mul.w	r3, r1, r3
 80063f8:	4413      	add	r3, r2
 80063fa:	3361      	adds	r3, #97	; 0x61
 80063fc:	2201      	movs	r2, #1
 80063fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	212c      	movs	r1, #44	; 0x2c
 8006406:	fb01 f303 	mul.w	r3, r1, r3
 800640a:	4413      	add	r3, r2
 800640c:	335c      	adds	r3, #92	; 0x5c
 800640e:	2200      	movs	r2, #0
 8006410:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	4413      	add	r3, r2
 800641a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641e:	461a      	mov	r2, r3
 8006420:	2301      	movs	r3, #1
 8006422:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	212c      	movs	r1, #44	; 0x2c
 800642a:	fb01 f303 	mul.w	r3, r1, r3
 800642e:	4413      	add	r3, r2
 8006430:	333f      	adds	r3, #63	; 0x3f
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d009      	beq.n	800644c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	212c      	movs	r1, #44	; 0x2c
 800643e:	fb01 f303 	mul.w	r3, r1, r3
 8006442:	4413      	add	r3, r2
 8006444:	333f      	adds	r3, #63	; 0x3f
 8006446:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006448:	2b02      	cmp	r3, #2
 800644a:	d121      	bne.n	8006490 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	4413      	add	r3, r2
 8006454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	0151      	lsls	r1, r2, #5
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	440a      	add	r2, r1
 8006462:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006466:	f043 0302 	orr.w	r3, r3, #2
 800646a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	4611      	mov	r1, r2
 8006476:	4618      	mov	r0, r3
 8006478:	f007 fc73 	bl	800dd62 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	4413      	add	r3, r2
 8006484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006488:	461a      	mov	r2, r3
 800648a:	2310      	movs	r3, #16
 800648c:	6093      	str	r3, [r2, #8]
 800648e:	e066      	b.n	800655e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	212c      	movs	r1, #44	; 0x2c
 8006496:	fb01 f303 	mul.w	r3, r1, r3
 800649a:	4413      	add	r3, r2
 800649c:	333f      	adds	r3, #63	; 0x3f
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b03      	cmp	r3, #3
 80064a2:	d127      	bne.n	80064f4 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	0151      	lsls	r1, r2, #5
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	440a      	add	r2, r1
 80064ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064c2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	212c      	movs	r1, #44	; 0x2c
 80064ca:	fb01 f303 	mul.w	r3, r1, r3
 80064ce:	4413      	add	r3, r2
 80064d0:	3360      	adds	r3, #96	; 0x60
 80064d2:	2201      	movs	r2, #1
 80064d4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	b2d9      	uxtb	r1, r3
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	202c      	movs	r0, #44	; 0x2c
 80064e0:	fb00 f303 	mul.w	r3, r0, r3
 80064e4:	4413      	add	r3, r2
 80064e6:	3360      	adds	r3, #96	; 0x60
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	461a      	mov	r2, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f009 ff3b 	bl	8010368 <HAL_HCD_HC_NotifyURBChange_Callback>
 80064f2:	e034      	b.n	800655e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	212c      	movs	r1, #44	; 0x2c
 80064fa:	fb01 f303 	mul.w	r3, r1, r3
 80064fe:	4413      	add	r3, r2
 8006500:	333f      	adds	r3, #63	; 0x3f
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d12a      	bne.n	800655e <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	212c      	movs	r1, #44	; 0x2c
 800650e:	fb01 f303 	mul.w	r3, r1, r3
 8006512:	4413      	add	r3, r2
 8006514:	3360      	adds	r3, #96	; 0x60
 8006516:	2201      	movs	r2, #1
 8006518:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	212c      	movs	r1, #44	; 0x2c
 8006520:	fb01 f303 	mul.w	r3, r1, r3
 8006524:	4413      	add	r3, r2
 8006526:	3354      	adds	r3, #84	; 0x54
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	f083 0301 	eor.w	r3, r3, #1
 800652e:	b2d8      	uxtb	r0, r3
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	212c      	movs	r1, #44	; 0x2c
 8006536:	fb01 f303 	mul.w	r3, r1, r3
 800653a:	4413      	add	r3, r2
 800653c:	3354      	adds	r3, #84	; 0x54
 800653e:	4602      	mov	r2, r0
 8006540:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	b2d9      	uxtb	r1, r3
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	202c      	movs	r0, #44	; 0x2c
 800654c:	fb00 f303 	mul.w	r3, r0, r3
 8006550:	4413      	add	r3, r2
 8006552:	3360      	adds	r3, #96	; 0x60
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	461a      	mov	r2, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f009 ff05 	bl	8010368 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d12b      	bne.n	80065be <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	212c      	movs	r1, #44	; 0x2c
 800656c:	fb01 f303 	mul.w	r3, r1, r3
 8006570:	4413      	add	r3, r2
 8006572:	3348      	adds	r3, #72	; 0x48
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	202c      	movs	r0, #44	; 0x2c
 800657c:	fb00 f202 	mul.w	r2, r0, r2
 8006580:	440a      	add	r2, r1
 8006582:	3240      	adds	r2, #64	; 0x40
 8006584:	8812      	ldrh	r2, [r2, #0]
 8006586:	fbb3 f3f2 	udiv	r3, r3, r2
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 81be 	beq.w	8006910 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	212c      	movs	r1, #44	; 0x2c
 800659a:	fb01 f303 	mul.w	r3, r1, r3
 800659e:	4413      	add	r3, r2
 80065a0:	3354      	adds	r3, #84	; 0x54
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	f083 0301 	eor.w	r3, r3, #1
 80065a8:	b2d8      	uxtb	r0, r3
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	212c      	movs	r1, #44	; 0x2c
 80065b0:	fb01 f303 	mul.w	r3, r1, r3
 80065b4:	4413      	add	r3, r2
 80065b6:	3354      	adds	r3, #84	; 0x54
 80065b8:	4602      	mov	r2, r0
 80065ba:	701a      	strb	r2, [r3, #0]
}
 80065bc:	e1a8      	b.n	8006910 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	212c      	movs	r1, #44	; 0x2c
 80065c4:	fb01 f303 	mul.w	r3, r1, r3
 80065c8:	4413      	add	r3, r2
 80065ca:	3354      	adds	r3, #84	; 0x54
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	f083 0301 	eor.w	r3, r3, #1
 80065d2:	b2d8      	uxtb	r0, r3
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	212c      	movs	r1, #44	; 0x2c
 80065da:	fb01 f303 	mul.w	r3, r1, r3
 80065de:	4413      	add	r3, r2
 80065e0:	3354      	adds	r3, #84	; 0x54
 80065e2:	4602      	mov	r2, r0
 80065e4:	701a      	strb	r2, [r3, #0]
}
 80065e6:	e193      	b.n	8006910 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	f040 8106 	bne.w	800680c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	4413      	add	r3, r2
 8006608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	0151      	lsls	r1, r2, #5
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	440a      	add	r2, r1
 8006616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800661a:	f023 0302 	bic.w	r3, r3, #2
 800661e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	212c      	movs	r1, #44	; 0x2c
 8006626:	fb01 f303 	mul.w	r3, r1, r3
 800662a:	4413      	add	r3, r2
 800662c:	3361      	adds	r3, #97	; 0x61
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d109      	bne.n	8006648 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	212c      	movs	r1, #44	; 0x2c
 800663a:	fb01 f303 	mul.w	r3, r1, r3
 800663e:	4413      	add	r3, r2
 8006640:	3360      	adds	r3, #96	; 0x60
 8006642:	2201      	movs	r2, #1
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	e0c9      	b.n	80067dc <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	212c      	movs	r1, #44	; 0x2c
 800664e:	fb01 f303 	mul.w	r3, r1, r3
 8006652:	4413      	add	r3, r2
 8006654:	3361      	adds	r3, #97	; 0x61
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	2b05      	cmp	r3, #5
 800665a:	d109      	bne.n	8006670 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	212c      	movs	r1, #44	; 0x2c
 8006662:	fb01 f303 	mul.w	r3, r1, r3
 8006666:	4413      	add	r3, r2
 8006668:	3360      	adds	r3, #96	; 0x60
 800666a:	2205      	movs	r2, #5
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	e0b5      	b.n	80067dc <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	212c      	movs	r1, #44	; 0x2c
 8006676:	fb01 f303 	mul.w	r3, r1, r3
 800667a:	4413      	add	r3, r2
 800667c:	3361      	adds	r3, #97	; 0x61
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	2b06      	cmp	r3, #6
 8006682:	d009      	beq.n	8006698 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	212c      	movs	r1, #44	; 0x2c
 800668a:	fb01 f303 	mul.w	r3, r1, r3
 800668e:	4413      	add	r3, r2
 8006690:	3361      	adds	r3, #97	; 0x61
 8006692:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006694:	2b08      	cmp	r3, #8
 8006696:	d150      	bne.n	800673a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	212c      	movs	r1, #44	; 0x2c
 800669e:	fb01 f303 	mul.w	r3, r1, r3
 80066a2:	4413      	add	r3, r2
 80066a4:	335c      	adds	r3, #92	; 0x5c
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	6879      	ldr	r1, [r7, #4]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	202c      	movs	r0, #44	; 0x2c
 80066b0:	fb00 f303 	mul.w	r3, r0, r3
 80066b4:	440b      	add	r3, r1
 80066b6:	335c      	adds	r3, #92	; 0x5c
 80066b8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	212c      	movs	r1, #44	; 0x2c
 80066c0:	fb01 f303 	mul.w	r3, r1, r3
 80066c4:	4413      	add	r3, r2
 80066c6:	335c      	adds	r3, #92	; 0x5c
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d912      	bls.n	80066f4 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	212c      	movs	r1, #44	; 0x2c
 80066d4:	fb01 f303 	mul.w	r3, r1, r3
 80066d8:	4413      	add	r3, r2
 80066da:	335c      	adds	r3, #92	; 0x5c
 80066dc:	2200      	movs	r2, #0
 80066de:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	212c      	movs	r1, #44	; 0x2c
 80066e6:	fb01 f303 	mul.w	r3, r1, r3
 80066ea:	4413      	add	r3, r2
 80066ec:	3360      	adds	r3, #96	; 0x60
 80066ee:	2204      	movs	r2, #4
 80066f0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80066f2:	e073      	b.n	80067dc <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	212c      	movs	r1, #44	; 0x2c
 80066fa:	fb01 f303 	mul.w	r3, r1, r3
 80066fe:	4413      	add	r3, r2
 8006700:	3360      	adds	r3, #96	; 0x60
 8006702:	2202      	movs	r2, #2
 8006704:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	4413      	add	r3, r2
 800670e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800671c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006724:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	4413      	add	r3, r2
 800672e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006732:	461a      	mov	r2, r3
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006738:	e050      	b.n	80067dc <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	212c      	movs	r1, #44	; 0x2c
 8006740:	fb01 f303 	mul.w	r3, r1, r3
 8006744:	4413      	add	r3, r2
 8006746:	3361      	adds	r3, #97	; 0x61
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b03      	cmp	r3, #3
 800674c:	d122      	bne.n	8006794 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	212c      	movs	r1, #44	; 0x2c
 8006754:	fb01 f303 	mul.w	r3, r1, r3
 8006758:	4413      	add	r3, r2
 800675a:	3360      	adds	r3, #96	; 0x60
 800675c:	2202      	movs	r2, #2
 800675e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	4413      	add	r3, r2
 8006768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006776:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800677e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	4413      	add	r3, r2
 8006788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800678c:	461a      	mov	r2, r3
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	e023      	b.n	80067dc <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	212c      	movs	r1, #44	; 0x2c
 800679a:	fb01 f303 	mul.w	r3, r1, r3
 800679e:	4413      	add	r3, r2
 80067a0:	3361      	adds	r3, #97	; 0x61
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b07      	cmp	r3, #7
 80067a6:	d119      	bne.n	80067dc <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	212c      	movs	r1, #44	; 0x2c
 80067ae:	fb01 f303 	mul.w	r3, r1, r3
 80067b2:	4413      	add	r3, r2
 80067b4:	335c      	adds	r3, #92	; 0x5c
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	202c      	movs	r0, #44	; 0x2c
 80067c0:	fb00 f303 	mul.w	r3, r0, r3
 80067c4:	440b      	add	r3, r1
 80067c6:	335c      	adds	r3, #92	; 0x5c
 80067c8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	212c      	movs	r1, #44	; 0x2c
 80067d0:	fb01 f303 	mul.w	r3, r1, r3
 80067d4:	4413      	add	r3, r2
 80067d6:	3360      	adds	r3, #96	; 0x60
 80067d8:	2204      	movs	r2, #4
 80067da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e8:	461a      	mov	r2, r3
 80067ea:	2302      	movs	r3, #2
 80067ec:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	b2d9      	uxtb	r1, r3
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	202c      	movs	r0, #44	; 0x2c
 80067f8:	fb00 f303 	mul.w	r3, r0, r3
 80067fc:	4413      	add	r3, r2
 80067fe:	3360      	adds	r3, #96	; 0x60
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f009 fdaf 	bl	8010368 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800680a:	e081      	b.n	8006910 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	4413      	add	r3, r2
 8006814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 0310 	and.w	r3, r3, #16
 800681e:	2b10      	cmp	r3, #16
 8006820:	d176      	bne.n	8006910 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	212c      	movs	r1, #44	; 0x2c
 8006828:	fb01 f303 	mul.w	r3, r1, r3
 800682c:	4413      	add	r3, r2
 800682e:	333f      	adds	r3, #63	; 0x3f
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	2b03      	cmp	r3, #3
 8006834:	d121      	bne.n	800687a <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	212c      	movs	r1, #44	; 0x2c
 800683c:	fb01 f303 	mul.w	r3, r1, r3
 8006840:	4413      	add	r3, r2
 8006842:	335c      	adds	r3, #92	; 0x5c
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	4413      	add	r3, r2
 8006850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	0151      	lsls	r1, r2, #5
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	440a      	add	r2, r1
 800685e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006862:	f043 0302 	orr.w	r3, r3, #2
 8006866:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	b2d2      	uxtb	r2, r2
 8006870:	4611      	mov	r1, r2
 8006872:	4618      	mov	r0, r3
 8006874:	f007 fa75 	bl	800dd62 <USB_HC_Halt>
 8006878:	e041      	b.n	80068fe <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	212c      	movs	r1, #44	; 0x2c
 8006880:	fb01 f303 	mul.w	r3, r1, r3
 8006884:	4413      	add	r3, r2
 8006886:	333f      	adds	r3, #63	; 0x3f
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d009      	beq.n	80068a2 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	212c      	movs	r1, #44	; 0x2c
 8006894:	fb01 f303 	mul.w	r3, r1, r3
 8006898:	4413      	add	r3, r2
 800689a:	333f      	adds	r3, #63	; 0x3f
 800689c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d12d      	bne.n	80068fe <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	212c      	movs	r1, #44	; 0x2c
 80068a8:	fb01 f303 	mul.w	r3, r1, r3
 80068ac:	4413      	add	r3, r2
 80068ae:	335c      	adds	r3, #92	; 0x5c
 80068b0:	2200      	movs	r2, #0
 80068b2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d120      	bne.n	80068fe <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	212c      	movs	r1, #44	; 0x2c
 80068c2:	fb01 f303 	mul.w	r3, r1, r3
 80068c6:	4413      	add	r3, r2
 80068c8:	3361      	adds	r3, #97	; 0x61
 80068ca:	2203      	movs	r2, #3
 80068cc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	0151      	lsls	r1, r2, #5
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	440a      	add	r2, r1
 80068e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068e8:	f043 0302 	orr.w	r3, r3, #2
 80068ec:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	b2d2      	uxtb	r2, r2
 80068f6:	4611      	mov	r1, r2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f007 fa32 	bl	800dd62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	4413      	add	r3, r2
 8006906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690a:	461a      	mov	r2, r3
 800690c:	2310      	movs	r3, #16
 800690e:	6093      	str	r3, [r2, #8]
}
 8006910:	bf00      	nop
 8006912:	3718      	adds	r7, #24
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	460b      	mov	r3, r1
 8006922:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800692e:	78fb      	ldrb	r3, [r7, #3]
 8006930:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	4413      	add	r3, r2
 800693a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f003 0304 	and.w	r3, r3, #4
 8006944:	2b04      	cmp	r3, #4
 8006946:	d119      	bne.n	800697c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	4413      	add	r3, r2
 8006950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006954:	461a      	mov	r2, r3
 8006956:	2304      	movs	r3, #4
 8006958:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	4413      	add	r3, r2
 8006962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	0151      	lsls	r1, r2, #5
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	440a      	add	r2, r1
 8006970:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006974:	f043 0302 	orr.w	r3, r3, #2
 8006978:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800697a:	e3c6      	b.n	800710a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	4413      	add	r3, r2
 8006984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f003 0320 	and.w	r3, r3, #32
 800698e:	2b20      	cmp	r3, #32
 8006990:	d13e      	bne.n	8006a10 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	4413      	add	r3, r2
 800699a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800699e:	461a      	mov	r2, r3
 80069a0:	2320      	movs	r3, #32
 80069a2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	212c      	movs	r1, #44	; 0x2c
 80069aa:	fb01 f303 	mul.w	r3, r1, r3
 80069ae:	4413      	add	r3, r2
 80069b0:	333d      	adds	r3, #61	; 0x3d
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	f040 83a8 	bne.w	800710a <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	212c      	movs	r1, #44	; 0x2c
 80069c0:	fb01 f303 	mul.w	r3, r1, r3
 80069c4:	4413      	add	r3, r2
 80069c6:	333d      	adds	r3, #61	; 0x3d
 80069c8:	2200      	movs	r2, #0
 80069ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	212c      	movs	r1, #44	; 0x2c
 80069d2:	fb01 f303 	mul.w	r3, r1, r3
 80069d6:	4413      	add	r3, r2
 80069d8:	3360      	adds	r3, #96	; 0x60
 80069da:	2202      	movs	r2, #2
 80069dc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	0151      	lsls	r1, r2, #5
 80069f0:	69ba      	ldr	r2, [r7, #24]
 80069f2:	440a      	add	r2, r1
 80069f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069f8:	f043 0302 	orr.w	r3, r3, #2
 80069fc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	4611      	mov	r1, r2
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f007 f9aa 	bl	800dd62 <USB_HC_Halt>
}
 8006a0e:	e37c      	b.n	800710a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a26:	d122      	bne.n	8006a6e <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	0151      	lsls	r1, r2, #5
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	440a      	add	r2, r1
 8006a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a42:	f043 0302 	orr.w	r3, r3, #2
 8006a46:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	b2d2      	uxtb	r2, r2
 8006a50:	4611      	mov	r1, r2
 8006a52:	4618      	mov	r0, r3
 8006a54:	f007 f985 	bl	800dd62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a64:	461a      	mov	r2, r3
 8006a66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a6a:	6093      	str	r3, [r2, #8]
}
 8006a6c:	e34d      	b.n	800710a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d150      	bne.n	8006b26 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	212c      	movs	r1, #44	; 0x2c
 8006a8a:	fb01 f303 	mul.w	r3, r1, r3
 8006a8e:	4413      	add	r3, r2
 8006a90:	335c      	adds	r3, #92	; 0x5c
 8006a92:	2200      	movs	r2, #0
 8006a94:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa8:	2b40      	cmp	r3, #64	; 0x40
 8006aaa:	d111      	bne.n	8006ad0 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	212c      	movs	r1, #44	; 0x2c
 8006ab2:	fb01 f303 	mul.w	r3, r1, r3
 8006ab6:	4413      	add	r3, r2
 8006ab8:	333d      	adds	r3, #61	; 0x3d
 8006aba:	2201      	movs	r2, #1
 8006abc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aca:	461a      	mov	r2, r3
 8006acc:	2340      	movs	r3, #64	; 0x40
 8006ace:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	0151      	lsls	r1, r2, #5
 8006ae2:	69ba      	ldr	r2, [r7, #24]
 8006ae4:	440a      	add	r2, r1
 8006ae6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aea:	f043 0302 	orr.w	r3, r3, #2
 8006aee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	4611      	mov	r1, r2
 8006afa:	4618      	mov	r0, r3
 8006afc:	f007 f931 	bl	800dd62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	2301      	movs	r3, #1
 8006b10:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	212c      	movs	r1, #44	; 0x2c
 8006b18:	fb01 f303 	mul.w	r3, r1, r3
 8006b1c:	4413      	add	r3, r2
 8006b1e:	3361      	adds	r3, #97	; 0x61
 8006b20:	2201      	movs	r2, #1
 8006b22:	701a      	strb	r2, [r3, #0]
}
 8006b24:	e2f1      	b.n	800710a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b38:	2b40      	cmp	r3, #64	; 0x40
 8006b3a:	d13c      	bne.n	8006bb6 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	212c      	movs	r1, #44	; 0x2c
 8006b42:	fb01 f303 	mul.w	r3, r1, r3
 8006b46:	4413      	add	r3, r2
 8006b48:	3361      	adds	r3, #97	; 0x61
 8006b4a:	2204      	movs	r2, #4
 8006b4c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	212c      	movs	r1, #44	; 0x2c
 8006b54:	fb01 f303 	mul.w	r3, r1, r3
 8006b58:	4413      	add	r3, r2
 8006b5a:	333d      	adds	r3, #61	; 0x3d
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	212c      	movs	r1, #44	; 0x2c
 8006b66:	fb01 f303 	mul.w	r3, r1, r3
 8006b6a:	4413      	add	r3, r2
 8006b6c:	335c      	adds	r3, #92	; 0x5c
 8006b6e:	2200      	movs	r2, #0
 8006b70:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	0151      	lsls	r1, r2, #5
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	440a      	add	r2, r1
 8006b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b8c:	f043 0302 	orr.w	r3, r3, #2
 8006b90:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	b2d2      	uxtb	r2, r2
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f007 f8e0 	bl	800dd62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bae:	461a      	mov	r2, r3
 8006bb0:	2340      	movs	r3, #64	; 0x40
 8006bb2:	6093      	str	r3, [r2, #8]
}
 8006bb4:	e2a9      	b.n	800710a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f003 0308 	and.w	r3, r3, #8
 8006bc8:	2b08      	cmp	r3, #8
 8006bca:	d12a      	bne.n	8006c22 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	015a      	lsls	r2, r3, #5
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bd8:	461a      	mov	r2, r3
 8006bda:	2308      	movs	r3, #8
 8006bdc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	0151      	lsls	r1, r2, #5
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	440a      	add	r2, r1
 8006bf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bf8:	f043 0302 	orr.w	r3, r3, #2
 8006bfc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	b2d2      	uxtb	r2, r2
 8006c06:	4611      	mov	r1, r2
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f007 f8aa 	bl	800dd62 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	212c      	movs	r1, #44	; 0x2c
 8006c14:	fb01 f303 	mul.w	r3, r1, r3
 8006c18:	4413      	add	r3, r2
 8006c1a:	3361      	adds	r3, #97	; 0x61
 8006c1c:	2205      	movs	r2, #5
 8006c1e:	701a      	strb	r2, [r3, #0]
}
 8006c20:	e273      	b.n	800710a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f003 0310 	and.w	r3, r3, #16
 8006c34:	2b10      	cmp	r3, #16
 8006c36:	d150      	bne.n	8006cda <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	212c      	movs	r1, #44	; 0x2c
 8006c3e:	fb01 f303 	mul.w	r3, r1, r3
 8006c42:	4413      	add	r3, r2
 8006c44:	335c      	adds	r3, #92	; 0x5c
 8006c46:	2200      	movs	r2, #0
 8006c48:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	212c      	movs	r1, #44	; 0x2c
 8006c50:	fb01 f303 	mul.w	r3, r1, r3
 8006c54:	4413      	add	r3, r2
 8006c56:	3361      	adds	r3, #97	; 0x61
 8006c58:	2203      	movs	r2, #3
 8006c5a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	212c      	movs	r1, #44	; 0x2c
 8006c62:	fb01 f303 	mul.w	r3, r1, r3
 8006c66:	4413      	add	r3, r2
 8006c68:	333d      	adds	r3, #61	; 0x3d
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d112      	bne.n	8006c96 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	212c      	movs	r1, #44	; 0x2c
 8006c76:	fb01 f303 	mul.w	r3, r1, r3
 8006c7a:	4413      	add	r3, r2
 8006c7c:	333c      	adds	r3, #60	; 0x3c
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d108      	bne.n	8006c96 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	212c      	movs	r1, #44	; 0x2c
 8006c8a:	fb01 f303 	mul.w	r3, r1, r3
 8006c8e:	4413      	add	r3, r2
 8006c90:	333d      	adds	r3, #61	; 0x3d
 8006c92:	2201      	movs	r2, #1
 8006c94:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	015a      	lsls	r2, r3, #5
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	0151      	lsls	r1, r2, #5
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	440a      	add	r2, r1
 8006cac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cb0:	f043 0302 	orr.w	r3, r3, #2
 8006cb4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	b2d2      	uxtb	r2, r2
 8006cbe:	4611      	mov	r1, r2
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f007 f84e 	bl	800dd62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	2310      	movs	r3, #16
 8006cd6:	6093      	str	r3, [r2, #8]
}
 8006cd8:	e217      	b.n	800710a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cec:	2b80      	cmp	r3, #128	; 0x80
 8006cee:	d174      	bne.n	8006dda <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d121      	bne.n	8006d3c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	212c      	movs	r1, #44	; 0x2c
 8006cfe:	fb01 f303 	mul.w	r3, r1, r3
 8006d02:	4413      	add	r3, r2
 8006d04:	3361      	adds	r3, #97	; 0x61
 8006d06:	2206      	movs	r2, #6
 8006d08:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	0151      	lsls	r1, r2, #5
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	440a      	add	r2, r1
 8006d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d24:	f043 0302 	orr.w	r3, r3, #2
 8006d28:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	b2d2      	uxtb	r2, r2
 8006d32:	4611      	mov	r1, r2
 8006d34:	4618      	mov	r0, r3
 8006d36:	f007 f814 	bl	800dd62 <USB_HC_Halt>
 8006d3a:	e044      	b.n	8006dc6 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	212c      	movs	r1, #44	; 0x2c
 8006d42:	fb01 f303 	mul.w	r3, r1, r3
 8006d46:	4413      	add	r3, r2
 8006d48:	335c      	adds	r3, #92	; 0x5c
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	202c      	movs	r0, #44	; 0x2c
 8006d54:	fb00 f303 	mul.w	r3, r0, r3
 8006d58:	440b      	add	r3, r1
 8006d5a:	335c      	adds	r3, #92	; 0x5c
 8006d5c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	212c      	movs	r1, #44	; 0x2c
 8006d64:	fb01 f303 	mul.w	r3, r1, r3
 8006d68:	4413      	add	r3, r2
 8006d6a:	335c      	adds	r3, #92	; 0x5c
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d920      	bls.n	8006db4 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	212c      	movs	r1, #44	; 0x2c
 8006d78:	fb01 f303 	mul.w	r3, r1, r3
 8006d7c:	4413      	add	r3, r2
 8006d7e:	335c      	adds	r3, #92	; 0x5c
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	212c      	movs	r1, #44	; 0x2c
 8006d8a:	fb01 f303 	mul.w	r3, r1, r3
 8006d8e:	4413      	add	r3, r2
 8006d90:	3360      	adds	r3, #96	; 0x60
 8006d92:	2204      	movs	r2, #4
 8006d94:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	b2d9      	uxtb	r1, r3
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	202c      	movs	r0, #44	; 0x2c
 8006da0:	fb00 f303 	mul.w	r3, r0, r3
 8006da4:	4413      	add	r3, r2
 8006da6:	3360      	adds	r3, #96	; 0x60
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f009 fadb 	bl	8010368 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006db2:	e008      	b.n	8006dc6 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	212c      	movs	r1, #44	; 0x2c
 8006dba:	fb01 f303 	mul.w	r3, r1, r3
 8006dbe:	4413      	add	r3, r2
 8006dc0:	3360      	adds	r3, #96	; 0x60
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	2380      	movs	r3, #128	; 0x80
 8006dd6:	6093      	str	r3, [r2, #8]
}
 8006dd8:	e197      	b.n	800710a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df0:	d134      	bne.n	8006e5c <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	0151      	lsls	r1, r2, #5
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	440a      	add	r2, r1
 8006e08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e0c:	f043 0302 	orr.w	r3, r3, #2
 8006e10:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	b2d2      	uxtb	r2, r2
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f006 ffa0 	bl	800dd62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e2e:	461a      	mov	r2, r3
 8006e30:	2310      	movs	r3, #16
 8006e32:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e40:	461a      	mov	r2, r3
 8006e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e46:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	212c      	movs	r1, #44	; 0x2c
 8006e4e:	fb01 f303 	mul.w	r3, r1, r3
 8006e52:	4413      	add	r3, r2
 8006e54:	3361      	adds	r3, #97	; 0x61
 8006e56:	2208      	movs	r2, #8
 8006e58:	701a      	strb	r2, [r3, #0]
}
 8006e5a:	e156      	b.n	800710a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	f040 814b 	bne.w	800710a <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	0151      	lsls	r1, r2, #5
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	440a      	add	r2, r1
 8006e8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e8e:	f023 0302 	bic.w	r3, r3, #2
 8006e92:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	212c      	movs	r1, #44	; 0x2c
 8006e9a:	fb01 f303 	mul.w	r3, r1, r3
 8006e9e:	4413      	add	r3, r2
 8006ea0:	3361      	adds	r3, #97	; 0x61
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d179      	bne.n	8006f9c <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	212c      	movs	r1, #44	; 0x2c
 8006eae:	fb01 f303 	mul.w	r3, r1, r3
 8006eb2:	4413      	add	r3, r2
 8006eb4:	3360      	adds	r3, #96	; 0x60
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	212c      	movs	r1, #44	; 0x2c
 8006ec0:	fb01 f303 	mul.w	r3, r1, r3
 8006ec4:	4413      	add	r3, r2
 8006ec6:	333f      	adds	r3, #63	; 0x3f
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d00a      	beq.n	8006ee4 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	212c      	movs	r1, #44	; 0x2c
 8006ed4:	fb01 f303 	mul.w	r3, r1, r3
 8006ed8:	4413      	add	r3, r2
 8006eda:	333f      	adds	r3, #63	; 0x3f
 8006edc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	f040 80fc 	bne.w	80070dc <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d142      	bne.n	8006f72 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	212c      	movs	r1, #44	; 0x2c
 8006ef2:	fb01 f303 	mul.w	r3, r1, r3
 8006ef6:	4413      	add	r3, r2
 8006ef8:	334c      	adds	r3, #76	; 0x4c
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 80ed 	beq.w	80070dc <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	212c      	movs	r1, #44	; 0x2c
 8006f08:	fb01 f303 	mul.w	r3, r1, r3
 8006f0c:	4413      	add	r3, r2
 8006f0e:	334c      	adds	r3, #76	; 0x4c
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6879      	ldr	r1, [r7, #4]
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	202c      	movs	r0, #44	; 0x2c
 8006f18:	fb00 f202 	mul.w	r2, r0, r2
 8006f1c:	440a      	add	r2, r1
 8006f1e:	3240      	adds	r2, #64	; 0x40
 8006f20:	8812      	ldrh	r2, [r2, #0]
 8006f22:	4413      	add	r3, r2
 8006f24:	3b01      	subs	r3, #1
 8006f26:	6879      	ldr	r1, [r7, #4]
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	202c      	movs	r0, #44	; 0x2c
 8006f2c:	fb00 f202 	mul.w	r2, r0, r2
 8006f30:	440a      	add	r2, r1
 8006f32:	3240      	adds	r2, #64	; 0x40
 8006f34:	8812      	ldrh	r2, [r2, #0]
 8006f36:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f3a:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f000 80ca 	beq.w	80070dc <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	212c      	movs	r1, #44	; 0x2c
 8006f4e:	fb01 f303 	mul.w	r3, r1, r3
 8006f52:	4413      	add	r3, r2
 8006f54:	3355      	adds	r3, #85	; 0x55
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	f083 0301 	eor.w	r3, r3, #1
 8006f5c:	b2d8      	uxtb	r0, r3
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	212c      	movs	r1, #44	; 0x2c
 8006f64:	fb01 f303 	mul.w	r3, r1, r3
 8006f68:	4413      	add	r3, r2
 8006f6a:	3355      	adds	r3, #85	; 0x55
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	701a      	strb	r2, [r3, #0]
 8006f70:	e0b4      	b.n	80070dc <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	212c      	movs	r1, #44	; 0x2c
 8006f78:	fb01 f303 	mul.w	r3, r1, r3
 8006f7c:	4413      	add	r3, r2
 8006f7e:	3355      	adds	r3, #85	; 0x55
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	f083 0301 	eor.w	r3, r3, #1
 8006f86:	b2d8      	uxtb	r0, r3
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	212c      	movs	r1, #44	; 0x2c
 8006f8e:	fb01 f303 	mul.w	r3, r1, r3
 8006f92:	4413      	add	r3, r2
 8006f94:	3355      	adds	r3, #85	; 0x55
 8006f96:	4602      	mov	r2, r0
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	e09f      	b.n	80070dc <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	212c      	movs	r1, #44	; 0x2c
 8006fa2:	fb01 f303 	mul.w	r3, r1, r3
 8006fa6:	4413      	add	r3, r2
 8006fa8:	3361      	adds	r3, #97	; 0x61
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d109      	bne.n	8006fc4 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	212c      	movs	r1, #44	; 0x2c
 8006fb6:	fb01 f303 	mul.w	r3, r1, r3
 8006fba:	4413      	add	r3, r2
 8006fbc:	3360      	adds	r3, #96	; 0x60
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	e08b      	b.n	80070dc <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	212c      	movs	r1, #44	; 0x2c
 8006fca:	fb01 f303 	mul.w	r3, r1, r3
 8006fce:	4413      	add	r3, r2
 8006fd0:	3361      	adds	r3, #97	; 0x61
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d109      	bne.n	8006fec <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	212c      	movs	r1, #44	; 0x2c
 8006fde:	fb01 f303 	mul.w	r3, r1, r3
 8006fe2:	4413      	add	r3, r2
 8006fe4:	3360      	adds	r3, #96	; 0x60
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	701a      	strb	r2, [r3, #0]
 8006fea:	e077      	b.n	80070dc <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	212c      	movs	r1, #44	; 0x2c
 8006ff2:	fb01 f303 	mul.w	r3, r1, r3
 8006ff6:	4413      	add	r3, r2
 8006ff8:	3361      	adds	r3, #97	; 0x61
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	2b05      	cmp	r3, #5
 8006ffe:	d109      	bne.n	8007014 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	212c      	movs	r1, #44	; 0x2c
 8007006:	fb01 f303 	mul.w	r3, r1, r3
 800700a:	4413      	add	r3, r2
 800700c:	3360      	adds	r3, #96	; 0x60
 800700e:	2205      	movs	r2, #5
 8007010:	701a      	strb	r2, [r3, #0]
 8007012:	e063      	b.n	80070dc <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	212c      	movs	r1, #44	; 0x2c
 800701a:	fb01 f303 	mul.w	r3, r1, r3
 800701e:	4413      	add	r3, r2
 8007020:	3361      	adds	r3, #97	; 0x61
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	2b06      	cmp	r3, #6
 8007026:	d009      	beq.n	800703c <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	212c      	movs	r1, #44	; 0x2c
 800702e:	fb01 f303 	mul.w	r3, r1, r3
 8007032:	4413      	add	r3, r2
 8007034:	3361      	adds	r3, #97	; 0x61
 8007036:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007038:	2b08      	cmp	r3, #8
 800703a:	d14f      	bne.n	80070dc <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	212c      	movs	r1, #44	; 0x2c
 8007042:	fb01 f303 	mul.w	r3, r1, r3
 8007046:	4413      	add	r3, r2
 8007048:	335c      	adds	r3, #92	; 0x5c
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	202c      	movs	r0, #44	; 0x2c
 8007054:	fb00 f303 	mul.w	r3, r0, r3
 8007058:	440b      	add	r3, r1
 800705a:	335c      	adds	r3, #92	; 0x5c
 800705c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	212c      	movs	r1, #44	; 0x2c
 8007064:	fb01 f303 	mul.w	r3, r1, r3
 8007068:	4413      	add	r3, r2
 800706a:	335c      	adds	r3, #92	; 0x5c
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b02      	cmp	r3, #2
 8007070:	d912      	bls.n	8007098 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	212c      	movs	r1, #44	; 0x2c
 8007078:	fb01 f303 	mul.w	r3, r1, r3
 800707c:	4413      	add	r3, r2
 800707e:	335c      	adds	r3, #92	; 0x5c
 8007080:	2200      	movs	r2, #0
 8007082:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	212c      	movs	r1, #44	; 0x2c
 800708a:	fb01 f303 	mul.w	r3, r1, r3
 800708e:	4413      	add	r3, r2
 8007090:	3360      	adds	r3, #96	; 0x60
 8007092:	2204      	movs	r2, #4
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	e021      	b.n	80070dc <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	212c      	movs	r1, #44	; 0x2c
 800709e:	fb01 f303 	mul.w	r3, r1, r3
 80070a2:	4413      	add	r3, r2
 80070a4:	3360      	adds	r3, #96	; 0x60
 80070a6:	2202      	movs	r2, #2
 80070a8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070c0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070c8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	015a      	lsls	r2, r3, #5
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d6:	461a      	mov	r2, r3
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070e8:	461a      	mov	r2, r3
 80070ea:	2302      	movs	r3, #2
 80070ec:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	b2d9      	uxtb	r1, r3
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	202c      	movs	r0, #44	; 0x2c
 80070f8:	fb00 f303 	mul.w	r3, r0, r3
 80070fc:	4413      	add	r3, r2
 80070fe:	3360      	adds	r3, #96	; 0x60
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f009 f92f 	bl	8010368 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800710a:	bf00      	nop
 800710c:	3720      	adds	r7, #32
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b08a      	sub	sp, #40	; 0x28
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007122:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	f003 030f 	and.w	r3, r3, #15
 8007132:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	0c5b      	lsrs	r3, r3, #17
 8007138:	f003 030f 	and.w	r3, r3, #15
 800713c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	091b      	lsrs	r3, r3, #4
 8007142:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007146:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	2b02      	cmp	r3, #2
 800714c:	d004      	beq.n	8007158 <HCD_RXQLVL_IRQHandler+0x46>
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2b05      	cmp	r3, #5
 8007152:	f000 80a9 	beq.w	80072a8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007156:	e0aa      	b.n	80072ae <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 80a6 	beq.w	80072ac <HCD_RXQLVL_IRQHandler+0x19a>
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	212c      	movs	r1, #44	; 0x2c
 8007166:	fb01 f303 	mul.w	r3, r1, r3
 800716a:	4413      	add	r3, r2
 800716c:	3344      	adds	r3, #68	; 0x44
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 809b 	beq.w	80072ac <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	212c      	movs	r1, #44	; 0x2c
 800717c:	fb01 f303 	mul.w	r3, r1, r3
 8007180:	4413      	add	r3, r2
 8007182:	3350      	adds	r3, #80	; 0x50
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	441a      	add	r2, r3
 800718a:	6879      	ldr	r1, [r7, #4]
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	202c      	movs	r0, #44	; 0x2c
 8007190:	fb00 f303 	mul.w	r3, r0, r3
 8007194:	440b      	add	r3, r1
 8007196:	334c      	adds	r3, #76	; 0x4c
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	429a      	cmp	r2, r3
 800719c:	d87a      	bhi.n	8007294 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6818      	ldr	r0, [r3, #0]
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	212c      	movs	r1, #44	; 0x2c
 80071a8:	fb01 f303 	mul.w	r3, r1, r3
 80071ac:	4413      	add	r3, r2
 80071ae:	3344      	adds	r3, #68	; 0x44
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	b292      	uxth	r2, r2
 80071b6:	4619      	mov	r1, r3
 80071b8:	f006 f948 	bl	800d44c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	212c      	movs	r1, #44	; 0x2c
 80071c2:	fb01 f303 	mul.w	r3, r1, r3
 80071c6:	4413      	add	r3, r2
 80071c8:	3344      	adds	r3, #68	; 0x44
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	441a      	add	r2, r3
 80071d0:	6879      	ldr	r1, [r7, #4]
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	202c      	movs	r0, #44	; 0x2c
 80071d6:	fb00 f303 	mul.w	r3, r0, r3
 80071da:	440b      	add	r3, r1
 80071dc:	3344      	adds	r3, #68	; 0x44
 80071de:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	212c      	movs	r1, #44	; 0x2c
 80071e6:	fb01 f303 	mul.w	r3, r1, r3
 80071ea:	4413      	add	r3, r2
 80071ec:	3350      	adds	r3, #80	; 0x50
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	441a      	add	r2, r3
 80071f4:	6879      	ldr	r1, [r7, #4]
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	202c      	movs	r0, #44	; 0x2c
 80071fa:	fb00 f303 	mul.w	r3, r0, r3
 80071fe:	440b      	add	r3, r1
 8007200:	3350      	adds	r3, #80	; 0x50
 8007202:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	4413      	add	r3, r2
 800720c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	0cdb      	lsrs	r3, r3, #19
 8007214:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007218:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	212c      	movs	r1, #44	; 0x2c
 8007220:	fb01 f303 	mul.w	r3, r1, r3
 8007224:	4413      	add	r3, r2
 8007226:	3340      	adds	r3, #64	; 0x40
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	4293      	cmp	r3, r2
 8007230:	d13c      	bne.n	80072ac <HCD_RXQLVL_IRQHandler+0x19a>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d039      	beq.n	80072ac <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	4413      	add	r3, r2
 8007240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800724e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007256:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	4413      	add	r3, r2
 8007260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007264:	461a      	mov	r2, r3
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	212c      	movs	r1, #44	; 0x2c
 8007270:	fb01 f303 	mul.w	r3, r1, r3
 8007274:	4413      	add	r3, r2
 8007276:	3354      	adds	r3, #84	; 0x54
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	f083 0301 	eor.w	r3, r3, #1
 800727e:	b2d8      	uxtb	r0, r3
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	212c      	movs	r1, #44	; 0x2c
 8007286:	fb01 f303 	mul.w	r3, r1, r3
 800728a:	4413      	add	r3, r2
 800728c:	3354      	adds	r3, #84	; 0x54
 800728e:	4602      	mov	r2, r0
 8007290:	701a      	strb	r2, [r3, #0]
      break;
 8007292:	e00b      	b.n	80072ac <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	212c      	movs	r1, #44	; 0x2c
 800729a:	fb01 f303 	mul.w	r3, r1, r3
 800729e:	4413      	add	r3, r2
 80072a0:	3360      	adds	r3, #96	; 0x60
 80072a2:	2204      	movs	r2, #4
 80072a4:	701a      	strb	r2, [r3, #0]
      break;
 80072a6:	e001      	b.n	80072ac <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80072a8:	bf00      	nop
 80072aa:	e000      	b.n	80072ae <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80072ac:	bf00      	nop
  }
}
 80072ae:	bf00      	nop
 80072b0:	3728      	adds	r7, #40	; 0x28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b086      	sub	sp, #24
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80072e2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f003 0302 	and.w	r3, r3, #2
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d10b      	bne.n	8007306 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d102      	bne.n	80072fe <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f009 f819 	bl	8010330 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	f043 0302 	orr.w	r3, r3, #2
 8007304:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f003 0308 	and.w	r3, r3, #8
 800730c:	2b08      	cmp	r3, #8
 800730e:	d132      	bne.n	8007376 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f043 0308 	orr.w	r3, r3, #8
 8007316:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f003 0304 	and.w	r3, r3, #4
 800731e:	2b04      	cmp	r3, #4
 8007320:	d126      	bne.n	8007370 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	2b02      	cmp	r3, #2
 8007328:	d113      	bne.n	8007352 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007330:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007334:	d106      	bne.n	8007344 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2102      	movs	r1, #2
 800733c:	4618      	mov	r0, r3
 800733e:	f006 f9e9 	bl	800d714 <USB_InitFSLSPClkSel>
 8007342:	e011      	b.n	8007368 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2101      	movs	r1, #1
 800734a:	4618      	mov	r0, r3
 800734c:	f006 f9e2 	bl	800d714 <USB_InitFSLSPClkSel>
 8007350:	e00a      	b.n	8007368 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d106      	bne.n	8007368 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007360:	461a      	mov	r2, r3
 8007362:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007366:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f009 f80b 	bl	8010384 <HAL_HCD_PortEnabled_Callback>
 800736e:	e002      	b.n	8007376 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f009 f815 	bl	80103a0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f003 0320 	and.w	r3, r3, #32
 800737c:	2b20      	cmp	r3, #32
 800737e:	d103      	bne.n	8007388 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	f043 0320 	orr.w	r3, r3, #32
 8007386:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800738e:	461a      	mov	r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	6013      	str	r3, [r2, #0]
}
 8007394:	bf00      	nop
 8007396:	3718      	adds	r7, #24
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80073a4:	4b19      	ldr	r3, [pc, #100]	; (800740c <HAL_PWREx_ConfigSupply+0x70>)
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	2b04      	cmp	r3, #4
 80073ae:	d00a      	beq.n	80073c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80073b0:	4b16      	ldr	r3, [pc, #88]	; (800740c <HAL_PWREx_ConfigSupply+0x70>)
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f003 0307 	and.w	r3, r3, #7
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d001      	beq.n	80073c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e01f      	b.n	8007402 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	e01d      	b.n	8007402 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80073c6:	4b11      	ldr	r3, [pc, #68]	; (800740c <HAL_PWREx_ConfigSupply+0x70>)
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	f023 0207 	bic.w	r2, r3, #7
 80073ce:	490f      	ldr	r1, [pc, #60]	; (800740c <HAL_PWREx_ConfigSupply+0x70>)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80073d6:	f7fa fd03 	bl	8001de0 <HAL_GetTick>
 80073da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80073dc:	e009      	b.n	80073f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80073de:	f7fa fcff 	bl	8001de0 <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073ec:	d901      	bls.n	80073f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e007      	b.n	8007402 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80073f2:	4b06      	ldr	r3, [pc, #24]	; (800740c <HAL_PWREx_ConfigSupply+0x70>)
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073fe:	d1ee      	bne.n	80073de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	58024800 	.word	0x58024800

08007410 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007410:	b480      	push	{r7}
 8007412:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007414:	4b05      	ldr	r3, [pc, #20]	; (800742c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	4a04      	ldr	r2, [pc, #16]	; (800742c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800741a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800741e:	60d3      	str	r3, [r2, #12]
}
 8007420:	bf00      	nop
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	58024800 	.word	0x58024800

08007430 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b08c      	sub	sp, #48	; 0x30
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e3ff      	b.n	8007c42 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 8087 	beq.w	800755e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007450:	4b99      	ldr	r3, [pc, #612]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007458:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800745a:	4b97      	ldr	r3, [pc, #604]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 800745c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007462:	2b10      	cmp	r3, #16
 8007464:	d007      	beq.n	8007476 <HAL_RCC_OscConfig+0x46>
 8007466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007468:	2b18      	cmp	r3, #24
 800746a:	d110      	bne.n	800748e <HAL_RCC_OscConfig+0x5e>
 800746c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746e:	f003 0303 	and.w	r3, r3, #3
 8007472:	2b02      	cmp	r3, #2
 8007474:	d10b      	bne.n	800748e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007476:	4b90      	ldr	r3, [pc, #576]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d06c      	beq.n	800755c <HAL_RCC_OscConfig+0x12c>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d168      	bne.n	800755c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e3d9      	b.n	8007c42 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007496:	d106      	bne.n	80074a6 <HAL_RCC_OscConfig+0x76>
 8007498:	4b87      	ldr	r3, [pc, #540]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a86      	ldr	r2, [pc, #536]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 800749e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074a2:	6013      	str	r3, [r2, #0]
 80074a4:	e02e      	b.n	8007504 <HAL_RCC_OscConfig+0xd4>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10c      	bne.n	80074c8 <HAL_RCC_OscConfig+0x98>
 80074ae:	4b82      	ldr	r3, [pc, #520]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a81      	ldr	r2, [pc, #516]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 80074b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074b8:	6013      	str	r3, [r2, #0]
 80074ba:	4b7f      	ldr	r3, [pc, #508]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a7e      	ldr	r2, [pc, #504]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 80074c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074c4:	6013      	str	r3, [r2, #0]
 80074c6:	e01d      	b.n	8007504 <HAL_RCC_OscConfig+0xd4>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074d0:	d10c      	bne.n	80074ec <HAL_RCC_OscConfig+0xbc>
 80074d2:	4b79      	ldr	r3, [pc, #484]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a78      	ldr	r2, [pc, #480]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 80074d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074dc:	6013      	str	r3, [r2, #0]
 80074de:	4b76      	ldr	r3, [pc, #472]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a75      	ldr	r2, [pc, #468]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 80074e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074e8:	6013      	str	r3, [r2, #0]
 80074ea:	e00b      	b.n	8007504 <HAL_RCC_OscConfig+0xd4>
 80074ec:	4b72      	ldr	r3, [pc, #456]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a71      	ldr	r2, [pc, #452]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 80074f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074f6:	6013      	str	r3, [r2, #0]
 80074f8:	4b6f      	ldr	r3, [pc, #444]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a6e      	ldr	r2, [pc, #440]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 80074fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d013      	beq.n	8007534 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800750c:	f7fa fc68 	bl	8001de0 <HAL_GetTick>
 8007510:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007512:	e008      	b.n	8007526 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007514:	f7fa fc64 	bl	8001de0 <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	2b64      	cmp	r3, #100	; 0x64
 8007520:	d901      	bls.n	8007526 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e38d      	b.n	8007c42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007526:	4b64      	ldr	r3, [pc, #400]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d0f0      	beq.n	8007514 <HAL_RCC_OscConfig+0xe4>
 8007532:	e014      	b.n	800755e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007534:	f7fa fc54 	bl	8001de0 <HAL_GetTick>
 8007538:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800753a:	e008      	b.n	800754e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800753c:	f7fa fc50 	bl	8001de0 <HAL_GetTick>
 8007540:	4602      	mov	r2, r0
 8007542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	2b64      	cmp	r3, #100	; 0x64
 8007548:	d901      	bls.n	800754e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e379      	b.n	8007c42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800754e:	4b5a      	ldr	r3, [pc, #360]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1f0      	bne.n	800753c <HAL_RCC_OscConfig+0x10c>
 800755a:	e000      	b.n	800755e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800755c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0302 	and.w	r3, r3, #2
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 80ae 	beq.w	80076c8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800756c:	4b52      	ldr	r3, [pc, #328]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007574:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007576:	4b50      	ldr	r3, [pc, #320]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 8007578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800757c:	6a3b      	ldr	r3, [r7, #32]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d007      	beq.n	8007592 <HAL_RCC_OscConfig+0x162>
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	2b18      	cmp	r3, #24
 8007586:	d13a      	bne.n	80075fe <HAL_RCC_OscConfig+0x1ce>
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	f003 0303 	and.w	r3, r3, #3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d135      	bne.n	80075fe <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007592:	4b49      	ldr	r3, [pc, #292]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0304 	and.w	r3, r3, #4
 800759a:	2b00      	cmp	r3, #0
 800759c:	d005      	beq.n	80075aa <HAL_RCC_OscConfig+0x17a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e34b      	b.n	8007c42 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075aa:	f7fa fc49 	bl	8001e40 <HAL_GetREVID>
 80075ae:	4603      	mov	r3, r0
 80075b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d817      	bhi.n	80075e8 <HAL_RCC_OscConfig+0x1b8>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	2b40      	cmp	r3, #64	; 0x40
 80075be:	d108      	bne.n	80075d2 <HAL_RCC_OscConfig+0x1a2>
 80075c0:	4b3d      	ldr	r3, [pc, #244]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80075c8:	4a3b      	ldr	r2, [pc, #236]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 80075ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075ce:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075d0:	e07a      	b.n	80076c8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075d2:	4b39      	ldr	r3, [pc, #228]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	031b      	lsls	r3, r3, #12
 80075e0:	4935      	ldr	r1, [pc, #212]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075e6:	e06f      	b.n	80076c8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075e8:	4b33      	ldr	r3, [pc, #204]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	061b      	lsls	r3, r3, #24
 80075f6:	4930      	ldr	r1, [pc, #192]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075fc:	e064      	b.n	80076c8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d045      	beq.n	8007692 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007606:	4b2c      	ldr	r3, [pc, #176]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f023 0219 	bic.w	r2, r3, #25
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	4929      	ldr	r1, [pc, #164]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 8007614:	4313      	orrs	r3, r2
 8007616:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007618:	f7fa fbe2 	bl	8001de0 <HAL_GetTick>
 800761c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800761e:	e008      	b.n	8007632 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007620:	f7fa fbde 	bl	8001de0 <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	2b02      	cmp	r3, #2
 800762c:	d901      	bls.n	8007632 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e307      	b.n	8007c42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007632:	4b21      	ldr	r3, [pc, #132]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0304 	and.w	r3, r3, #4
 800763a:	2b00      	cmp	r3, #0
 800763c:	d0f0      	beq.n	8007620 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800763e:	f7fa fbff 	bl	8001e40 <HAL_GetREVID>
 8007642:	4603      	mov	r3, r0
 8007644:	f241 0203 	movw	r2, #4099	; 0x1003
 8007648:	4293      	cmp	r3, r2
 800764a:	d817      	bhi.n	800767c <HAL_RCC_OscConfig+0x24c>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	2b40      	cmp	r3, #64	; 0x40
 8007652:	d108      	bne.n	8007666 <HAL_RCC_OscConfig+0x236>
 8007654:	4b18      	ldr	r3, [pc, #96]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800765c:	4a16      	ldr	r2, [pc, #88]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 800765e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007662:	6053      	str	r3, [r2, #4]
 8007664:	e030      	b.n	80076c8 <HAL_RCC_OscConfig+0x298>
 8007666:	4b14      	ldr	r3, [pc, #80]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	031b      	lsls	r3, r3, #12
 8007674:	4910      	ldr	r1, [pc, #64]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 8007676:	4313      	orrs	r3, r2
 8007678:	604b      	str	r3, [r1, #4]
 800767a:	e025      	b.n	80076c8 <HAL_RCC_OscConfig+0x298>
 800767c:	4b0e      	ldr	r3, [pc, #56]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	061b      	lsls	r3, r3, #24
 800768a:	490b      	ldr	r1, [pc, #44]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 800768c:	4313      	orrs	r3, r2
 800768e:	604b      	str	r3, [r1, #4]
 8007690:	e01a      	b.n	80076c8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007692:	4b09      	ldr	r3, [pc, #36]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a08      	ldr	r2, [pc, #32]	; (80076b8 <HAL_RCC_OscConfig+0x288>)
 8007698:	f023 0301 	bic.w	r3, r3, #1
 800769c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800769e:	f7fa fb9f 	bl	8001de0 <HAL_GetTick>
 80076a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80076a4:	e00a      	b.n	80076bc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076a6:	f7fa fb9b 	bl	8001de0 <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d903      	bls.n	80076bc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e2c4      	b.n	8007c42 <HAL_RCC_OscConfig+0x812>
 80076b8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80076bc:	4ba4      	ldr	r3, [pc, #656]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0304 	and.w	r3, r3, #4
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1ee      	bne.n	80076a6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0310 	and.w	r3, r3, #16
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 80a9 	beq.w	8007828 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076d6:	4b9e      	ldr	r3, [pc, #632]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80076e0:	4b9b      	ldr	r3, [pc, #620]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 80076e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	2b08      	cmp	r3, #8
 80076ea:	d007      	beq.n	80076fc <HAL_RCC_OscConfig+0x2cc>
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	2b18      	cmp	r3, #24
 80076f0:	d13a      	bne.n	8007768 <HAL_RCC_OscConfig+0x338>
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f003 0303 	and.w	r3, r3, #3
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d135      	bne.n	8007768 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80076fc:	4b94      	ldr	r3, [pc, #592]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007704:	2b00      	cmp	r3, #0
 8007706:	d005      	beq.n	8007714 <HAL_RCC_OscConfig+0x2e4>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	2b80      	cmp	r3, #128	; 0x80
 800770e:	d001      	beq.n	8007714 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e296      	b.n	8007c42 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007714:	f7fa fb94 	bl	8001e40 <HAL_GetREVID>
 8007718:	4603      	mov	r3, r0
 800771a:	f241 0203 	movw	r2, #4099	; 0x1003
 800771e:	4293      	cmp	r3, r2
 8007720:	d817      	bhi.n	8007752 <HAL_RCC_OscConfig+0x322>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	2b20      	cmp	r3, #32
 8007728:	d108      	bne.n	800773c <HAL_RCC_OscConfig+0x30c>
 800772a:	4b89      	ldr	r3, [pc, #548]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007732:	4a87      	ldr	r2, [pc, #540]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 8007734:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007738:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800773a:	e075      	b.n	8007828 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800773c:	4b84      	ldr	r3, [pc, #528]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	069b      	lsls	r3, r3, #26
 800774a:	4981      	ldr	r1, [pc, #516]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 800774c:	4313      	orrs	r3, r2
 800774e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007750:	e06a      	b.n	8007828 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007752:	4b7f      	ldr	r3, [pc, #508]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	061b      	lsls	r3, r3, #24
 8007760:	497b      	ldr	r1, [pc, #492]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 8007762:	4313      	orrs	r3, r2
 8007764:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007766:	e05f      	b.n	8007828 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	69db      	ldr	r3, [r3, #28]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d042      	beq.n	80077f6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007770:	4b77      	ldr	r3, [pc, #476]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a76      	ldr	r2, [pc, #472]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 8007776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800777a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800777c:	f7fa fb30 	bl	8001de0 <HAL_GetTick>
 8007780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007782:	e008      	b.n	8007796 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007784:	f7fa fb2c 	bl	8001de0 <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	2b02      	cmp	r3, #2
 8007790:	d901      	bls.n	8007796 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e255      	b.n	8007c42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007796:	4b6e      	ldr	r3, [pc, #440]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d0f0      	beq.n	8007784 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80077a2:	f7fa fb4d 	bl	8001e40 <HAL_GetREVID>
 80077a6:	4603      	mov	r3, r0
 80077a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d817      	bhi.n	80077e0 <HAL_RCC_OscConfig+0x3b0>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a1b      	ldr	r3, [r3, #32]
 80077b4:	2b20      	cmp	r3, #32
 80077b6:	d108      	bne.n	80077ca <HAL_RCC_OscConfig+0x39a>
 80077b8:	4b65      	ldr	r3, [pc, #404]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80077c0:	4a63      	ldr	r2, [pc, #396]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 80077c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077c6:	6053      	str	r3, [r2, #4]
 80077c8:	e02e      	b.n	8007828 <HAL_RCC_OscConfig+0x3f8>
 80077ca:	4b61      	ldr	r3, [pc, #388]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	069b      	lsls	r3, r3, #26
 80077d8:	495d      	ldr	r1, [pc, #372]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	604b      	str	r3, [r1, #4]
 80077de:	e023      	b.n	8007828 <HAL_RCC_OscConfig+0x3f8>
 80077e0:	4b5b      	ldr	r3, [pc, #364]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	061b      	lsls	r3, r3, #24
 80077ee:	4958      	ldr	r1, [pc, #352]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	60cb      	str	r3, [r1, #12]
 80077f4:	e018      	b.n	8007828 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80077f6:	4b56      	ldr	r3, [pc, #344]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a55      	ldr	r2, [pc, #340]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 80077fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007802:	f7fa faed 	bl	8001de0 <HAL_GetTick>
 8007806:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007808:	e008      	b.n	800781c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800780a:	f7fa fae9 	bl	8001de0 <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	2b02      	cmp	r3, #2
 8007816:	d901      	bls.n	800781c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e212      	b.n	8007c42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800781c:	4b4c      	ldr	r3, [pc, #304]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1f0      	bne.n	800780a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 0308 	and.w	r3, r3, #8
 8007830:	2b00      	cmp	r3, #0
 8007832:	d036      	beq.n	80078a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d019      	beq.n	8007870 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800783c:	4b44      	ldr	r3, [pc, #272]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 800783e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007840:	4a43      	ldr	r2, [pc, #268]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 8007842:	f043 0301 	orr.w	r3, r3, #1
 8007846:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007848:	f7fa faca 	bl	8001de0 <HAL_GetTick>
 800784c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800784e:	e008      	b.n	8007862 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007850:	f7fa fac6 	bl	8001de0 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	2b02      	cmp	r3, #2
 800785c:	d901      	bls.n	8007862 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e1ef      	b.n	8007c42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007862:	4b3b      	ldr	r3, [pc, #236]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 8007864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007866:	f003 0302 	and.w	r3, r3, #2
 800786a:	2b00      	cmp	r3, #0
 800786c:	d0f0      	beq.n	8007850 <HAL_RCC_OscConfig+0x420>
 800786e:	e018      	b.n	80078a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007870:	4b37      	ldr	r3, [pc, #220]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 8007872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007874:	4a36      	ldr	r2, [pc, #216]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 8007876:	f023 0301 	bic.w	r3, r3, #1
 800787a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800787c:	f7fa fab0 	bl	8001de0 <HAL_GetTick>
 8007880:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007882:	e008      	b.n	8007896 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007884:	f7fa faac 	bl	8001de0 <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	2b02      	cmp	r3, #2
 8007890:	d901      	bls.n	8007896 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e1d5      	b.n	8007c42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007896:	4b2e      	ldr	r3, [pc, #184]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 8007898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800789a:	f003 0302 	and.w	r3, r3, #2
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1f0      	bne.n	8007884 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0320 	and.w	r3, r3, #32
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d036      	beq.n	800791c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d019      	beq.n	80078ea <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80078b6:	4b26      	ldr	r3, [pc, #152]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a25      	ldr	r2, [pc, #148]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 80078bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80078c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80078c2:	f7fa fa8d 	bl	8001de0 <HAL_GetTick>
 80078c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80078c8:	e008      	b.n	80078dc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80078ca:	f7fa fa89 	bl	8001de0 <HAL_GetTick>
 80078ce:	4602      	mov	r2, r0
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d901      	bls.n	80078dc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80078d8:	2303      	movs	r3, #3
 80078da:	e1b2      	b.n	8007c42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80078dc:	4b1c      	ldr	r3, [pc, #112]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d0f0      	beq.n	80078ca <HAL_RCC_OscConfig+0x49a>
 80078e8:	e018      	b.n	800791c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80078ea:	4b19      	ldr	r3, [pc, #100]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a18      	ldr	r2, [pc, #96]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 80078f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80078f6:	f7fa fa73 	bl	8001de0 <HAL_GetTick>
 80078fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80078fc:	e008      	b.n	8007910 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80078fe:	f7fa fa6f 	bl	8001de0 <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	2b02      	cmp	r3, #2
 800790a:	d901      	bls.n	8007910 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e198      	b.n	8007c42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007910:	4b0f      	ldr	r3, [pc, #60]	; (8007950 <HAL_RCC_OscConfig+0x520>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1f0      	bne.n	80078fe <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0304 	and.w	r3, r3, #4
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 8085 	beq.w	8007a34 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800792a:	4b0a      	ldr	r3, [pc, #40]	; (8007954 <HAL_RCC_OscConfig+0x524>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a09      	ldr	r2, [pc, #36]	; (8007954 <HAL_RCC_OscConfig+0x524>)
 8007930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007934:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007936:	f7fa fa53 	bl	8001de0 <HAL_GetTick>
 800793a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800793c:	e00c      	b.n	8007958 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800793e:	f7fa fa4f 	bl	8001de0 <HAL_GetTick>
 8007942:	4602      	mov	r2, r0
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	2b64      	cmp	r3, #100	; 0x64
 800794a:	d905      	bls.n	8007958 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	e178      	b.n	8007c42 <HAL_RCC_OscConfig+0x812>
 8007950:	58024400 	.word	0x58024400
 8007954:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007958:	4b96      	ldr	r3, [pc, #600]	; (8007bb4 <HAL_RCC_OscConfig+0x784>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007960:	2b00      	cmp	r3, #0
 8007962:	d0ec      	beq.n	800793e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d106      	bne.n	800797a <HAL_RCC_OscConfig+0x54a>
 800796c:	4b92      	ldr	r3, [pc, #584]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 800796e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007970:	4a91      	ldr	r2, [pc, #580]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007972:	f043 0301 	orr.w	r3, r3, #1
 8007976:	6713      	str	r3, [r2, #112]	; 0x70
 8007978:	e02d      	b.n	80079d6 <HAL_RCC_OscConfig+0x5a6>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10c      	bne.n	800799c <HAL_RCC_OscConfig+0x56c>
 8007982:	4b8d      	ldr	r3, [pc, #564]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007986:	4a8c      	ldr	r2, [pc, #560]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007988:	f023 0301 	bic.w	r3, r3, #1
 800798c:	6713      	str	r3, [r2, #112]	; 0x70
 800798e:	4b8a      	ldr	r3, [pc, #552]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007992:	4a89      	ldr	r2, [pc, #548]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007994:	f023 0304 	bic.w	r3, r3, #4
 8007998:	6713      	str	r3, [r2, #112]	; 0x70
 800799a:	e01c      	b.n	80079d6 <HAL_RCC_OscConfig+0x5a6>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	2b05      	cmp	r3, #5
 80079a2:	d10c      	bne.n	80079be <HAL_RCC_OscConfig+0x58e>
 80079a4:	4b84      	ldr	r3, [pc, #528]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 80079a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a8:	4a83      	ldr	r2, [pc, #524]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 80079aa:	f043 0304 	orr.w	r3, r3, #4
 80079ae:	6713      	str	r3, [r2, #112]	; 0x70
 80079b0:	4b81      	ldr	r3, [pc, #516]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 80079b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b4:	4a80      	ldr	r2, [pc, #512]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 80079b6:	f043 0301 	orr.w	r3, r3, #1
 80079ba:	6713      	str	r3, [r2, #112]	; 0x70
 80079bc:	e00b      	b.n	80079d6 <HAL_RCC_OscConfig+0x5a6>
 80079be:	4b7e      	ldr	r3, [pc, #504]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 80079c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c2:	4a7d      	ldr	r2, [pc, #500]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 80079c4:	f023 0301 	bic.w	r3, r3, #1
 80079c8:	6713      	str	r3, [r2, #112]	; 0x70
 80079ca:	4b7b      	ldr	r3, [pc, #492]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 80079cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ce:	4a7a      	ldr	r2, [pc, #488]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 80079d0:	f023 0304 	bic.w	r3, r3, #4
 80079d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d015      	beq.n	8007a0a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079de:	f7fa f9ff 	bl	8001de0 <HAL_GetTick>
 80079e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079e4:	e00a      	b.n	80079fc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079e6:	f7fa f9fb 	bl	8001de0 <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d901      	bls.n	80079fc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e122      	b.n	8007c42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079fc:	4b6e      	ldr	r3, [pc, #440]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 80079fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a00:	f003 0302 	and.w	r3, r3, #2
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d0ee      	beq.n	80079e6 <HAL_RCC_OscConfig+0x5b6>
 8007a08:	e014      	b.n	8007a34 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a0a:	f7fa f9e9 	bl	8001de0 <HAL_GetTick>
 8007a0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a10:	e00a      	b.n	8007a28 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a12:	f7fa f9e5 	bl	8001de0 <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d901      	bls.n	8007a28 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e10c      	b.n	8007c42 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a28:	4b63      	ldr	r3, [pc, #396]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1ee      	bne.n	8007a12 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 8101 	beq.w	8007c40 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007a3e:	4b5e      	ldr	r3, [pc, #376]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a46:	2b18      	cmp	r3, #24
 8007a48:	f000 80bc 	beq.w	8007bc4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	f040 8095 	bne.w	8007b80 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a56:	4b58      	ldr	r3, [pc, #352]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a57      	ldr	r2, [pc, #348]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007a5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a62:	f7fa f9bd 	bl	8001de0 <HAL_GetTick>
 8007a66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a68:	e008      	b.n	8007a7c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a6a:	f7fa f9b9 	bl	8001de0 <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d901      	bls.n	8007a7c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e0e2      	b.n	8007c42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a7c:	4b4e      	ldr	r3, [pc, #312]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1f0      	bne.n	8007a6a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a88:	4b4b      	ldr	r3, [pc, #300]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007a8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a8c:	4b4b      	ldr	r3, [pc, #300]	; (8007bbc <HAL_RCC_OscConfig+0x78c>)
 8007a8e:	4013      	ands	r3, r2
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007a98:	0112      	lsls	r2, r2, #4
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	4946      	ldr	r1, [pc, #280]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	628b      	str	r3, [r1, #40]	; 0x28
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	025b      	lsls	r3, r3, #9
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007abc:	3b01      	subs	r3, #1
 8007abe:	041b      	lsls	r3, r3, #16
 8007ac0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ac4:	431a      	orrs	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aca:	3b01      	subs	r3, #1
 8007acc:	061b      	lsls	r3, r3, #24
 8007ace:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ad2:	4939      	ldr	r1, [pc, #228]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007ad8:	4b37      	ldr	r3, [pc, #220]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007adc:	4a36      	ldr	r2, [pc, #216]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007ade:	f023 0301 	bic.w	r3, r3, #1
 8007ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007ae4:	4b34      	ldr	r3, [pc, #208]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ae8:	4b35      	ldr	r3, [pc, #212]	; (8007bc0 <HAL_RCC_OscConfig+0x790>)
 8007aea:	4013      	ands	r3, r2
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007af0:	00d2      	lsls	r2, r2, #3
 8007af2:	4931      	ldr	r1, [pc, #196]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007af4:	4313      	orrs	r3, r2
 8007af6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007af8:	4b2f      	ldr	r3, [pc, #188]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afc:	f023 020c 	bic.w	r2, r3, #12
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b04:	492c      	ldr	r1, [pc, #176]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007b0a:	4b2b      	ldr	r3, [pc, #172]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0e:	f023 0202 	bic.w	r2, r3, #2
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b16:	4928      	ldr	r1, [pc, #160]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007b1c:	4b26      	ldr	r3, [pc, #152]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	4a25      	ldr	r2, [pc, #148]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b28:	4b23      	ldr	r3, [pc, #140]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2c:	4a22      	ldr	r2, [pc, #136]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007b34:	4b20      	ldr	r3, [pc, #128]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b38:	4a1f      	ldr	r2, [pc, #124]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007b3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007b40:	4b1d      	ldr	r3, [pc, #116]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b44:	4a1c      	ldr	r2, [pc, #112]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007b46:	f043 0301 	orr.w	r3, r3, #1
 8007b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b4c:	4b1a      	ldr	r3, [pc, #104]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a19      	ldr	r2, [pc, #100]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b58:	f7fa f942 	bl	8001de0 <HAL_GetTick>
 8007b5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b5e:	e008      	b.n	8007b72 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b60:	f7fa f93e 	bl	8001de0 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d901      	bls.n	8007b72 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e067      	b.n	8007c42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b72:	4b11      	ldr	r3, [pc, #68]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0f0      	beq.n	8007b60 <HAL_RCC_OscConfig+0x730>
 8007b7e:	e05f      	b.n	8007c40 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b80:	4b0d      	ldr	r3, [pc, #52]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a0c      	ldr	r2, [pc, #48]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b8c:	f7fa f928 	bl	8001de0 <HAL_GetTick>
 8007b90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b92:	e008      	b.n	8007ba6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b94:	f7fa f924 	bl	8001de0 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d901      	bls.n	8007ba6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e04d      	b.n	8007c42 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ba6:	4b04      	ldr	r3, [pc, #16]	; (8007bb8 <HAL_RCC_OscConfig+0x788>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1f0      	bne.n	8007b94 <HAL_RCC_OscConfig+0x764>
 8007bb2:	e045      	b.n	8007c40 <HAL_RCC_OscConfig+0x810>
 8007bb4:	58024800 	.word	0x58024800
 8007bb8:	58024400 	.word	0x58024400
 8007bbc:	fffffc0c 	.word	0xfffffc0c
 8007bc0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007bc4:	4b21      	ldr	r3, [pc, #132]	; (8007c4c <HAL_RCC_OscConfig+0x81c>)
 8007bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007bca:	4b20      	ldr	r3, [pc, #128]	; (8007c4c <HAL_RCC_OscConfig+0x81c>)
 8007bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bce:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d031      	beq.n	8007c3c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	f003 0203 	and.w	r2, r3, #3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d12a      	bne.n	8007c3c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	091b      	lsrs	r3, r3, #4
 8007bea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d122      	bne.n	8007c3c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c00:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d11a      	bne.n	8007c3c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	0a5b      	lsrs	r3, r3, #9
 8007c0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c12:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d111      	bne.n	8007c3c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	0c1b      	lsrs	r3, r3, #16
 8007c1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c24:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d108      	bne.n	8007c3c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	0e1b      	lsrs	r3, r3, #24
 8007c2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c36:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d001      	beq.n	8007c40 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e000      	b.n	8007c42 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3730      	adds	r7, #48	; 0x30
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	58024400 	.word	0x58024400

08007c50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d101      	bne.n	8007c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e19c      	b.n	8007f9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c64:	4b8a      	ldr	r3, [pc, #552]	; (8007e90 <HAL_RCC_ClockConfig+0x240>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 030f 	and.w	r3, r3, #15
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d910      	bls.n	8007c94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c72:	4b87      	ldr	r3, [pc, #540]	; (8007e90 <HAL_RCC_ClockConfig+0x240>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f023 020f 	bic.w	r2, r3, #15
 8007c7a:	4985      	ldr	r1, [pc, #532]	; (8007e90 <HAL_RCC_ClockConfig+0x240>)
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c82:	4b83      	ldr	r3, [pc, #524]	; (8007e90 <HAL_RCC_ClockConfig+0x240>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 030f 	and.w	r3, r3, #15
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d001      	beq.n	8007c94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e184      	b.n	8007f9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0304 	and.w	r3, r3, #4
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d010      	beq.n	8007cc2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	691a      	ldr	r2, [r3, #16]
 8007ca4:	4b7b      	ldr	r3, [pc, #492]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d908      	bls.n	8007cc2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007cb0:	4b78      	ldr	r3, [pc, #480]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	4975      	ldr	r1, [pc, #468]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0308 	and.w	r3, r3, #8
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d010      	beq.n	8007cf0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	695a      	ldr	r2, [r3, #20]
 8007cd2:	4b70      	ldr	r3, [pc, #448]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007cd4:	69db      	ldr	r3, [r3, #28]
 8007cd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d908      	bls.n	8007cf0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007cde:	4b6d      	ldr	r3, [pc, #436]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007ce0:	69db      	ldr	r3, [r3, #28]
 8007ce2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	496a      	ldr	r1, [pc, #424]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007cec:	4313      	orrs	r3, r2
 8007cee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0310 	and.w	r3, r3, #16
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d010      	beq.n	8007d1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	699a      	ldr	r2, [r3, #24]
 8007d00:	4b64      	ldr	r3, [pc, #400]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d908      	bls.n	8007d1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007d0c:	4b61      	ldr	r3, [pc, #388]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007d0e:	69db      	ldr	r3, [r3, #28]
 8007d10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	495e      	ldr	r1, [pc, #376]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0320 	and.w	r3, r3, #32
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d010      	beq.n	8007d4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	69da      	ldr	r2, [r3, #28]
 8007d2e:	4b59      	ldr	r3, [pc, #356]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d908      	bls.n	8007d4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007d3a:	4b56      	ldr	r3, [pc, #344]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	69db      	ldr	r3, [r3, #28]
 8007d46:	4953      	ldr	r1, [pc, #332]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0302 	and.w	r3, r3, #2
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d010      	beq.n	8007d7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	68da      	ldr	r2, [r3, #12]
 8007d5c:	4b4d      	ldr	r3, [pc, #308]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	f003 030f 	and.w	r3, r3, #15
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d908      	bls.n	8007d7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d68:	4b4a      	ldr	r3, [pc, #296]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	f023 020f 	bic.w	r2, r3, #15
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	4947      	ldr	r1, [pc, #284]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007d76:	4313      	orrs	r3, r2
 8007d78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d055      	beq.n	8007e32 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007d86:	4b43      	ldr	r3, [pc, #268]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	4940      	ldr	r1, [pc, #256]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007d94:	4313      	orrs	r3, r2
 8007d96:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d107      	bne.n	8007db0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007da0:	4b3c      	ldr	r3, [pc, #240]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d121      	bne.n	8007df0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e0f6      	b.n	8007f9e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	2b03      	cmp	r3, #3
 8007db6:	d107      	bne.n	8007dc8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007db8:	4b36      	ldr	r3, [pc, #216]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d115      	bne.n	8007df0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e0ea      	b.n	8007f9e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d107      	bne.n	8007de0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007dd0:	4b30      	ldr	r3, [pc, #192]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d109      	bne.n	8007df0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e0de      	b.n	8007f9e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007de0:	4b2c      	ldr	r3, [pc, #176]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0304 	and.w	r3, r3, #4
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e0d6      	b.n	8007f9e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007df0:	4b28      	ldr	r3, [pc, #160]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	f023 0207 	bic.w	r2, r3, #7
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	4925      	ldr	r1, [pc, #148]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e02:	f7f9 ffed 	bl	8001de0 <HAL_GetTick>
 8007e06:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e08:	e00a      	b.n	8007e20 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e0a:	f7f9 ffe9 	bl	8001de0 <HAL_GetTick>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d901      	bls.n	8007e20 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e0be      	b.n	8007f9e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e20:	4b1c      	ldr	r3, [pc, #112]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	00db      	lsls	r3, r3, #3
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d1eb      	bne.n	8007e0a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0302 	and.w	r3, r3, #2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d010      	beq.n	8007e60 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68da      	ldr	r2, [r3, #12]
 8007e42:	4b14      	ldr	r3, [pc, #80]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	f003 030f 	and.w	r3, r3, #15
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d208      	bcs.n	8007e60 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e4e:	4b11      	ldr	r3, [pc, #68]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	f023 020f 	bic.w	r2, r3, #15
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	490e      	ldr	r1, [pc, #56]	; (8007e94 <HAL_RCC_ClockConfig+0x244>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e60:	4b0b      	ldr	r3, [pc, #44]	; (8007e90 <HAL_RCC_ClockConfig+0x240>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 030f 	and.w	r3, r3, #15
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d214      	bcs.n	8007e98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e6e:	4b08      	ldr	r3, [pc, #32]	; (8007e90 <HAL_RCC_ClockConfig+0x240>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f023 020f 	bic.w	r2, r3, #15
 8007e76:	4906      	ldr	r1, [pc, #24]	; (8007e90 <HAL_RCC_ClockConfig+0x240>)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e7e:	4b04      	ldr	r3, [pc, #16]	; (8007e90 <HAL_RCC_ClockConfig+0x240>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 030f 	and.w	r3, r3, #15
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d005      	beq.n	8007e98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e086      	b.n	8007f9e <HAL_RCC_ClockConfig+0x34e>
 8007e90:	52002000 	.word	0x52002000
 8007e94:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0304 	and.w	r3, r3, #4
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d010      	beq.n	8007ec6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	691a      	ldr	r2, [r3, #16]
 8007ea8:	4b3f      	ldr	r3, [pc, #252]	; (8007fa8 <HAL_RCC_ClockConfig+0x358>)
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d208      	bcs.n	8007ec6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007eb4:	4b3c      	ldr	r3, [pc, #240]	; (8007fa8 <HAL_RCC_ClockConfig+0x358>)
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	4939      	ldr	r1, [pc, #228]	; (8007fa8 <HAL_RCC_ClockConfig+0x358>)
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 0308 	and.w	r3, r3, #8
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d010      	beq.n	8007ef4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	695a      	ldr	r2, [r3, #20]
 8007ed6:	4b34      	ldr	r3, [pc, #208]	; (8007fa8 <HAL_RCC_ClockConfig+0x358>)
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d208      	bcs.n	8007ef4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007ee2:	4b31      	ldr	r3, [pc, #196]	; (8007fa8 <HAL_RCC_ClockConfig+0x358>)
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	492e      	ldr	r1, [pc, #184]	; (8007fa8 <HAL_RCC_ClockConfig+0x358>)
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0310 	and.w	r3, r3, #16
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d010      	beq.n	8007f22 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	699a      	ldr	r2, [r3, #24]
 8007f04:	4b28      	ldr	r3, [pc, #160]	; (8007fa8 <HAL_RCC_ClockConfig+0x358>)
 8007f06:	69db      	ldr	r3, [r3, #28]
 8007f08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d208      	bcs.n	8007f22 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f10:	4b25      	ldr	r3, [pc, #148]	; (8007fa8 <HAL_RCC_ClockConfig+0x358>)
 8007f12:	69db      	ldr	r3, [r3, #28]
 8007f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	4922      	ldr	r1, [pc, #136]	; (8007fa8 <HAL_RCC_ClockConfig+0x358>)
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0320 	and.w	r3, r3, #32
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d010      	beq.n	8007f50 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	69da      	ldr	r2, [r3, #28]
 8007f32:	4b1d      	ldr	r3, [pc, #116]	; (8007fa8 <HAL_RCC_ClockConfig+0x358>)
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d208      	bcs.n	8007f50 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007f3e:	4b1a      	ldr	r3, [pc, #104]	; (8007fa8 <HAL_RCC_ClockConfig+0x358>)
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	4917      	ldr	r1, [pc, #92]	; (8007fa8 <HAL_RCC_ClockConfig+0x358>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007f50:	f000 f834 	bl	8007fbc <HAL_RCC_GetSysClockFreq>
 8007f54:	4602      	mov	r2, r0
 8007f56:	4b14      	ldr	r3, [pc, #80]	; (8007fa8 <HAL_RCC_ClockConfig+0x358>)
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	0a1b      	lsrs	r3, r3, #8
 8007f5c:	f003 030f 	and.w	r3, r3, #15
 8007f60:	4912      	ldr	r1, [pc, #72]	; (8007fac <HAL_RCC_ClockConfig+0x35c>)
 8007f62:	5ccb      	ldrb	r3, [r1, r3]
 8007f64:	f003 031f 	and.w	r3, r3, #31
 8007f68:	fa22 f303 	lsr.w	r3, r2, r3
 8007f6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f6e:	4b0e      	ldr	r3, [pc, #56]	; (8007fa8 <HAL_RCC_ClockConfig+0x358>)
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	f003 030f 	and.w	r3, r3, #15
 8007f76:	4a0d      	ldr	r2, [pc, #52]	; (8007fac <HAL_RCC_ClockConfig+0x35c>)
 8007f78:	5cd3      	ldrb	r3, [r2, r3]
 8007f7a:	f003 031f 	and.w	r3, r3, #31
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	fa22 f303 	lsr.w	r3, r2, r3
 8007f84:	4a0a      	ldr	r2, [pc, #40]	; (8007fb0 <HAL_RCC_ClockConfig+0x360>)
 8007f86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f88:	4a0a      	ldr	r2, [pc, #40]	; (8007fb4 <HAL_RCC_ClockConfig+0x364>)
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007f8e:	4b0a      	ldr	r3, [pc, #40]	; (8007fb8 <HAL_RCC_ClockConfig+0x368>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7f9 feda 	bl	8001d4c <HAL_InitTick>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	58024400 	.word	0x58024400
 8007fac:	08011f4c 	.word	0x08011f4c
 8007fb0:	24000004 	.word	0x24000004
 8007fb4:	24000000 	.word	0x24000000
 8007fb8:	24000008 	.word	0x24000008

08007fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b089      	sub	sp, #36	; 0x24
 8007fc0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007fc2:	4bb3      	ldr	r3, [pc, #716]	; (8008290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fca:	2b18      	cmp	r3, #24
 8007fcc:	f200 8155 	bhi.w	800827a <HAL_RCC_GetSysClockFreq+0x2be>
 8007fd0:	a201      	add	r2, pc, #4	; (adr r2, 8007fd8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd6:	bf00      	nop
 8007fd8:	0800803d 	.word	0x0800803d
 8007fdc:	0800827b 	.word	0x0800827b
 8007fe0:	0800827b 	.word	0x0800827b
 8007fe4:	0800827b 	.word	0x0800827b
 8007fe8:	0800827b 	.word	0x0800827b
 8007fec:	0800827b 	.word	0x0800827b
 8007ff0:	0800827b 	.word	0x0800827b
 8007ff4:	0800827b 	.word	0x0800827b
 8007ff8:	08008063 	.word	0x08008063
 8007ffc:	0800827b 	.word	0x0800827b
 8008000:	0800827b 	.word	0x0800827b
 8008004:	0800827b 	.word	0x0800827b
 8008008:	0800827b 	.word	0x0800827b
 800800c:	0800827b 	.word	0x0800827b
 8008010:	0800827b 	.word	0x0800827b
 8008014:	0800827b 	.word	0x0800827b
 8008018:	08008069 	.word	0x08008069
 800801c:	0800827b 	.word	0x0800827b
 8008020:	0800827b 	.word	0x0800827b
 8008024:	0800827b 	.word	0x0800827b
 8008028:	0800827b 	.word	0x0800827b
 800802c:	0800827b 	.word	0x0800827b
 8008030:	0800827b 	.word	0x0800827b
 8008034:	0800827b 	.word	0x0800827b
 8008038:	0800806f 	.word	0x0800806f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800803c:	4b94      	ldr	r3, [pc, #592]	; (8008290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 0320 	and.w	r3, r3, #32
 8008044:	2b00      	cmp	r3, #0
 8008046:	d009      	beq.n	800805c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008048:	4b91      	ldr	r3, [pc, #580]	; (8008290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	08db      	lsrs	r3, r3, #3
 800804e:	f003 0303 	and.w	r3, r3, #3
 8008052:	4a90      	ldr	r2, [pc, #576]	; (8008294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008054:	fa22 f303 	lsr.w	r3, r2, r3
 8008058:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800805a:	e111      	b.n	8008280 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800805c:	4b8d      	ldr	r3, [pc, #564]	; (8008294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800805e:	61bb      	str	r3, [r7, #24]
    break;
 8008060:	e10e      	b.n	8008280 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008062:	4b8d      	ldr	r3, [pc, #564]	; (8008298 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008064:	61bb      	str	r3, [r7, #24]
    break;
 8008066:	e10b      	b.n	8008280 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008068:	4b8c      	ldr	r3, [pc, #560]	; (800829c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800806a:	61bb      	str	r3, [r7, #24]
    break;
 800806c:	e108      	b.n	8008280 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800806e:	4b88      	ldr	r3, [pc, #544]	; (8008290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008078:	4b85      	ldr	r3, [pc, #532]	; (8008290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800807a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807c:	091b      	lsrs	r3, r3, #4
 800807e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008082:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008084:	4b82      	ldr	r3, [pc, #520]	; (8008290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800808e:	4b80      	ldr	r3, [pc, #512]	; (8008290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008092:	08db      	lsrs	r3, r3, #3
 8008094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	fb02 f303 	mul.w	r3, r2, r3
 800809e:	ee07 3a90 	vmov	s15, r3
 80080a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f000 80e1 	beq.w	8008274 <HAL_RCC_GetSysClockFreq+0x2b8>
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	f000 8083 	beq.w	80081c0 <HAL_RCC_GetSysClockFreq+0x204>
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	2b02      	cmp	r3, #2
 80080be:	f200 80a1 	bhi.w	8008204 <HAL_RCC_GetSysClockFreq+0x248>
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d003      	beq.n	80080d0 <HAL_RCC_GetSysClockFreq+0x114>
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d056      	beq.n	800817c <HAL_RCC_GetSysClockFreq+0x1c0>
 80080ce:	e099      	b.n	8008204 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080d0:	4b6f      	ldr	r3, [pc, #444]	; (8008290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 0320 	and.w	r3, r3, #32
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d02d      	beq.n	8008138 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080dc:	4b6c      	ldr	r3, [pc, #432]	; (8008290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	08db      	lsrs	r3, r3, #3
 80080e2:	f003 0303 	and.w	r3, r3, #3
 80080e6:	4a6b      	ldr	r2, [pc, #428]	; (8008294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80080e8:	fa22 f303 	lsr.w	r3, r2, r3
 80080ec:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	ee07 3a90 	vmov	s15, r3
 80080f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	ee07 3a90 	vmov	s15, r3
 80080fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008106:	4b62      	ldr	r3, [pc, #392]	; (8008290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800810e:	ee07 3a90 	vmov	s15, r3
 8008112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008116:	ed97 6a02 	vldr	s12, [r7, #8]
 800811a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80082a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800811e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800812a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800812e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008132:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008136:	e087      	b.n	8008248 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	ee07 3a90 	vmov	s15, r3
 800813e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008142:	eddf 6a58 	vldr	s13, [pc, #352]	; 80082a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800814a:	4b51      	ldr	r3, [pc, #324]	; (8008290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800814c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008152:	ee07 3a90 	vmov	s15, r3
 8008156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800815a:	ed97 6a02 	vldr	s12, [r7, #8]
 800815e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80082a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800816a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800816e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008176:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800817a:	e065      	b.n	8008248 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	ee07 3a90 	vmov	s15, r3
 8008182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008186:	eddf 6a48 	vldr	s13, [pc, #288]	; 80082a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800818a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800818e:	4b40      	ldr	r3, [pc, #256]	; (8008290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008196:	ee07 3a90 	vmov	s15, r3
 800819a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800819e:	ed97 6a02 	vldr	s12, [r7, #8]
 80081a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80082a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80081a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081be:	e043      	b.n	8008248 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	ee07 3a90 	vmov	s15, r3
 80081c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80082ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80081ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081d2:	4b2f      	ldr	r3, [pc, #188]	; (8008290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081da:	ee07 3a90 	vmov	s15, r3
 80081de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80081e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80082a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80081ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008202:	e021      	b.n	8008248 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	ee07 3a90 	vmov	s15, r3
 800820a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800820e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80082a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008216:	4b1e      	ldr	r3, [pc, #120]	; (8008290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800821e:	ee07 3a90 	vmov	s15, r3
 8008222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008226:	ed97 6a02 	vldr	s12, [r7, #8]
 800822a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80082a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800822e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800823a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800823e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008246:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008248:	4b11      	ldr	r3, [pc, #68]	; (8008290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800824a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824c:	0a5b      	lsrs	r3, r3, #9
 800824e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008252:	3301      	adds	r3, #1
 8008254:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	ee07 3a90 	vmov	s15, r3
 800825c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008260:	edd7 6a07 	vldr	s13, [r7, #28]
 8008264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800826c:	ee17 3a90 	vmov	r3, s15
 8008270:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008272:	e005      	b.n	8008280 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	61bb      	str	r3, [r7, #24]
    break;
 8008278:	e002      	b.n	8008280 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800827a:	4b07      	ldr	r3, [pc, #28]	; (8008298 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800827c:	61bb      	str	r3, [r7, #24]
    break;
 800827e:	bf00      	nop
  }

  return sysclockfreq;
 8008280:	69bb      	ldr	r3, [r7, #24]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3724      	adds	r7, #36	; 0x24
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	58024400 	.word	0x58024400
 8008294:	03d09000 	.word	0x03d09000
 8008298:	003d0900 	.word	0x003d0900
 800829c:	007a1200 	.word	0x007a1200
 80082a0:	46000000 	.word	0x46000000
 80082a4:	4c742400 	.word	0x4c742400
 80082a8:	4a742400 	.word	0x4a742400
 80082ac:	4af42400 	.word	0x4af42400

080082b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80082b6:	f7ff fe81 	bl	8007fbc <HAL_RCC_GetSysClockFreq>
 80082ba:	4602      	mov	r2, r0
 80082bc:	4b10      	ldr	r3, [pc, #64]	; (8008300 <HAL_RCC_GetHCLKFreq+0x50>)
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	0a1b      	lsrs	r3, r3, #8
 80082c2:	f003 030f 	and.w	r3, r3, #15
 80082c6:	490f      	ldr	r1, [pc, #60]	; (8008304 <HAL_RCC_GetHCLKFreq+0x54>)
 80082c8:	5ccb      	ldrb	r3, [r1, r3]
 80082ca:	f003 031f 	and.w	r3, r3, #31
 80082ce:	fa22 f303 	lsr.w	r3, r2, r3
 80082d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80082d4:	4b0a      	ldr	r3, [pc, #40]	; (8008300 <HAL_RCC_GetHCLKFreq+0x50>)
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	f003 030f 	and.w	r3, r3, #15
 80082dc:	4a09      	ldr	r2, [pc, #36]	; (8008304 <HAL_RCC_GetHCLKFreq+0x54>)
 80082de:	5cd3      	ldrb	r3, [r2, r3]
 80082e0:	f003 031f 	and.w	r3, r3, #31
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	fa22 f303 	lsr.w	r3, r2, r3
 80082ea:	4a07      	ldr	r2, [pc, #28]	; (8008308 <HAL_RCC_GetHCLKFreq+0x58>)
 80082ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80082ee:	4a07      	ldr	r2, [pc, #28]	; (800830c <HAL_RCC_GetHCLKFreq+0x5c>)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80082f4:	4b04      	ldr	r3, [pc, #16]	; (8008308 <HAL_RCC_GetHCLKFreq+0x58>)
 80082f6:	681b      	ldr	r3, [r3, #0]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	58024400 	.word	0x58024400
 8008304:	08011f4c 	.word	0x08011f4c
 8008308:	24000004 	.word	0x24000004
 800830c:	24000000 	.word	0x24000000

08008310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008314:	f7ff ffcc 	bl	80082b0 <HAL_RCC_GetHCLKFreq>
 8008318:	4602      	mov	r2, r0
 800831a:	4b06      	ldr	r3, [pc, #24]	; (8008334 <HAL_RCC_GetPCLK1Freq+0x24>)
 800831c:	69db      	ldr	r3, [r3, #28]
 800831e:	091b      	lsrs	r3, r3, #4
 8008320:	f003 0307 	and.w	r3, r3, #7
 8008324:	4904      	ldr	r1, [pc, #16]	; (8008338 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008326:	5ccb      	ldrb	r3, [r1, r3]
 8008328:	f003 031f 	and.w	r3, r3, #31
 800832c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008330:	4618      	mov	r0, r3
 8008332:	bd80      	pop	{r7, pc}
 8008334:	58024400 	.word	0x58024400
 8008338:	08011f4c 	.word	0x08011f4c

0800833c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008340:	f7ff ffb6 	bl	80082b0 <HAL_RCC_GetHCLKFreq>
 8008344:	4602      	mov	r2, r0
 8008346:	4b06      	ldr	r3, [pc, #24]	; (8008360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008348:	69db      	ldr	r3, [r3, #28]
 800834a:	0a1b      	lsrs	r3, r3, #8
 800834c:	f003 0307 	and.w	r3, r3, #7
 8008350:	4904      	ldr	r1, [pc, #16]	; (8008364 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008352:	5ccb      	ldrb	r3, [r1, r3]
 8008354:	f003 031f 	and.w	r3, r3, #31
 8008358:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800835c:	4618      	mov	r0, r3
 800835e:	bd80      	pop	{r7, pc}
 8008360:	58024400 	.word	0x58024400
 8008364:	08011f4c 	.word	0x08011f4c

08008368 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008370:	2300      	movs	r3, #0
 8008372:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008374:	2300      	movs	r3, #0
 8008376:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008380:	2b00      	cmp	r3, #0
 8008382:	d03f      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008388:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800838c:	d02a      	beq.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800838e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008392:	d824      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008394:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008398:	d018      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800839a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800839e:	d81e      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d003      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 80083a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083a8:	d007      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80083aa:	e018      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083ac:	4bab      	ldr	r3, [pc, #684]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b0:	4aaa      	ldr	r2, [pc, #680]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80083b8:	e015      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	3304      	adds	r3, #4
 80083be:	2102      	movs	r1, #2
 80083c0:	4618      	mov	r0, r3
 80083c2:	f001 f9cf 	bl	8009764 <RCCEx_PLL2_Config>
 80083c6:	4603      	mov	r3, r0
 80083c8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80083ca:	e00c      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	3324      	adds	r3, #36	; 0x24
 80083d0:	2102      	movs	r1, #2
 80083d2:	4618      	mov	r0, r3
 80083d4:	f001 fa78 	bl	80098c8 <RCCEx_PLL3_Config>
 80083d8:	4603      	mov	r3, r0
 80083da:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80083dc:	e003      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	75fb      	strb	r3, [r7, #23]
      break;
 80083e2:	e000      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80083e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083e6:	7dfb      	ldrb	r3, [r7, #23]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d109      	bne.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80083ec:	4b9b      	ldr	r3, [pc, #620]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083f8:	4998      	ldr	r1, [pc, #608]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	650b      	str	r3, [r1, #80]	; 0x50
 80083fe:	e001      	b.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008400:	7dfb      	ldrb	r3, [r7, #23]
 8008402:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800840c:	2b00      	cmp	r3, #0
 800840e:	d03d      	beq.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008414:	2b04      	cmp	r3, #4
 8008416:	d826      	bhi.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008418:	a201      	add	r2, pc, #4	; (adr r2, 8008420 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800841a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841e:	bf00      	nop
 8008420:	08008435 	.word	0x08008435
 8008424:	08008443 	.word	0x08008443
 8008428:	08008455 	.word	0x08008455
 800842c:	0800846d 	.word	0x0800846d
 8008430:	0800846d 	.word	0x0800846d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008434:	4b89      	ldr	r3, [pc, #548]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008438:	4a88      	ldr	r2, [pc, #544]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800843a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800843e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008440:	e015      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	3304      	adds	r3, #4
 8008446:	2100      	movs	r1, #0
 8008448:	4618      	mov	r0, r3
 800844a:	f001 f98b 	bl	8009764 <RCCEx_PLL2_Config>
 800844e:	4603      	mov	r3, r0
 8008450:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008452:	e00c      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3324      	adds	r3, #36	; 0x24
 8008458:	2100      	movs	r1, #0
 800845a:	4618      	mov	r0, r3
 800845c:	f001 fa34 	bl	80098c8 <RCCEx_PLL3_Config>
 8008460:	4603      	mov	r3, r0
 8008462:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008464:	e003      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	75fb      	strb	r3, [r7, #23]
      break;
 800846a:	e000      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800846c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800846e:	7dfb      	ldrb	r3, [r7, #23]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d109      	bne.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008474:	4b79      	ldr	r3, [pc, #484]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008478:	f023 0207 	bic.w	r2, r3, #7
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008480:	4976      	ldr	r1, [pc, #472]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008482:	4313      	orrs	r3, r2
 8008484:	650b      	str	r3, [r1, #80]	; 0x50
 8008486:	e001      	b.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008488:	7dfb      	ldrb	r3, [r7, #23]
 800848a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008494:	2b00      	cmp	r3, #0
 8008496:	d042      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800849c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084a0:	d02b      	beq.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x192>
 80084a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084a6:	d825      	bhi.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80084a8:	2bc0      	cmp	r3, #192	; 0xc0
 80084aa:	d028      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x196>
 80084ac:	2bc0      	cmp	r3, #192	; 0xc0
 80084ae:	d821      	bhi.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80084b0:	2b80      	cmp	r3, #128	; 0x80
 80084b2:	d016      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80084b4:	2b80      	cmp	r3, #128	; 0x80
 80084b6:	d81d      	bhi.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80084bc:	2b40      	cmp	r3, #64	; 0x40
 80084be:	d007      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80084c0:	e018      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084c2:	4b66      	ldr	r3, [pc, #408]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c6:	4a65      	ldr	r2, [pc, #404]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80084ce:	e017      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	3304      	adds	r3, #4
 80084d4:	2100      	movs	r1, #0
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 f944 	bl	8009764 <RCCEx_PLL2_Config>
 80084dc:	4603      	mov	r3, r0
 80084de:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80084e0:	e00e      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	3324      	adds	r3, #36	; 0x24
 80084e6:	2100      	movs	r1, #0
 80084e8:	4618      	mov	r0, r3
 80084ea:	f001 f9ed 	bl	80098c8 <RCCEx_PLL3_Config>
 80084ee:	4603      	mov	r3, r0
 80084f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80084f2:	e005      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	75fb      	strb	r3, [r7, #23]
      break;
 80084f8:	e002      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80084fa:	bf00      	nop
 80084fc:	e000      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80084fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008500:	7dfb      	ldrb	r3, [r7, #23]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d109      	bne.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008506:	4b55      	ldr	r3, [pc, #340]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800850a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008512:	4952      	ldr	r1, [pc, #328]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008514:	4313      	orrs	r3, r2
 8008516:	650b      	str	r3, [r1, #80]	; 0x50
 8008518:	e001      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800851a:	7dfb      	ldrb	r3, [r7, #23]
 800851c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008526:	2b00      	cmp	r3, #0
 8008528:	d049      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008530:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008534:	d030      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008536:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800853a:	d82a      	bhi.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800853c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008540:	d02c      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008542:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008546:	d824      	bhi.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008548:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800854c:	d018      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800854e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008552:	d81e      	bhi.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008554:	2b00      	cmp	r3, #0
 8008556:	d003      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008558:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800855c:	d007      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800855e:	e018      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008560:	4b3e      	ldr	r3, [pc, #248]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008564:	4a3d      	ldr	r2, [pc, #244]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800856a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800856c:	e017      	b.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	3304      	adds	r3, #4
 8008572:	2100      	movs	r1, #0
 8008574:	4618      	mov	r0, r3
 8008576:	f001 f8f5 	bl	8009764 <RCCEx_PLL2_Config>
 800857a:	4603      	mov	r3, r0
 800857c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800857e:	e00e      	b.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	3324      	adds	r3, #36	; 0x24
 8008584:	2100      	movs	r1, #0
 8008586:	4618      	mov	r0, r3
 8008588:	f001 f99e 	bl	80098c8 <RCCEx_PLL3_Config>
 800858c:	4603      	mov	r3, r0
 800858e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008590:	e005      	b.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	75fb      	strb	r3, [r7, #23]
      break;
 8008596:	e002      	b.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008598:	bf00      	nop
 800859a:	e000      	b.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800859c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800859e:	7dfb      	ldrb	r3, [r7, #23]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10a      	bne.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80085a4:	4b2d      	ldr	r3, [pc, #180]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80085b2:	492a      	ldr	r1, [pc, #168]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	658b      	str	r3, [r1, #88]	; 0x58
 80085b8:	e001      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
 80085bc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d04c      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80085d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085d4:	d030      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80085d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085da:	d82a      	bhi.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80085dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80085e0:	d02c      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80085e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80085e6:	d824      	bhi.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80085e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085ec:	d018      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80085ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085f2:	d81e      	bhi.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d003      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80085f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085fc:	d007      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80085fe:	e018      	b.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008600:	4b16      	ldr	r3, [pc, #88]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	4a15      	ldr	r2, [pc, #84]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800860a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800860c:	e017      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	3304      	adds	r3, #4
 8008612:	2100      	movs	r1, #0
 8008614:	4618      	mov	r0, r3
 8008616:	f001 f8a5 	bl	8009764 <RCCEx_PLL2_Config>
 800861a:	4603      	mov	r3, r0
 800861c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800861e:	e00e      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3324      	adds	r3, #36	; 0x24
 8008624:	2100      	movs	r1, #0
 8008626:	4618      	mov	r0, r3
 8008628:	f001 f94e 	bl	80098c8 <RCCEx_PLL3_Config>
 800862c:	4603      	mov	r3, r0
 800862e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008630:	e005      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	75fb      	strb	r3, [r7, #23]
      break;
 8008636:	e002      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008638:	bf00      	nop
 800863a:	e000      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800863c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800863e:	7dfb      	ldrb	r3, [r7, #23]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10d      	bne.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008644:	4b05      	ldr	r3, [pc, #20]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008648:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008652:	4902      	ldr	r1, [pc, #8]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008654:	4313      	orrs	r3, r2
 8008656:	658b      	str	r3, [r1, #88]	; 0x58
 8008658:	e004      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800865a:	bf00      	nop
 800865c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008660:	7dfb      	ldrb	r3, [r7, #23]
 8008662:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d032      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008674:	2b30      	cmp	r3, #48	; 0x30
 8008676:	d01c      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008678:	2b30      	cmp	r3, #48	; 0x30
 800867a:	d817      	bhi.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x344>
 800867c:	2b20      	cmp	r3, #32
 800867e:	d00c      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008680:	2b20      	cmp	r3, #32
 8008682:	d813      	bhi.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008684:	2b00      	cmp	r3, #0
 8008686:	d016      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008688:	2b10      	cmp	r3, #16
 800868a:	d10f      	bne.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800868c:	4baf      	ldr	r3, [pc, #700]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800868e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008690:	4aae      	ldr	r2, [pc, #696]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008696:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008698:	e00e      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	3304      	adds	r3, #4
 800869e:	2102      	movs	r1, #2
 80086a0:	4618      	mov	r0, r3
 80086a2:	f001 f85f 	bl	8009764 <RCCEx_PLL2_Config>
 80086a6:	4603      	mov	r3, r0
 80086a8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80086aa:	e005      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	75fb      	strb	r3, [r7, #23]
      break;
 80086b0:	e002      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80086b2:	bf00      	nop
 80086b4:	e000      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80086b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086b8:	7dfb      	ldrb	r3, [r7, #23]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d109      	bne.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80086be:	4ba3      	ldr	r3, [pc, #652]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80086c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086ca:	49a0      	ldr	r1, [pc, #640]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80086cc:	4313      	orrs	r3, r2
 80086ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 80086d0:	e001      	b.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d2:	7dfb      	ldrb	r3, [r7, #23]
 80086d4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d047      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086ea:	d030      	beq.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80086ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086f0:	d82a      	bhi.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80086f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086f6:	d02c      	beq.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80086f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086fc:	d824      	bhi.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80086fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008702:	d018      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8008704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008708:	d81e      	bhi.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800870a:	2b00      	cmp	r3, #0
 800870c:	d003      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800870e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008712:	d007      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008714:	e018      	b.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008716:	4b8d      	ldr	r3, [pc, #564]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871a:	4a8c      	ldr	r2, [pc, #560]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800871c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008720:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008722:	e017      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3304      	adds	r3, #4
 8008728:	2100      	movs	r1, #0
 800872a:	4618      	mov	r0, r3
 800872c:	f001 f81a 	bl	8009764 <RCCEx_PLL2_Config>
 8008730:	4603      	mov	r3, r0
 8008732:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008734:	e00e      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	3324      	adds	r3, #36	; 0x24
 800873a:	2100      	movs	r1, #0
 800873c:	4618      	mov	r0, r3
 800873e:	f001 f8c3 	bl	80098c8 <RCCEx_PLL3_Config>
 8008742:	4603      	mov	r3, r0
 8008744:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008746:	e005      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	75fb      	strb	r3, [r7, #23]
      break;
 800874c:	e002      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800874e:	bf00      	nop
 8008750:	e000      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008752:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008754:	7dfb      	ldrb	r3, [r7, #23]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d109      	bne.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800875a:	4b7c      	ldr	r3, [pc, #496]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800875c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800875e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008766:	4979      	ldr	r1, [pc, #484]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008768:	4313      	orrs	r3, r2
 800876a:	650b      	str	r3, [r1, #80]	; 0x50
 800876c:	e001      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800876e:	7dfb      	ldrb	r3, [r7, #23]
 8008770:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800877a:	2b00      	cmp	r3, #0
 800877c:	d049      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008782:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008786:	d02e      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800878c:	d828      	bhi.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800878e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008792:	d02a      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008794:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008798:	d822      	bhi.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800879a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800879e:	d026      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x486>
 80087a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80087a4:	d81c      	bhi.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80087a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087aa:	d010      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x466>
 80087ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087b0:	d816      	bhi.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d01d      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80087b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087ba:	d111      	bne.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	3304      	adds	r3, #4
 80087c0:	2101      	movs	r1, #1
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 ffce 	bl	8009764 <RCCEx_PLL2_Config>
 80087c8:	4603      	mov	r3, r0
 80087ca:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80087cc:	e012      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	3324      	adds	r3, #36	; 0x24
 80087d2:	2101      	movs	r1, #1
 80087d4:	4618      	mov	r0, r3
 80087d6:	f001 f877 	bl	80098c8 <RCCEx_PLL3_Config>
 80087da:	4603      	mov	r3, r0
 80087dc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80087de:	e009      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	75fb      	strb	r3, [r7, #23]
      break;
 80087e4:	e006      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80087e6:	bf00      	nop
 80087e8:	e004      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80087ea:	bf00      	nop
 80087ec:	e002      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80087ee:	bf00      	nop
 80087f0:	e000      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80087f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087f4:	7dfb      	ldrb	r3, [r7, #23]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d109      	bne.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80087fa:	4b54      	ldr	r3, [pc, #336]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80087fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087fe:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008806:	4951      	ldr	r1, [pc, #324]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008808:	4313      	orrs	r3, r2
 800880a:	650b      	str	r3, [r1, #80]	; 0x50
 800880c:	e001      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800880e:	7dfb      	ldrb	r3, [r7, #23]
 8008810:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d04b      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008828:	d02e      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800882a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800882e:	d828      	bhi.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008834:	d02a      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800883a:	d822      	bhi.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800883c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008840:	d026      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008842:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008846:	d81c      	bhi.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800884c:	d010      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800884e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008852:	d816      	bhi.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008854:	2b00      	cmp	r3, #0
 8008856:	d01d      	beq.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008858:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800885c:	d111      	bne.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	3304      	adds	r3, #4
 8008862:	2101      	movs	r1, #1
 8008864:	4618      	mov	r0, r3
 8008866:	f000 ff7d 	bl	8009764 <RCCEx_PLL2_Config>
 800886a:	4603      	mov	r3, r0
 800886c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800886e:	e012      	b.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	3324      	adds	r3, #36	; 0x24
 8008874:	2101      	movs	r1, #1
 8008876:	4618      	mov	r0, r3
 8008878:	f001 f826 	bl	80098c8 <RCCEx_PLL3_Config>
 800887c:	4603      	mov	r3, r0
 800887e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008880:	e009      	b.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	75fb      	strb	r3, [r7, #23]
      break;
 8008886:	e006      	b.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008888:	bf00      	nop
 800888a:	e004      	b.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800888c:	bf00      	nop
 800888e:	e002      	b.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008890:	bf00      	nop
 8008892:	e000      	b.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008894:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008896:	7dfb      	ldrb	r3, [r7, #23]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10a      	bne.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800889c:	4b2b      	ldr	r3, [pc, #172]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800889e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088a0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80088aa:	4928      	ldr	r1, [pc, #160]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80088ac:	4313      	orrs	r3, r2
 80088ae:	658b      	str	r3, [r1, #88]	; 0x58
 80088b0:	e001      	b.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
 80088b4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d02f      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088ca:	d00e      	beq.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x582>
 80088cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088d0:	d814      	bhi.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x594>
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d015      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80088d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088da:	d10f      	bne.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088dc:	4b1b      	ldr	r3, [pc, #108]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80088de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e0:	4a1a      	ldr	r2, [pc, #104]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80088e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80088e8:	e00c      	b.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	3304      	adds	r3, #4
 80088ee:	2101      	movs	r1, #1
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 ff37 	bl	8009764 <RCCEx_PLL2_Config>
 80088f6:	4603      	mov	r3, r0
 80088f8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80088fa:	e003      	b.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008900:	e000      	b.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8008902:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008904:	7dfb      	ldrb	r3, [r7, #23]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d109      	bne.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800890a:	4b10      	ldr	r3, [pc, #64]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800890c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800890e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008916:	490d      	ldr	r1, [pc, #52]	; (800894c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008918:	4313      	orrs	r3, r2
 800891a:	650b      	str	r3, [r1, #80]	; 0x50
 800891c:	e001      	b.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800891e:	7dfb      	ldrb	r3, [r7, #23]
 8008920:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800892a:	2b00      	cmp	r3, #0
 800892c:	d033      	beq.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008932:	2b03      	cmp	r3, #3
 8008934:	d81c      	bhi.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008936:	a201      	add	r2, pc, #4	; (adr r2, 800893c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8008938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893c:	08008977 	.word	0x08008977
 8008940:	08008951 	.word	0x08008951
 8008944:	0800895f 	.word	0x0800895f
 8008948:	08008977 	.word	0x08008977
 800894c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008950:	4bb8      	ldr	r3, [pc, #736]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008954:	4ab7      	ldr	r2, [pc, #732]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800895a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800895c:	e00c      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	3304      	adds	r3, #4
 8008962:	2102      	movs	r1, #2
 8008964:	4618      	mov	r0, r3
 8008966:	f000 fefd 	bl	8009764 <RCCEx_PLL2_Config>
 800896a:	4603      	mov	r3, r0
 800896c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800896e:	e003      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	75fb      	strb	r3, [r7, #23]
      break;
 8008974:	e000      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008976:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008978:	7dfb      	ldrb	r3, [r7, #23]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d109      	bne.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800897e:	4bad      	ldr	r3, [pc, #692]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008982:	f023 0203 	bic.w	r2, r3, #3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800898a:	49aa      	ldr	r1, [pc, #680]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800898c:	4313      	orrs	r3, r2
 800898e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008990:	e001      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008992:	7dfb      	ldrb	r3, [r7, #23]
 8008994:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f000 8086 	beq.w	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089a4:	4ba4      	ldr	r3, [pc, #656]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4aa3      	ldr	r2, [pc, #652]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80089aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80089b0:	f7f9 fa16 	bl	8001de0 <HAL_GetTick>
 80089b4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80089b6:	e009      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089b8:	f7f9 fa12 	bl	8001de0 <HAL_GetTick>
 80089bc:	4602      	mov	r2, r0
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	2b64      	cmp	r3, #100	; 0x64
 80089c4:	d902      	bls.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80089c6:	2303      	movs	r3, #3
 80089c8:	75fb      	strb	r3, [r7, #23]
        break;
 80089ca:	e005      	b.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80089cc:	4b9a      	ldr	r3, [pc, #616]	; (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d0ef      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80089d8:	7dfb      	ldrb	r3, [r7, #23]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d166      	bne.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80089de:	4b95      	ldr	r3, [pc, #596]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089e8:	4053      	eors	r3, r2
 80089ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d013      	beq.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80089f2:	4b90      	ldr	r3, [pc, #576]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089fa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80089fc:	4b8d      	ldr	r3, [pc, #564]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a00:	4a8c      	ldr	r2, [pc, #560]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a06:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008a08:	4b8a      	ldr	r3, [pc, #552]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a0c:	4a89      	ldr	r2, [pc, #548]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a12:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008a14:	4a87      	ldr	r2, [pc, #540]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a24:	d115      	bne.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a26:	f7f9 f9db 	bl	8001de0 <HAL_GetTick>
 8008a2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a2c:	e00b      	b.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a2e:	f7f9 f9d7 	bl	8001de0 <HAL_GetTick>
 8008a32:	4602      	mov	r2, r0
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	1ad3      	subs	r3, r2, r3
 8008a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d902      	bls.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	75fb      	strb	r3, [r7, #23]
            break;
 8008a44:	e005      	b.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a46:	4b7b      	ldr	r3, [pc, #492]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a4a:	f003 0302 	and.w	r3, r3, #2
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d0ed      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008a52:	7dfb      	ldrb	r3, [r7, #23]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d126      	bne.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a66:	d10d      	bne.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008a68:	4b72      	ldr	r3, [pc, #456]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a76:	0919      	lsrs	r1, r3, #4
 8008a78:	4b70      	ldr	r3, [pc, #448]	; (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8008a7a:	400b      	ands	r3, r1
 8008a7c:	496d      	ldr	r1, [pc, #436]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	610b      	str	r3, [r1, #16]
 8008a82:	e005      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008a84:	4b6b      	ldr	r3, [pc, #428]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	4a6a      	ldr	r2, [pc, #424]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a8a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008a8e:	6113      	str	r3, [r2, #16]
 8008a90:	4b68      	ldr	r3, [pc, #416]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a9e:	4965      	ldr	r1, [pc, #404]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	670b      	str	r3, [r1, #112]	; 0x70
 8008aa4:	e004      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008aa6:	7dfb      	ldrb	r3, [r7, #23]
 8008aa8:	75bb      	strb	r3, [r7, #22]
 8008aaa:	e001      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aac:	7dfb      	ldrb	r3, [r7, #23]
 8008aae:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0301 	and.w	r3, r3, #1
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d07e      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ac0:	2b28      	cmp	r3, #40	; 0x28
 8008ac2:	d867      	bhi.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008ac4:	a201      	add	r2, pc, #4	; (adr r2, 8008acc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aca:	bf00      	nop
 8008acc:	08008b9b 	.word	0x08008b9b
 8008ad0:	08008b95 	.word	0x08008b95
 8008ad4:	08008b95 	.word	0x08008b95
 8008ad8:	08008b95 	.word	0x08008b95
 8008adc:	08008b95 	.word	0x08008b95
 8008ae0:	08008b95 	.word	0x08008b95
 8008ae4:	08008b95 	.word	0x08008b95
 8008ae8:	08008b95 	.word	0x08008b95
 8008aec:	08008b71 	.word	0x08008b71
 8008af0:	08008b95 	.word	0x08008b95
 8008af4:	08008b95 	.word	0x08008b95
 8008af8:	08008b95 	.word	0x08008b95
 8008afc:	08008b95 	.word	0x08008b95
 8008b00:	08008b95 	.word	0x08008b95
 8008b04:	08008b95 	.word	0x08008b95
 8008b08:	08008b95 	.word	0x08008b95
 8008b0c:	08008b83 	.word	0x08008b83
 8008b10:	08008b95 	.word	0x08008b95
 8008b14:	08008b95 	.word	0x08008b95
 8008b18:	08008b95 	.word	0x08008b95
 8008b1c:	08008b95 	.word	0x08008b95
 8008b20:	08008b95 	.word	0x08008b95
 8008b24:	08008b95 	.word	0x08008b95
 8008b28:	08008b95 	.word	0x08008b95
 8008b2c:	08008b9b 	.word	0x08008b9b
 8008b30:	08008b95 	.word	0x08008b95
 8008b34:	08008b95 	.word	0x08008b95
 8008b38:	08008b95 	.word	0x08008b95
 8008b3c:	08008b95 	.word	0x08008b95
 8008b40:	08008b95 	.word	0x08008b95
 8008b44:	08008b95 	.word	0x08008b95
 8008b48:	08008b95 	.word	0x08008b95
 8008b4c:	08008b9b 	.word	0x08008b9b
 8008b50:	08008b95 	.word	0x08008b95
 8008b54:	08008b95 	.word	0x08008b95
 8008b58:	08008b95 	.word	0x08008b95
 8008b5c:	08008b95 	.word	0x08008b95
 8008b60:	08008b95 	.word	0x08008b95
 8008b64:	08008b95 	.word	0x08008b95
 8008b68:	08008b95 	.word	0x08008b95
 8008b6c:	08008b9b 	.word	0x08008b9b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	3304      	adds	r3, #4
 8008b74:	2101      	movs	r1, #1
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 fdf4 	bl	8009764 <RCCEx_PLL2_Config>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008b80:	e00c      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	3324      	adds	r3, #36	; 0x24
 8008b86:	2101      	movs	r1, #1
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f000 fe9d 	bl	80098c8 <RCCEx_PLL3_Config>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008b92:	e003      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	75fb      	strb	r3, [r7, #23]
      break;
 8008b98:	e000      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8008b9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d109      	bne.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008ba2:	4b24      	ldr	r3, [pc, #144]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ba6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008bae:	4921      	ldr	r1, [pc, #132]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	654b      	str	r3, [r1, #84]	; 0x54
 8008bb4:	e001      	b.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb6:	7dfb      	ldrb	r3, [r7, #23]
 8008bb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 0302 	and.w	r3, r3, #2
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d03e      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bca:	2b05      	cmp	r3, #5
 8008bcc:	d820      	bhi.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8008bce:	a201      	add	r2, pc, #4	; (adr r2, 8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd4:	08008c17 	.word	0x08008c17
 8008bd8:	08008bed 	.word	0x08008bed
 8008bdc:	08008bff 	.word	0x08008bff
 8008be0:	08008c17 	.word	0x08008c17
 8008be4:	08008c17 	.word	0x08008c17
 8008be8:	08008c17 	.word	0x08008c17
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	3304      	adds	r3, #4
 8008bf0:	2101      	movs	r1, #1
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 fdb6 	bl	8009764 <RCCEx_PLL2_Config>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008bfc:	e00c      	b.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	3324      	adds	r3, #36	; 0x24
 8008c02:	2101      	movs	r1, #1
 8008c04:	4618      	mov	r0, r3
 8008c06:	f000 fe5f 	bl	80098c8 <RCCEx_PLL3_Config>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008c0e:	e003      	b.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	75fb      	strb	r3, [r7, #23]
      break;
 8008c14:	e000      	b.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8008c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c18:	7dfb      	ldrb	r3, [r7, #23]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d110      	bne.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008c1e:	4b05      	ldr	r3, [pc, #20]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c22:	f023 0207 	bic.w	r2, r3, #7
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c2a:	4902      	ldr	r1, [pc, #8]	; (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	654b      	str	r3, [r1, #84]	; 0x54
 8008c30:	e008      	b.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008c32:	bf00      	nop
 8008c34:	58024400 	.word	0x58024400
 8008c38:	58024800 	.word	0x58024800
 8008c3c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c40:	7dfb      	ldrb	r3, [r7, #23]
 8008c42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f003 0304 	and.w	r3, r3, #4
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d039      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c56:	2b05      	cmp	r3, #5
 8008c58:	d820      	bhi.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008c5a:	a201      	add	r2, pc, #4	; (adr r2, 8008c60 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c60:	08008ca3 	.word	0x08008ca3
 8008c64:	08008c79 	.word	0x08008c79
 8008c68:	08008c8b 	.word	0x08008c8b
 8008c6c:	08008ca3 	.word	0x08008ca3
 8008c70:	08008ca3 	.word	0x08008ca3
 8008c74:	08008ca3 	.word	0x08008ca3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	2101      	movs	r1, #1
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 fd70 	bl	8009764 <RCCEx_PLL2_Config>
 8008c84:	4603      	mov	r3, r0
 8008c86:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008c88:	e00c      	b.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	3324      	adds	r3, #36	; 0x24
 8008c8e:	2101      	movs	r1, #1
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 fe19 	bl	80098c8 <RCCEx_PLL3_Config>
 8008c96:	4603      	mov	r3, r0
 8008c98:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008c9a:	e003      	b.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8008ca0:	e000      	b.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008ca2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ca4:	7dfb      	ldrb	r3, [r7, #23]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10a      	bne.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008caa:	4bb7      	ldr	r3, [pc, #732]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cae:	f023 0207 	bic.w	r2, r3, #7
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cb8:	49b3      	ldr	r1, [pc, #716]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	658b      	str	r3, [r1, #88]	; 0x58
 8008cbe:	e001      	b.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cc0:	7dfb      	ldrb	r3, [r7, #23]
 8008cc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 0320 	and.w	r3, r3, #32
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d04b      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cda:	d02e      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ce0:	d828      	bhi.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ce6:	d02a      	beq.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cec:	d822      	bhi.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008cee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008cf2:	d026      	beq.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008cf4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008cf8:	d81c      	bhi.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cfe:	d010      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d04:	d816      	bhi.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d01d      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008d0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d0e:	d111      	bne.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	3304      	adds	r3, #4
 8008d14:	2100      	movs	r1, #0
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 fd24 	bl	8009764 <RCCEx_PLL2_Config>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008d20:	e012      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	3324      	adds	r3, #36	; 0x24
 8008d26:	2102      	movs	r1, #2
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f000 fdcd 	bl	80098c8 <RCCEx_PLL3_Config>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008d32:	e009      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	75fb      	strb	r3, [r7, #23]
      break;
 8008d38:	e006      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008d3a:	bf00      	nop
 8008d3c:	e004      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008d3e:	bf00      	nop
 8008d40:	e002      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008d42:	bf00      	nop
 8008d44:	e000      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008d46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d48:	7dfb      	ldrb	r3, [r7, #23]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10a      	bne.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008d4e:	4b8e      	ldr	r3, [pc, #568]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d52:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d5c:	498a      	ldr	r1, [pc, #552]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	654b      	str	r3, [r1, #84]	; 0x54
 8008d62:	e001      	b.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d64:	7dfb      	ldrb	r3, [r7, #23]
 8008d66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d04b      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d7a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008d7e:	d02e      	beq.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008d80:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008d84:	d828      	bhi.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d8a:	d02a      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d90:	d822      	bhi.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008d92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d96:	d026      	beq.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008d98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d9c:	d81c      	bhi.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008da2:	d010      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008da8:	d816      	bhi.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d01d      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008db2:	d111      	bne.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	3304      	adds	r3, #4
 8008db8:	2100      	movs	r1, #0
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 fcd2 	bl	8009764 <RCCEx_PLL2_Config>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008dc4:	e012      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	3324      	adds	r3, #36	; 0x24
 8008dca:	2102      	movs	r1, #2
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f000 fd7b 	bl	80098c8 <RCCEx_PLL3_Config>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008dd6:	e009      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	75fb      	strb	r3, [r7, #23]
      break;
 8008ddc:	e006      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008dde:	bf00      	nop
 8008de0:	e004      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008de2:	bf00      	nop
 8008de4:	e002      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008de6:	bf00      	nop
 8008de8:	e000      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008dea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dec:	7dfb      	ldrb	r3, [r7, #23]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10a      	bne.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008df2:	4b65      	ldr	r3, [pc, #404]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e00:	4961      	ldr	r1, [pc, #388]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008e02:	4313      	orrs	r3, r2
 8008e04:	658b      	str	r3, [r1, #88]	; 0x58
 8008e06:	e001      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e08:	7dfb      	ldrb	r3, [r7, #23]
 8008e0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d04b      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e1e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008e22:	d02e      	beq.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008e24:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008e28:	d828      	bhi.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e2e:	d02a      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e34:	d822      	bhi.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008e36:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008e3a:	d026      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008e3c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008e40:	d81c      	bhi.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008e42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e46:	d010      	beq.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008e48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e4c:	d816      	bhi.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d01d      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e56:	d111      	bne.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	3304      	adds	r3, #4
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 fc80 	bl	8009764 <RCCEx_PLL2_Config>
 8008e64:	4603      	mov	r3, r0
 8008e66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008e68:	e012      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	3324      	adds	r3, #36	; 0x24
 8008e6e:	2102      	movs	r1, #2
 8008e70:	4618      	mov	r0, r3
 8008e72:	f000 fd29 	bl	80098c8 <RCCEx_PLL3_Config>
 8008e76:	4603      	mov	r3, r0
 8008e78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008e7a:	e009      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8008e80:	e006      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008e82:	bf00      	nop
 8008e84:	e004      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008e86:	bf00      	nop
 8008e88:	e002      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008e8a:	bf00      	nop
 8008e8c:	e000      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008e8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e90:	7dfb      	ldrb	r3, [r7, #23]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10a      	bne.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008e96:	4b3c      	ldr	r3, [pc, #240]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ea4:	4938      	ldr	r1, [pc, #224]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	658b      	str	r3, [r1, #88]	; 0x58
 8008eaa:	e001      	b.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eac:	7dfb      	ldrb	r3, [r7, #23]
 8008eae:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 0308 	and.w	r3, r3, #8
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d01a      	beq.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ec6:	d10a      	bne.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	3324      	adds	r3, #36	; 0x24
 8008ecc:	2102      	movs	r1, #2
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f000 fcfa 	bl	80098c8 <RCCEx_PLL3_Config>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d001      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008ede:	4b2a      	ldr	r3, [pc, #168]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ee2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eec:	4926      	ldr	r1, [pc, #152]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 0310 	and.w	r3, r3, #16
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d01a      	beq.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f08:	d10a      	bne.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	3324      	adds	r3, #36	; 0x24
 8008f0e:	2102      	movs	r1, #2
 8008f10:	4618      	mov	r0, r3
 8008f12:	f000 fcd9 	bl	80098c8 <RCCEx_PLL3_Config>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d001      	beq.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008f20:	4b19      	ldr	r3, [pc, #100]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f2e:	4916      	ldr	r1, [pc, #88]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008f30:	4313      	orrs	r3, r2
 8008f32:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d036      	beq.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008f46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f4a:	d01f      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008f4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f50:	d817      	bhi.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d003      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f5a:	d009      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008f5c:	e011      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	3304      	adds	r3, #4
 8008f62:	2100      	movs	r1, #0
 8008f64:	4618      	mov	r0, r3
 8008f66:	f000 fbfd 	bl	8009764 <RCCEx_PLL2_Config>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008f6e:	e00e      	b.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	3324      	adds	r3, #36	; 0x24
 8008f74:	2102      	movs	r1, #2
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 fca6 	bl	80098c8 <RCCEx_PLL3_Config>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008f80:	e005      	b.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	75fb      	strb	r3, [r7, #23]
      break;
 8008f86:	e002      	b.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008f88:	58024400 	.word	0x58024400
      break;
 8008f8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f8e:	7dfb      	ldrb	r3, [r7, #23]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10a      	bne.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008f94:	4b93      	ldr	r3, [pc, #588]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008fa2:	4990      	ldr	r1, [pc, #576]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	658b      	str	r3, [r1, #88]	; 0x58
 8008fa8:	e001      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008faa:	7dfb      	ldrb	r3, [r7, #23]
 8008fac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d033      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008fc4:	d01c      	beq.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008fc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008fca:	d816      	bhi.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008fcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fd0:	d003      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008fd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fd6:	d007      	beq.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008fd8:	e00f      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fda:	4b82      	ldr	r3, [pc, #520]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fde:	4a81      	ldr	r2, [pc, #516]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fe4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008fe6:	e00c      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	3324      	adds	r3, #36	; 0x24
 8008fec:	2101      	movs	r1, #1
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 fc6a 	bl	80098c8 <RCCEx_PLL3_Config>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008ff8:	e003      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	75fb      	strb	r3, [r7, #23]
      break;
 8008ffe:	e000      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8009000:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009002:	7dfb      	ldrb	r3, [r7, #23]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10a      	bne.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009008:	4b76      	ldr	r3, [pc, #472]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800900a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800900c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009016:	4973      	ldr	r1, [pc, #460]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009018:	4313      	orrs	r3, r2
 800901a:	654b      	str	r3, [r1, #84]	; 0x54
 800901c:	e001      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800901e:	7dfb      	ldrb	r3, [r7, #23]
 8009020:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800902a:	2b00      	cmp	r3, #0
 800902c:	d029      	beq.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009032:	2b00      	cmp	r3, #0
 8009034:	d003      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8009036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800903a:	d007      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800903c:	e00f      	b.n	800905e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800903e:	4b69      	ldr	r3, [pc, #420]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009042:	4a68      	ldr	r2, [pc, #416]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009048:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800904a:	e00b      	b.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	3304      	adds	r3, #4
 8009050:	2102      	movs	r1, #2
 8009052:	4618      	mov	r0, r3
 8009054:	f000 fb86 	bl	8009764 <RCCEx_PLL2_Config>
 8009058:	4603      	mov	r3, r0
 800905a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800905c:	e002      	b.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	75fb      	strb	r3, [r7, #23]
      break;
 8009062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009064:	7dfb      	ldrb	r3, [r7, #23]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d109      	bne.n	800907e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800906a:	4b5e      	ldr	r3, [pc, #376]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800906c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800906e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009076:	495b      	ldr	r1, [pc, #364]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009078:	4313      	orrs	r3, r2
 800907a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800907c:	e001      	b.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800907e:	7dfb      	ldrb	r3, [r7, #23]
 8009080:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00a      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	3324      	adds	r3, #36	; 0x24
 8009092:	2102      	movs	r1, #2
 8009094:	4618      	mov	r0, r3
 8009096:	f000 fc17 	bl	80098c8 <RCCEx_PLL3_Config>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d001      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d030      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090b8:	d017      	beq.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80090ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090be:	d811      	bhi.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80090c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090c4:	d013      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80090c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090ca:	d80b      	bhi.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d010      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80090d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090d4:	d106      	bne.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090d6:	4b43      	ldr	r3, [pc, #268]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090da:	4a42      	ldr	r2, [pc, #264]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80090e2:	e007      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	75fb      	strb	r3, [r7, #23]
      break;
 80090e8:	e004      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80090ea:	bf00      	nop
 80090ec:	e002      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80090ee:	bf00      	nop
 80090f0:	e000      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80090f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090f4:	7dfb      	ldrb	r3, [r7, #23]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d109      	bne.n	800910e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80090fa:	4b3a      	ldr	r3, [pc, #232]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009106:	4937      	ldr	r1, [pc, #220]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009108:	4313      	orrs	r3, r2
 800910a:	654b      	str	r3, [r1, #84]	; 0x54
 800910c:	e001      	b.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800910e:	7dfb      	ldrb	r3, [r7, #23]
 8009110:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800911a:	2b00      	cmp	r3, #0
 800911c:	d008      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800911e:	4b31      	ldr	r3, [pc, #196]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009122:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800912a:	492e      	ldr	r1, [pc, #184]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800912c:	4313      	orrs	r3, r2
 800912e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009138:	2b00      	cmp	r3, #0
 800913a:	d009      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800913c:	4b29      	ldr	r3, [pc, #164]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800914a:	4926      	ldr	r1, [pc, #152]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800914c:	4313      	orrs	r3, r2
 800914e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009158:	2b00      	cmp	r3, #0
 800915a:	d008      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800915c:	4b21      	ldr	r3, [pc, #132]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800915e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009160:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009168:	491e      	ldr	r1, [pc, #120]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800916a:	4313      	orrs	r3, r2
 800916c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00d      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800917a:	4b1a      	ldr	r3, [pc, #104]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	4a19      	ldr	r2, [pc, #100]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009180:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009184:	6113      	str	r3, [r2, #16]
 8009186:	4b17      	ldr	r3, [pc, #92]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009188:	691a      	ldr	r2, [r3, #16]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009190:	4914      	ldr	r1, [pc, #80]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009192:	4313      	orrs	r3, r2
 8009194:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	da08      	bge.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800919e:	4b11      	ldr	r3, [pc, #68]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80091a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091aa:	490e      	ldr	r1, [pc, #56]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80091ac:	4313      	orrs	r3, r2
 80091ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d009      	beq.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80091bc:	4b09      	ldr	r3, [pc, #36]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80091be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091ca:	4906      	ldr	r1, [pc, #24]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80091cc:	4313      	orrs	r3, r2
 80091ce:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80091d0:	7dbb      	ldrb	r3, [r7, #22]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d101      	bne.n	80091da <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80091d6:	2300      	movs	r3, #0
 80091d8:	e000      	b.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80091da:	2301      	movs	r3, #1
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3718      	adds	r7, #24
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	58024400 	.word	0x58024400

080091e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80091ec:	f7ff f860 	bl	80082b0 <HAL_RCC_GetHCLKFreq>
 80091f0:	4602      	mov	r2, r0
 80091f2:	4b06      	ldr	r3, [pc, #24]	; (800920c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	091b      	lsrs	r3, r3, #4
 80091f8:	f003 0307 	and.w	r3, r3, #7
 80091fc:	4904      	ldr	r1, [pc, #16]	; (8009210 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80091fe:	5ccb      	ldrb	r3, [r1, r3]
 8009200:	f003 031f 	and.w	r3, r3, #31
 8009204:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009208:	4618      	mov	r0, r3
 800920a:	bd80      	pop	{r7, pc}
 800920c:	58024400 	.word	0x58024400
 8009210:	08011f4c 	.word	0x08011f4c

08009214 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009214:	b480      	push	{r7}
 8009216:	b089      	sub	sp, #36	; 0x24
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800921c:	4ba1      	ldr	r3, [pc, #644]	; (80094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800921e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009220:	f003 0303 	and.w	r3, r3, #3
 8009224:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009226:	4b9f      	ldr	r3, [pc, #636]	; (80094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922a:	0b1b      	lsrs	r3, r3, #12
 800922c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009230:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009232:	4b9c      	ldr	r3, [pc, #624]	; (80094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009236:	091b      	lsrs	r3, r3, #4
 8009238:	f003 0301 	and.w	r3, r3, #1
 800923c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800923e:	4b99      	ldr	r3, [pc, #612]	; (80094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009242:	08db      	lsrs	r3, r3, #3
 8009244:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	fb02 f303 	mul.w	r3, r2, r3
 800924e:	ee07 3a90 	vmov	s15, r3
 8009252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009256:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	2b00      	cmp	r3, #0
 800925e:	f000 8111 	beq.w	8009484 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	2b02      	cmp	r3, #2
 8009266:	f000 8083 	beq.w	8009370 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	2b02      	cmp	r3, #2
 800926e:	f200 80a1 	bhi.w	80093b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d003      	beq.n	8009280 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	2b01      	cmp	r3, #1
 800927c:	d056      	beq.n	800932c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800927e:	e099      	b.n	80093b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009280:	4b88      	ldr	r3, [pc, #544]	; (80094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 0320 	and.w	r3, r3, #32
 8009288:	2b00      	cmp	r3, #0
 800928a:	d02d      	beq.n	80092e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800928c:	4b85      	ldr	r3, [pc, #532]	; (80094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	08db      	lsrs	r3, r3, #3
 8009292:	f003 0303 	and.w	r3, r3, #3
 8009296:	4a84      	ldr	r2, [pc, #528]	; (80094a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009298:	fa22 f303 	lsr.w	r3, r2, r3
 800929c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	ee07 3a90 	vmov	s15, r3
 80092a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	ee07 3a90 	vmov	s15, r3
 80092ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092b6:	4b7b      	ldr	r3, [pc, #492]	; (80094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092be:	ee07 3a90 	vmov	s15, r3
 80092c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80092ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80094ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092e2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80092e6:	e087      	b.n	80093f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	ee07 3a90 	vmov	s15, r3
 80092ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80094b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80092f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092fa:	4b6a      	ldr	r3, [pc, #424]	; (80094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009302:	ee07 3a90 	vmov	s15, r3
 8009306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800930a:	ed97 6a03 	vldr	s12, [r7, #12]
 800930e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80094ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800931a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800931e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009326:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800932a:	e065      	b.n	80093f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	ee07 3a90 	vmov	s15, r3
 8009332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009336:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80094b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800933a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800933e:	4b59      	ldr	r3, [pc, #356]	; (80094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009346:	ee07 3a90 	vmov	s15, r3
 800934a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800934e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009352:	eddf 5a56 	vldr	s11, [pc, #344]	; 80094ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800935a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800935e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800936a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800936e:	e043      	b.n	80093f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	ee07 3a90 	vmov	s15, r3
 8009376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800937a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80094b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800937e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009382:	4b48      	ldr	r3, [pc, #288]	; (80094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800938a:	ee07 3a90 	vmov	s15, r3
 800938e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009392:	ed97 6a03 	vldr	s12, [r7, #12]
 8009396:	eddf 5a45 	vldr	s11, [pc, #276]	; 80094ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800939a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800939e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093b2:	e021      	b.n	80093f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	ee07 3a90 	vmov	s15, r3
 80093ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80094b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80093c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093c6:	4b37      	ldr	r3, [pc, #220]	; (80094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ce:	ee07 3a90 	vmov	s15, r3
 80093d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80094ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80093f8:	4b2a      	ldr	r3, [pc, #168]	; (80094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093fc:	0a5b      	lsrs	r3, r3, #9
 80093fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009402:	ee07 3a90 	vmov	s15, r3
 8009406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800940e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009412:	edd7 6a07 	vldr	s13, [r7, #28]
 8009416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800941a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800941e:	ee17 2a90 	vmov	r2, s15
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009426:	4b1f      	ldr	r3, [pc, #124]	; (80094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942a:	0c1b      	lsrs	r3, r3, #16
 800942c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009430:	ee07 3a90 	vmov	s15, r3
 8009434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009438:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800943c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009440:	edd7 6a07 	vldr	s13, [r7, #28]
 8009444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800944c:	ee17 2a90 	vmov	r2, s15
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009454:	4b13      	ldr	r3, [pc, #76]	; (80094a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009458:	0e1b      	lsrs	r3, r3, #24
 800945a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800945e:	ee07 3a90 	vmov	s15, r3
 8009462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009466:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800946a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800946e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800947a:	ee17 2a90 	vmov	r2, s15
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009482:	e008      	b.n	8009496 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	609a      	str	r2, [r3, #8]
}
 8009496:	bf00      	nop
 8009498:	3724      	adds	r7, #36	; 0x24
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	58024400 	.word	0x58024400
 80094a8:	03d09000 	.word	0x03d09000
 80094ac:	46000000 	.word	0x46000000
 80094b0:	4c742400 	.word	0x4c742400
 80094b4:	4a742400 	.word	0x4a742400
 80094b8:	4af42400 	.word	0x4af42400

080094bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80094bc:	b480      	push	{r7}
 80094be:	b089      	sub	sp, #36	; 0x24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094c4:	4ba1      	ldr	r3, [pc, #644]	; (800974c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c8:	f003 0303 	and.w	r3, r3, #3
 80094cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80094ce:	4b9f      	ldr	r3, [pc, #636]	; (800974c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d2:	0d1b      	lsrs	r3, r3, #20
 80094d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80094da:	4b9c      	ldr	r3, [pc, #624]	; (800974c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094de:	0a1b      	lsrs	r3, r3, #8
 80094e0:	f003 0301 	and.w	r3, r3, #1
 80094e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80094e6:	4b99      	ldr	r3, [pc, #612]	; (800974c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ea:	08db      	lsrs	r3, r3, #3
 80094ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	fb02 f303 	mul.w	r3, r2, r3
 80094f6:	ee07 3a90 	vmov	s15, r3
 80094fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	2b00      	cmp	r3, #0
 8009506:	f000 8111 	beq.w	800972c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	2b02      	cmp	r3, #2
 800950e:	f000 8083 	beq.w	8009618 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	2b02      	cmp	r3, #2
 8009516:	f200 80a1 	bhi.w	800965c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d003      	beq.n	8009528 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	2b01      	cmp	r3, #1
 8009524:	d056      	beq.n	80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009526:	e099      	b.n	800965c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009528:	4b88      	ldr	r3, [pc, #544]	; (800974c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 0320 	and.w	r3, r3, #32
 8009530:	2b00      	cmp	r3, #0
 8009532:	d02d      	beq.n	8009590 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009534:	4b85      	ldr	r3, [pc, #532]	; (800974c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	08db      	lsrs	r3, r3, #3
 800953a:	f003 0303 	and.w	r3, r3, #3
 800953e:	4a84      	ldr	r2, [pc, #528]	; (8009750 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009540:	fa22 f303 	lsr.w	r3, r2, r3
 8009544:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	ee07 3a90 	vmov	s15, r3
 800954c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	ee07 3a90 	vmov	s15, r3
 8009556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800955a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800955e:	4b7b      	ldr	r3, [pc, #492]	; (800974c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009566:	ee07 3a90 	vmov	s15, r3
 800956a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800956e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009572:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009754 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800957a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800957e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800958a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800958e:	e087      	b.n	80096a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	ee07 3a90 	vmov	s15, r3
 8009596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800959a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009758 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800959e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095a2:	4b6a      	ldr	r3, [pc, #424]	; (800974c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095aa:	ee07 3a90 	vmov	s15, r3
 80095ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80095b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009754 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095d2:	e065      	b.n	80096a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	ee07 3a90 	vmov	s15, r3
 80095da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800975c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80095e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095e6:	4b59      	ldr	r3, [pc, #356]	; (800974c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ee:	ee07 3a90 	vmov	s15, r3
 80095f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80095fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009754 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800960a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800960e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009612:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009616:	e043      	b.n	80096a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	ee07 3a90 	vmov	s15, r3
 800961e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009622:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009760 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800962a:	4b48      	ldr	r3, [pc, #288]	; (800974c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800962c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009632:	ee07 3a90 	vmov	s15, r3
 8009636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800963a:	ed97 6a03 	vldr	s12, [r7, #12]
 800963e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009754 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800964a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800964e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009656:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800965a:	e021      	b.n	80096a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	ee07 3a90 	vmov	s15, r3
 8009662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009666:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800975c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800966a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800966e:	4b37      	ldr	r3, [pc, #220]	; (800974c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009676:	ee07 3a90 	vmov	s15, r3
 800967a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800967e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009682:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009754 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800968a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800968e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800969a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800969e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80096a0:	4b2a      	ldr	r3, [pc, #168]	; (800974c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a4:	0a5b      	lsrs	r3, r3, #9
 80096a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096aa:	ee07 3a90 	vmov	s15, r3
 80096ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80096be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096c6:	ee17 2a90 	vmov	r2, s15
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80096ce:	4b1f      	ldr	r3, [pc, #124]	; (800974c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d2:	0c1b      	lsrs	r3, r3, #16
 80096d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096d8:	ee07 3a90 	vmov	s15, r3
 80096dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80096ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096f4:	ee17 2a90 	vmov	r2, s15
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80096fc:	4b13      	ldr	r3, [pc, #76]	; (800974c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009700:	0e1b      	lsrs	r3, r3, #24
 8009702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009706:	ee07 3a90 	vmov	s15, r3
 800970a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800970e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009712:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009716:	edd7 6a07 	vldr	s13, [r7, #28]
 800971a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800971e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009722:	ee17 2a90 	vmov	r2, s15
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800972a:	e008      	b.n	800973e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	609a      	str	r2, [r3, #8]
}
 800973e:	bf00      	nop
 8009740:	3724      	adds	r7, #36	; 0x24
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	58024400 	.word	0x58024400
 8009750:	03d09000 	.word	0x03d09000
 8009754:	46000000 	.word	0x46000000
 8009758:	4c742400 	.word	0x4c742400
 800975c:	4a742400 	.word	0x4a742400
 8009760:	4af42400 	.word	0x4af42400

08009764 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009772:	4b53      	ldr	r3, [pc, #332]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 8009774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009776:	f003 0303 	and.w	r3, r3, #3
 800977a:	2b03      	cmp	r3, #3
 800977c:	d101      	bne.n	8009782 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e099      	b.n	80098b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009782:	4b4f      	ldr	r3, [pc, #316]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a4e      	ldr	r2, [pc, #312]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 8009788:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800978c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800978e:	f7f8 fb27 	bl	8001de0 <HAL_GetTick>
 8009792:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009794:	e008      	b.n	80097a8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009796:	f7f8 fb23 	bl	8001de0 <HAL_GetTick>
 800979a:	4602      	mov	r2, r0
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d901      	bls.n	80097a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80097a4:	2303      	movs	r3, #3
 80097a6:	e086      	b.n	80098b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80097a8:	4b45      	ldr	r3, [pc, #276]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1f0      	bne.n	8009796 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80097b4:	4b42      	ldr	r3, [pc, #264]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 80097b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	031b      	lsls	r3, r3, #12
 80097c2:	493f      	ldr	r1, [pc, #252]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 80097c4:	4313      	orrs	r3, r2
 80097c6:	628b      	str	r3, [r1, #40]	; 0x28
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	3b01      	subs	r3, #1
 80097ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	3b01      	subs	r3, #1
 80097d8:	025b      	lsls	r3, r3, #9
 80097da:	b29b      	uxth	r3, r3
 80097dc:	431a      	orrs	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	3b01      	subs	r3, #1
 80097e4:	041b      	lsls	r3, r3, #16
 80097e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80097ea:	431a      	orrs	r2, r3
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	3b01      	subs	r3, #1
 80097f2:	061b      	lsls	r3, r3, #24
 80097f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80097f8:	4931      	ldr	r1, [pc, #196]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 80097fa:	4313      	orrs	r3, r2
 80097fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80097fe:	4b30      	ldr	r3, [pc, #192]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 8009800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009802:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	492d      	ldr	r1, [pc, #180]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 800980c:	4313      	orrs	r3, r2
 800980e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009810:	4b2b      	ldr	r3, [pc, #172]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 8009812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009814:	f023 0220 	bic.w	r2, r3, #32
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	699b      	ldr	r3, [r3, #24]
 800981c:	4928      	ldr	r1, [pc, #160]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 800981e:	4313      	orrs	r3, r2
 8009820:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009822:	4b27      	ldr	r3, [pc, #156]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 8009824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009826:	4a26      	ldr	r2, [pc, #152]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 8009828:	f023 0310 	bic.w	r3, r3, #16
 800982c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800982e:	4b24      	ldr	r3, [pc, #144]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 8009830:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009832:	4b24      	ldr	r3, [pc, #144]	; (80098c4 <RCCEx_PLL2_Config+0x160>)
 8009834:	4013      	ands	r3, r2
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	69d2      	ldr	r2, [r2, #28]
 800983a:	00d2      	lsls	r2, r2, #3
 800983c:	4920      	ldr	r1, [pc, #128]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 800983e:	4313      	orrs	r3, r2
 8009840:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009842:	4b1f      	ldr	r3, [pc, #124]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 8009844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009846:	4a1e      	ldr	r2, [pc, #120]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 8009848:	f043 0310 	orr.w	r3, r3, #16
 800984c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d106      	bne.n	8009862 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009854:	4b1a      	ldr	r3, [pc, #104]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 8009856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009858:	4a19      	ldr	r2, [pc, #100]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 800985a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800985e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009860:	e00f      	b.n	8009882 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d106      	bne.n	8009876 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009868:	4b15      	ldr	r3, [pc, #84]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 800986a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986c:	4a14      	ldr	r2, [pc, #80]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 800986e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009872:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009874:	e005      	b.n	8009882 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009876:	4b12      	ldr	r3, [pc, #72]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 8009878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987a:	4a11      	ldr	r2, [pc, #68]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 800987c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009880:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009882:	4b0f      	ldr	r3, [pc, #60]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a0e      	ldr	r2, [pc, #56]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 8009888:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800988c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800988e:	f7f8 faa7 	bl	8001de0 <HAL_GetTick>
 8009892:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009894:	e008      	b.n	80098a8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009896:	f7f8 faa3 	bl	8001de0 <HAL_GetTick>
 800989a:	4602      	mov	r2, r0
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	d901      	bls.n	80098a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80098a4:	2303      	movs	r3, #3
 80098a6:	e006      	b.n	80098b6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098a8:	4b05      	ldr	r3, [pc, #20]	; (80098c0 <RCCEx_PLL2_Config+0x15c>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d0f0      	beq.n	8009896 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	58024400 	.word	0x58024400
 80098c4:	ffff0007 	.word	0xffff0007

080098c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80098d6:	4b53      	ldr	r3, [pc, #332]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 80098d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098da:	f003 0303 	and.w	r3, r3, #3
 80098de:	2b03      	cmp	r3, #3
 80098e0:	d101      	bne.n	80098e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e099      	b.n	8009a1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80098e6:	4b4f      	ldr	r3, [pc, #316]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a4e      	ldr	r2, [pc, #312]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 80098ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098f2:	f7f8 fa75 	bl	8001de0 <HAL_GetTick>
 80098f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80098f8:	e008      	b.n	800990c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80098fa:	f7f8 fa71 	bl	8001de0 <HAL_GetTick>
 80098fe:	4602      	mov	r2, r0
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	1ad3      	subs	r3, r2, r3
 8009904:	2b02      	cmp	r3, #2
 8009906:	d901      	bls.n	800990c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009908:	2303      	movs	r3, #3
 800990a:	e086      	b.n	8009a1a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800990c:	4b45      	ldr	r3, [pc, #276]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009914:	2b00      	cmp	r3, #0
 8009916:	d1f0      	bne.n	80098fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009918:	4b42      	ldr	r3, [pc, #264]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 800991a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800991c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	051b      	lsls	r3, r3, #20
 8009926:	493f      	ldr	r1, [pc, #252]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 8009928:	4313      	orrs	r3, r2
 800992a:	628b      	str	r3, [r1, #40]	; 0x28
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	3b01      	subs	r3, #1
 8009932:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	3b01      	subs	r3, #1
 800993c:	025b      	lsls	r3, r3, #9
 800993e:	b29b      	uxth	r3, r3
 8009940:	431a      	orrs	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	3b01      	subs	r3, #1
 8009948:	041b      	lsls	r3, r3, #16
 800994a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800994e:	431a      	orrs	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	3b01      	subs	r3, #1
 8009956:	061b      	lsls	r3, r3, #24
 8009958:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800995c:	4931      	ldr	r1, [pc, #196]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 800995e:	4313      	orrs	r3, r2
 8009960:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009962:	4b30      	ldr	r3, [pc, #192]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 8009964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009966:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	492d      	ldr	r1, [pc, #180]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 8009970:	4313      	orrs	r3, r2
 8009972:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009974:	4b2b      	ldr	r3, [pc, #172]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 8009976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009978:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	699b      	ldr	r3, [r3, #24]
 8009980:	4928      	ldr	r1, [pc, #160]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 8009982:	4313      	orrs	r3, r2
 8009984:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009986:	4b27      	ldr	r3, [pc, #156]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 8009988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998a:	4a26      	ldr	r2, [pc, #152]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 800998c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009990:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009992:	4b24      	ldr	r3, [pc, #144]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 8009994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009996:	4b24      	ldr	r3, [pc, #144]	; (8009a28 <RCCEx_PLL3_Config+0x160>)
 8009998:	4013      	ands	r3, r2
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	69d2      	ldr	r2, [r2, #28]
 800999e:	00d2      	lsls	r2, r2, #3
 80099a0:	4920      	ldr	r1, [pc, #128]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 80099a2:	4313      	orrs	r3, r2
 80099a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80099a6:	4b1f      	ldr	r3, [pc, #124]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 80099a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099aa:	4a1e      	ldr	r2, [pc, #120]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 80099ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d106      	bne.n	80099c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80099b8:	4b1a      	ldr	r3, [pc, #104]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 80099ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099bc:	4a19      	ldr	r2, [pc, #100]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 80099be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80099c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80099c4:	e00f      	b.n	80099e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d106      	bne.n	80099da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80099cc:	4b15      	ldr	r3, [pc, #84]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 80099ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d0:	4a14      	ldr	r2, [pc, #80]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 80099d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80099d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80099d8:	e005      	b.n	80099e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80099da:	4b12      	ldr	r3, [pc, #72]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 80099dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099de:	4a11      	ldr	r2, [pc, #68]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 80099e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80099e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80099e6:	4b0f      	ldr	r3, [pc, #60]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a0e      	ldr	r2, [pc, #56]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 80099ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099f2:	f7f8 f9f5 	bl	8001de0 <HAL_GetTick>
 80099f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80099f8:	e008      	b.n	8009a0c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80099fa:	f7f8 f9f1 	bl	8001de0 <HAL_GetTick>
 80099fe:	4602      	mov	r2, r0
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d901      	bls.n	8009a0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e006      	b.n	8009a1a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a0c:	4b05      	ldr	r3, [pc, #20]	; (8009a24 <RCCEx_PLL3_Config+0x15c>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d0f0      	beq.n	80099fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	58024400 	.word	0x58024400
 8009a28:	ffff0007 	.word	0xffff0007

08009a2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d101      	bne.n	8009a3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e049      	b.n	8009ad2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d106      	bne.n	8009a58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f7f7 fef8 	bl	8001848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	3304      	adds	r3, #4
 8009a68:	4619      	mov	r1, r3
 8009a6a:	4610      	mov	r0, r2
 8009a6c:	f000 fe8a 	bl	800a784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b082      	sub	sp, #8
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d101      	bne.n	8009aec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e049      	b.n	8009b80 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d106      	bne.n	8009b06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 f841 	bl	8009b88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2202      	movs	r2, #2
 8009b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	3304      	adds	r3, #4
 8009b16:	4619      	mov	r1, r3
 8009b18:	4610      	mov	r0, r2
 8009b1a:	f000 fe33 	bl	800a784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2201      	movs	r2, #1
 8009b22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2201      	movs	r2, #1
 8009b32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2201      	movs	r2, #1
 8009b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2201      	movs	r2, #1
 8009b72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b086      	sub	sp, #24
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
 8009ba8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d109      	bne.n	8009bc4 <HAL_TIM_PWM_Start_DMA+0x28>
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	bf0c      	ite	eq
 8009bbc:	2301      	moveq	r3, #1
 8009bbe:	2300      	movne	r3, #0
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	e03c      	b.n	8009c3e <HAL_TIM_PWM_Start_DMA+0xa2>
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2b04      	cmp	r3, #4
 8009bc8:	d109      	bne.n	8009bde <HAL_TIM_PWM_Start_DMA+0x42>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	bf0c      	ite	eq
 8009bd6:	2301      	moveq	r3, #1
 8009bd8:	2300      	movne	r3, #0
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	e02f      	b.n	8009c3e <HAL_TIM_PWM_Start_DMA+0xa2>
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	2b08      	cmp	r3, #8
 8009be2:	d109      	bne.n	8009bf8 <HAL_TIM_PWM_Start_DMA+0x5c>
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	bf0c      	ite	eq
 8009bf0:	2301      	moveq	r3, #1
 8009bf2:	2300      	movne	r3, #0
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	e022      	b.n	8009c3e <HAL_TIM_PWM_Start_DMA+0xa2>
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2b0c      	cmp	r3, #12
 8009bfc:	d109      	bne.n	8009c12 <HAL_TIM_PWM_Start_DMA+0x76>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	2b02      	cmp	r3, #2
 8009c08:	bf0c      	ite	eq
 8009c0a:	2301      	moveq	r3, #1
 8009c0c:	2300      	movne	r3, #0
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	e015      	b.n	8009c3e <HAL_TIM_PWM_Start_DMA+0xa2>
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	2b10      	cmp	r3, #16
 8009c16:	d109      	bne.n	8009c2c <HAL_TIM_PWM_Start_DMA+0x90>
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	2b02      	cmp	r3, #2
 8009c22:	bf0c      	ite	eq
 8009c24:	2301      	moveq	r3, #1
 8009c26:	2300      	movne	r3, #0
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	e008      	b.n	8009c3e <HAL_TIM_PWM_Start_DMA+0xa2>
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	bf0c      	ite	eq
 8009c38:	2301      	moveq	r3, #1
 8009c3a:	2300      	movne	r3, #0
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d001      	beq.n	8009c46 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8009c42:	2302      	movs	r3, #2
 8009c44:	e1a6      	b.n	8009f94 <HAL_TIM_PWM_Start_DMA+0x3f8>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d109      	bne.n	8009c60 <HAL_TIM_PWM_Start_DMA+0xc4>
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	bf0c      	ite	eq
 8009c58:	2301      	moveq	r3, #1
 8009c5a:	2300      	movne	r3, #0
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	e03c      	b.n	8009cda <HAL_TIM_PWM_Start_DMA+0x13e>
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	2b04      	cmp	r3, #4
 8009c64:	d109      	bne.n	8009c7a <HAL_TIM_PWM_Start_DMA+0xde>
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	bf0c      	ite	eq
 8009c72:	2301      	moveq	r3, #1
 8009c74:	2300      	movne	r3, #0
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	e02f      	b.n	8009cda <HAL_TIM_PWM_Start_DMA+0x13e>
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	2b08      	cmp	r3, #8
 8009c7e:	d109      	bne.n	8009c94 <HAL_TIM_PWM_Start_DMA+0xf8>
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	bf0c      	ite	eq
 8009c8c:	2301      	moveq	r3, #1
 8009c8e:	2300      	movne	r3, #0
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	e022      	b.n	8009cda <HAL_TIM_PWM_Start_DMA+0x13e>
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	2b0c      	cmp	r3, #12
 8009c98:	d109      	bne.n	8009cae <HAL_TIM_PWM_Start_DMA+0x112>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	bf0c      	ite	eq
 8009ca6:	2301      	moveq	r3, #1
 8009ca8:	2300      	movne	r3, #0
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	e015      	b.n	8009cda <HAL_TIM_PWM_Start_DMA+0x13e>
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	2b10      	cmp	r3, #16
 8009cb2:	d109      	bne.n	8009cc8 <HAL_TIM_PWM_Start_DMA+0x12c>
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	bf0c      	ite	eq
 8009cc0:	2301      	moveq	r3, #1
 8009cc2:	2300      	movne	r3, #0
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	e008      	b.n	8009cda <HAL_TIM_PWM_Start_DMA+0x13e>
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	bf0c      	ite	eq
 8009cd4:	2301      	moveq	r3, #1
 8009cd6:	2300      	movne	r3, #0
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d034      	beq.n	8009d48 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d104      	bne.n	8009cee <HAL_TIM_PWM_Start_DMA+0x152>
 8009ce4:	887b      	ldrh	r3, [r7, #2]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d001      	beq.n	8009cee <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	e152      	b.n	8009f94 <HAL_TIM_PWM_Start_DMA+0x3f8>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d104      	bne.n	8009cfe <HAL_TIM_PWM_Start_DMA+0x162>
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cfc:	e026      	b.n	8009d4c <HAL_TIM_PWM_Start_DMA+0x1b0>
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	2b04      	cmp	r3, #4
 8009d02:	d104      	bne.n	8009d0e <HAL_TIM_PWM_Start_DMA+0x172>
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2202      	movs	r2, #2
 8009d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d0c:	e01e      	b.n	8009d4c <HAL_TIM_PWM_Start_DMA+0x1b0>
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	2b08      	cmp	r3, #8
 8009d12:	d104      	bne.n	8009d1e <HAL_TIM_PWM_Start_DMA+0x182>
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2202      	movs	r2, #2
 8009d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d1c:	e016      	b.n	8009d4c <HAL_TIM_PWM_Start_DMA+0x1b0>
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	2b0c      	cmp	r3, #12
 8009d22:	d104      	bne.n	8009d2e <HAL_TIM_PWM_Start_DMA+0x192>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2202      	movs	r2, #2
 8009d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009d2c:	e00e      	b.n	8009d4c <HAL_TIM_PWM_Start_DMA+0x1b0>
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	2b10      	cmp	r3, #16
 8009d32:	d104      	bne.n	8009d3e <HAL_TIM_PWM_Start_DMA+0x1a2>
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2202      	movs	r2, #2
 8009d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d3c:	e006      	b.n	8009d4c <HAL_TIM_PWM_Start_DMA+0x1b0>
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2202      	movs	r2, #2
 8009d42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d46:	e001      	b.n	8009d4c <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e123      	b.n	8009f94 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	2b0c      	cmp	r3, #12
 8009d50:	f200 80ae 	bhi.w	8009eb0 <HAL_TIM_PWM_Start_DMA+0x314>
 8009d54:	a201      	add	r2, pc, #4	; (adr r2, 8009d5c <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8009d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5a:	bf00      	nop
 8009d5c:	08009d91 	.word	0x08009d91
 8009d60:	08009eb1 	.word	0x08009eb1
 8009d64:	08009eb1 	.word	0x08009eb1
 8009d68:	08009eb1 	.word	0x08009eb1
 8009d6c:	08009dd9 	.word	0x08009dd9
 8009d70:	08009eb1 	.word	0x08009eb1
 8009d74:	08009eb1 	.word	0x08009eb1
 8009d78:	08009eb1 	.word	0x08009eb1
 8009d7c:	08009e21 	.word	0x08009e21
 8009d80:	08009eb1 	.word	0x08009eb1
 8009d84:	08009eb1 	.word	0x08009eb1
 8009d88:	08009eb1 	.word	0x08009eb1
 8009d8c:	08009e69 	.word	0x08009e69
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d94:	4a81      	ldr	r2, [pc, #516]	; (8009f9c <HAL_TIM_PWM_Start_DMA+0x400>)
 8009d96:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9c:	4a80      	ldr	r2, [pc, #512]	; (8009fa0 <HAL_TIM_PWM_Start_DMA+0x404>)
 8009d9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da4:	4a7f      	ldr	r2, [pc, #508]	; (8009fa4 <HAL_TIM_PWM_Start_DMA+0x408>)
 8009da6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009dac:	6879      	ldr	r1, [r7, #4]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	3334      	adds	r3, #52	; 0x34
 8009db4:	461a      	mov	r2, r3
 8009db6:	887b      	ldrh	r3, [r7, #2]
 8009db8:	f7f8 fcce 	bl	8002758 <HAL_DMA_Start_IT>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e0e6      	b.n	8009f94 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68da      	ldr	r2, [r3, #12]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dd4:	60da      	str	r2, [r3, #12]
      break;
 8009dd6:	e06c      	b.n	8009eb2 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ddc:	4a6f      	ldr	r2, [pc, #444]	; (8009f9c <HAL_TIM_PWM_Start_DMA+0x400>)
 8009dde:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de4:	4a6e      	ldr	r2, [pc, #440]	; (8009fa0 <HAL_TIM_PWM_Start_DMA+0x404>)
 8009de6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dec:	4a6d      	ldr	r2, [pc, #436]	; (8009fa4 <HAL_TIM_PWM_Start_DMA+0x408>)
 8009dee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009df4:	6879      	ldr	r1, [r7, #4]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	3338      	adds	r3, #56	; 0x38
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	887b      	ldrh	r3, [r7, #2]
 8009e00:	f7f8 fcaa 	bl	8002758 <HAL_DMA_Start_IT>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d001      	beq.n	8009e0e <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e0c2      	b.n	8009f94 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	68da      	ldr	r2, [r3, #12]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009e1c:	60da      	str	r2, [r3, #12]
      break;
 8009e1e:	e048      	b.n	8009eb2 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e24:	4a5d      	ldr	r2, [pc, #372]	; (8009f9c <HAL_TIM_PWM_Start_DMA+0x400>)
 8009e26:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2c:	4a5c      	ldr	r2, [pc, #368]	; (8009fa0 <HAL_TIM_PWM_Start_DMA+0x404>)
 8009e2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e34:	4a5b      	ldr	r2, [pc, #364]	; (8009fa4 <HAL_TIM_PWM_Start_DMA+0x408>)
 8009e36:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009e3c:	6879      	ldr	r1, [r7, #4]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	333c      	adds	r3, #60	; 0x3c
 8009e44:	461a      	mov	r2, r3
 8009e46:	887b      	ldrh	r3, [r7, #2]
 8009e48:	f7f8 fc86 	bl	8002758 <HAL_DMA_Start_IT>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e09e      	b.n	8009f94 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68da      	ldr	r2, [r3, #12]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e64:	60da      	str	r2, [r3, #12]
      break;
 8009e66:	e024      	b.n	8009eb2 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e6c:	4a4b      	ldr	r2, [pc, #300]	; (8009f9c <HAL_TIM_PWM_Start_DMA+0x400>)
 8009e6e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e74:	4a4a      	ldr	r2, [pc, #296]	; (8009fa0 <HAL_TIM_PWM_Start_DMA+0x404>)
 8009e76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e7c:	4a49      	ldr	r2, [pc, #292]	; (8009fa4 <HAL_TIM_PWM_Start_DMA+0x408>)
 8009e7e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009e84:	6879      	ldr	r1, [r7, #4]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	3340      	adds	r3, #64	; 0x40
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	887b      	ldrh	r3, [r7, #2]
 8009e90:	f7f8 fc62 	bl	8002758 <HAL_DMA_Start_IT>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d001      	beq.n	8009e9e <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e07a      	b.n	8009f94 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68da      	ldr	r2, [r3, #12]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009eac:	60da      	str	r2, [r3, #12]
      break;
 8009eae:	e000      	b.n	8009eb2 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8009eb0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	68b9      	ldr	r1, [r7, #8]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f001 f868 	bl	800af90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a38      	ldr	r2, [pc, #224]	; (8009fa8 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d013      	beq.n	8009ef2 <HAL_TIM_PWM_Start_DMA+0x356>
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a37      	ldr	r2, [pc, #220]	; (8009fac <HAL_TIM_PWM_Start_DMA+0x410>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d00e      	beq.n	8009ef2 <HAL_TIM_PWM_Start_DMA+0x356>
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a35      	ldr	r2, [pc, #212]	; (8009fb0 <HAL_TIM_PWM_Start_DMA+0x414>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d009      	beq.n	8009ef2 <HAL_TIM_PWM_Start_DMA+0x356>
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a34      	ldr	r2, [pc, #208]	; (8009fb4 <HAL_TIM_PWM_Start_DMA+0x418>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d004      	beq.n	8009ef2 <HAL_TIM_PWM_Start_DMA+0x356>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a32      	ldr	r2, [pc, #200]	; (8009fb8 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d101      	bne.n	8009ef6 <HAL_TIM_PWM_Start_DMA+0x35a>
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e000      	b.n	8009ef8 <HAL_TIM_PWM_Start_DMA+0x35c>
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d007      	beq.n	8009f0c <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f0a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a25      	ldr	r2, [pc, #148]	; (8009fa8 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d01d      	beq.n	8009f52 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f1e:	d018      	beq.n	8009f52 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a25      	ldr	r2, [pc, #148]	; (8009fbc <HAL_TIM_PWM_Start_DMA+0x420>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d013      	beq.n	8009f52 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a24      	ldr	r2, [pc, #144]	; (8009fc0 <HAL_TIM_PWM_Start_DMA+0x424>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d00e      	beq.n	8009f52 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a22      	ldr	r2, [pc, #136]	; (8009fc4 <HAL_TIM_PWM_Start_DMA+0x428>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d009      	beq.n	8009f52 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a1a      	ldr	r2, [pc, #104]	; (8009fac <HAL_TIM_PWM_Start_DMA+0x410>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d004      	beq.n	8009f52 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a1e      	ldr	r2, [pc, #120]	; (8009fc8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d115      	bne.n	8009f7e <HAL_TIM_PWM_Start_DMA+0x3e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	689a      	ldr	r2, [r3, #8]
 8009f58:	4b1c      	ldr	r3, [pc, #112]	; (8009fcc <HAL_TIM_PWM_Start_DMA+0x430>)
 8009f5a:	4013      	ands	r3, r2
 8009f5c:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	2b06      	cmp	r3, #6
 8009f62:	d015      	beq.n	8009f90 <HAL_TIM_PWM_Start_DMA+0x3f4>
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f6a:	d011      	beq.n	8009f90 <HAL_TIM_PWM_Start_DMA+0x3f4>
    {
      __HAL_TIM_ENABLE(htim);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f042 0201 	orr.w	r2, r2, #1
 8009f7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f7c:	e008      	b.n	8009f90 <HAL_TIM_PWM_Start_DMA+0x3f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f042 0201 	orr.w	r2, r2, #1
 8009f8c:	601a      	str	r2, [r3, #0]
 8009f8e:	e000      	b.n	8009f92 <HAL_TIM_PWM_Start_DMA+0x3f6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3718      	adds	r7, #24
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	0800a673 	.word	0x0800a673
 8009fa0:	0800a71b 	.word	0x0800a71b
 8009fa4:	0800a5e1 	.word	0x0800a5e1
 8009fa8:	40010000 	.word	0x40010000
 8009fac:	40010400 	.word	0x40010400
 8009fb0:	40014000 	.word	0x40014000
 8009fb4:	40014400 	.word	0x40014400
 8009fb8:	40014800 	.word	0x40014800
 8009fbc:	40000400 	.word	0x40000400
 8009fc0:	40000800 	.word	0x40000800
 8009fc4:	40000c00 	.word	0x40000c00
 8009fc8:	40001800 	.word	0x40001800
 8009fcc:	00010007 	.word	0x00010007

08009fd0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	2b0c      	cmp	r3, #12
 8009fde:	d855      	bhi.n	800a08c <HAL_TIM_PWM_Stop_DMA+0xbc>
 8009fe0:	a201      	add	r2, pc, #4	; (adr r2, 8009fe8 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8009fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe6:	bf00      	nop
 8009fe8:	0800a01d 	.word	0x0800a01d
 8009fec:	0800a08d 	.word	0x0800a08d
 8009ff0:	0800a08d 	.word	0x0800a08d
 8009ff4:	0800a08d 	.word	0x0800a08d
 8009ff8:	0800a039 	.word	0x0800a039
 8009ffc:	0800a08d 	.word	0x0800a08d
 800a000:	0800a08d 	.word	0x0800a08d
 800a004:	0800a08d 	.word	0x0800a08d
 800a008:	0800a055 	.word	0x0800a055
 800a00c:	0800a08d 	.word	0x0800a08d
 800a010:	0800a08d 	.word	0x0800a08d
 800a014:	0800a08d 	.word	0x0800a08d
 800a018:	0800a071 	.word	0x0800a071
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68da      	ldr	r2, [r3, #12]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a02a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a030:	4618      	mov	r0, r3
 800a032:	f7f9 f919 	bl	8003268 <HAL_DMA_Abort_IT>
      break;
 800a036:	e02a      	b.n	800a08e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	68da      	ldr	r2, [r3, #12]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a046:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7f9 f90b 	bl	8003268 <HAL_DMA_Abort_IT>
      break;
 800a052:	e01c      	b.n	800a08e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68da      	ldr	r2, [r3, #12]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a062:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a068:	4618      	mov	r0, r3
 800a06a:	f7f9 f8fd 	bl	8003268 <HAL_DMA_Abort_IT>
      break;
 800a06e:	e00e      	b.n	800a08e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68da      	ldr	r2, [r3, #12]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a07e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a084:	4618      	mov	r0, r3
 800a086:	f7f9 f8ef 	bl	8003268 <HAL_DMA_Abort_IT>
      break;
 800a08a:	e000      	b.n	800a08e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 800a08c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2200      	movs	r2, #0
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	4618      	mov	r0, r3
 800a098:	f000 ff7a 	bl	800af90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a3e      	ldr	r2, [pc, #248]	; (800a19c <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d013      	beq.n	800a0ce <HAL_TIM_PWM_Stop_DMA+0xfe>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a3d      	ldr	r2, [pc, #244]	; (800a1a0 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d00e      	beq.n	800a0ce <HAL_TIM_PWM_Stop_DMA+0xfe>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a3b      	ldr	r2, [pc, #236]	; (800a1a4 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d009      	beq.n	800a0ce <HAL_TIM_PWM_Stop_DMA+0xfe>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a3a      	ldr	r2, [pc, #232]	; (800a1a8 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d004      	beq.n	800a0ce <HAL_TIM_PWM_Stop_DMA+0xfe>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a38      	ldr	r2, [pc, #224]	; (800a1ac <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d101      	bne.n	800a0d2 <HAL_TIM_PWM_Stop_DMA+0x102>
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e000      	b.n	800a0d4 <HAL_TIM_PWM_Stop_DMA+0x104>
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d017      	beq.n	800a108 <HAL_TIM_PWM_Stop_DMA+0x138>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6a1a      	ldr	r2, [r3, #32]
 800a0de:	f241 1311 	movw	r3, #4369	; 0x1111
 800a0e2:	4013      	ands	r3, r2
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10f      	bne.n	800a108 <HAL_TIM_PWM_Stop_DMA+0x138>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	6a1a      	ldr	r2, [r3, #32]
 800a0ee:	f240 4344 	movw	r3, #1092	; 0x444
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d107      	bne.n	800a108 <HAL_TIM_PWM_Stop_DMA+0x138>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a106:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	6a1a      	ldr	r2, [r3, #32]
 800a10e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a112:	4013      	ands	r3, r2
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10f      	bne.n	800a138 <HAL_TIM_PWM_Stop_DMA+0x168>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	6a1a      	ldr	r2, [r3, #32]
 800a11e:	f240 4344 	movw	r3, #1092	; 0x444
 800a122:	4013      	ands	r3, r2
 800a124:	2b00      	cmp	r3, #0
 800a126:	d107      	bne.n	800a138 <HAL_TIM_PWM_Stop_DMA+0x168>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f022 0201 	bic.w	r2, r2, #1
 800a136:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d104      	bne.n	800a148 <HAL_TIM_PWM_Stop_DMA+0x178>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2201      	movs	r2, #1
 800a142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a146:	e023      	b.n	800a190 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	2b04      	cmp	r3, #4
 800a14c:	d104      	bne.n	800a158 <HAL_TIM_PWM_Stop_DMA+0x188>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2201      	movs	r2, #1
 800a152:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a156:	e01b      	b.n	800a190 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	2b08      	cmp	r3, #8
 800a15c:	d104      	bne.n	800a168 <HAL_TIM_PWM_Stop_DMA+0x198>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2201      	movs	r2, #1
 800a162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a166:	e013      	b.n	800a190 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	2b0c      	cmp	r3, #12
 800a16c:	d104      	bne.n	800a178 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2201      	movs	r2, #1
 800a172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a176:	e00b      	b.n	800a190 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	2b10      	cmp	r3, #16
 800a17c:	d104      	bne.n	800a188 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2201      	movs	r2, #1
 800a182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a186:	e003      	b.n	800a190 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3708      	adds	r7, #8
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	40010000 	.word	0x40010000
 800a1a0:	40010400 	.word	0x40010400
 800a1a4:	40014000 	.word	0x40014000
 800a1a8:	40014400 	.word	0x40014400
 800a1ac:	40014800 	.word	0x40014800

0800a1b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d101      	bne.n	800a1ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a1c6:	2302      	movs	r3, #2
 800a1c8:	e0fd      	b.n	800a3c6 <HAL_TIM_PWM_ConfigChannel+0x216>
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2b14      	cmp	r3, #20
 800a1d6:	f200 80f0 	bhi.w	800a3ba <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a1da:	a201      	add	r2, pc, #4	; (adr r2, 800a1e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e0:	0800a235 	.word	0x0800a235
 800a1e4:	0800a3bb 	.word	0x0800a3bb
 800a1e8:	0800a3bb 	.word	0x0800a3bb
 800a1ec:	0800a3bb 	.word	0x0800a3bb
 800a1f0:	0800a275 	.word	0x0800a275
 800a1f4:	0800a3bb 	.word	0x0800a3bb
 800a1f8:	0800a3bb 	.word	0x0800a3bb
 800a1fc:	0800a3bb 	.word	0x0800a3bb
 800a200:	0800a2b7 	.word	0x0800a2b7
 800a204:	0800a3bb 	.word	0x0800a3bb
 800a208:	0800a3bb 	.word	0x0800a3bb
 800a20c:	0800a3bb 	.word	0x0800a3bb
 800a210:	0800a2f7 	.word	0x0800a2f7
 800a214:	0800a3bb 	.word	0x0800a3bb
 800a218:	0800a3bb 	.word	0x0800a3bb
 800a21c:	0800a3bb 	.word	0x0800a3bb
 800a220:	0800a339 	.word	0x0800a339
 800a224:	0800a3bb 	.word	0x0800a3bb
 800a228:	0800a3bb 	.word	0x0800a3bb
 800a22c:	0800a3bb 	.word	0x0800a3bb
 800a230:	0800a379 	.word	0x0800a379
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	68b9      	ldr	r1, [r7, #8]
 800a23a:	4618      	mov	r0, r3
 800a23c:	f000 fb3c 	bl	800a8b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	699a      	ldr	r2, [r3, #24]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f042 0208 	orr.w	r2, r2, #8
 800a24e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	699a      	ldr	r2, [r3, #24]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f022 0204 	bic.w	r2, r2, #4
 800a25e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	6999      	ldr	r1, [r3, #24]
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	691a      	ldr	r2, [r3, #16]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	430a      	orrs	r2, r1
 800a270:	619a      	str	r2, [r3, #24]
      break;
 800a272:	e0a3      	b.n	800a3bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	68b9      	ldr	r1, [r7, #8]
 800a27a:	4618      	mov	r0, r3
 800a27c:	f000 fbac 	bl	800a9d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	699a      	ldr	r2, [r3, #24]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a28e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	699a      	ldr	r2, [r3, #24]
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a29e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	6999      	ldr	r1, [r3, #24]
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	021a      	lsls	r2, r3, #8
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	430a      	orrs	r2, r1
 800a2b2:	619a      	str	r2, [r3, #24]
      break;
 800a2b4:	e082      	b.n	800a3bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	68b9      	ldr	r1, [r7, #8]
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f000 fc15 	bl	800aaec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	69da      	ldr	r2, [r3, #28]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f042 0208 	orr.w	r2, r2, #8
 800a2d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	69da      	ldr	r2, [r3, #28]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f022 0204 	bic.w	r2, r2, #4
 800a2e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	69d9      	ldr	r1, [r3, #28]
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	691a      	ldr	r2, [r3, #16]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	430a      	orrs	r2, r1
 800a2f2:	61da      	str	r2, [r3, #28]
      break;
 800a2f4:	e062      	b.n	800a3bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	68b9      	ldr	r1, [r7, #8]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f000 fc7b 	bl	800abf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	69da      	ldr	r2, [r3, #28]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	69da      	ldr	r2, [r3, #28]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	69d9      	ldr	r1, [r3, #28]
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	021a      	lsls	r2, r3, #8
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	430a      	orrs	r2, r1
 800a334:	61da      	str	r2, [r3, #28]
      break;
 800a336:	e041      	b.n	800a3bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	68b9      	ldr	r1, [r7, #8]
 800a33e:	4618      	mov	r0, r3
 800a340:	f000 fcc2 	bl	800acc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f042 0208 	orr.w	r2, r2, #8
 800a352:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f022 0204 	bic.w	r2, r2, #4
 800a362:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	691a      	ldr	r2, [r3, #16]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	430a      	orrs	r2, r1
 800a374:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a376:	e021      	b.n	800a3bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	68b9      	ldr	r1, [r7, #8]
 800a37e:	4618      	mov	r0, r3
 800a380:	f000 fd04 	bl	800ad8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a392:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	691b      	ldr	r3, [r3, #16]
 800a3ae:	021a      	lsls	r2, r3, #8
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	430a      	orrs	r2, r1
 800a3b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a3b8:	e000      	b.n	800a3bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a3ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop

0800a3d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d101      	bne.n	800a3e8 <HAL_TIM_ConfigClockSource+0x18>
 800a3e4:	2302      	movs	r3, #2
 800a3e6:	e0db      	b.n	800a5a0 <HAL_TIM_ConfigClockSource+0x1d0>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2202      	movs	r2, #2
 800a3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a400:	68fa      	ldr	r2, [r7, #12]
 800a402:	4b69      	ldr	r3, [pc, #420]	; (800a5a8 <HAL_TIM_ConfigClockSource+0x1d8>)
 800a404:	4013      	ands	r3, r2
 800a406:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a40e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a63      	ldr	r2, [pc, #396]	; (800a5ac <HAL_TIM_ConfigClockSource+0x1dc>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	f000 80a9 	beq.w	800a576 <HAL_TIM_ConfigClockSource+0x1a6>
 800a424:	4a61      	ldr	r2, [pc, #388]	; (800a5ac <HAL_TIM_ConfigClockSource+0x1dc>)
 800a426:	4293      	cmp	r3, r2
 800a428:	f200 80ae 	bhi.w	800a588 <HAL_TIM_ConfigClockSource+0x1b8>
 800a42c:	4a60      	ldr	r2, [pc, #384]	; (800a5b0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	f000 80a1 	beq.w	800a576 <HAL_TIM_ConfigClockSource+0x1a6>
 800a434:	4a5e      	ldr	r2, [pc, #376]	; (800a5b0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a436:	4293      	cmp	r3, r2
 800a438:	f200 80a6 	bhi.w	800a588 <HAL_TIM_ConfigClockSource+0x1b8>
 800a43c:	4a5d      	ldr	r2, [pc, #372]	; (800a5b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	f000 8099 	beq.w	800a576 <HAL_TIM_ConfigClockSource+0x1a6>
 800a444:	4a5b      	ldr	r2, [pc, #364]	; (800a5b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a446:	4293      	cmp	r3, r2
 800a448:	f200 809e 	bhi.w	800a588 <HAL_TIM_ConfigClockSource+0x1b8>
 800a44c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a450:	f000 8091 	beq.w	800a576 <HAL_TIM_ConfigClockSource+0x1a6>
 800a454:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a458:	f200 8096 	bhi.w	800a588 <HAL_TIM_ConfigClockSource+0x1b8>
 800a45c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a460:	f000 8089 	beq.w	800a576 <HAL_TIM_ConfigClockSource+0x1a6>
 800a464:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a468:	f200 808e 	bhi.w	800a588 <HAL_TIM_ConfigClockSource+0x1b8>
 800a46c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a470:	d03e      	beq.n	800a4f0 <HAL_TIM_ConfigClockSource+0x120>
 800a472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a476:	f200 8087 	bhi.w	800a588 <HAL_TIM_ConfigClockSource+0x1b8>
 800a47a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a47e:	f000 8085 	beq.w	800a58c <HAL_TIM_ConfigClockSource+0x1bc>
 800a482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a486:	d87f      	bhi.n	800a588 <HAL_TIM_ConfigClockSource+0x1b8>
 800a488:	2b70      	cmp	r3, #112	; 0x70
 800a48a:	d01a      	beq.n	800a4c2 <HAL_TIM_ConfigClockSource+0xf2>
 800a48c:	2b70      	cmp	r3, #112	; 0x70
 800a48e:	d87b      	bhi.n	800a588 <HAL_TIM_ConfigClockSource+0x1b8>
 800a490:	2b60      	cmp	r3, #96	; 0x60
 800a492:	d050      	beq.n	800a536 <HAL_TIM_ConfigClockSource+0x166>
 800a494:	2b60      	cmp	r3, #96	; 0x60
 800a496:	d877      	bhi.n	800a588 <HAL_TIM_ConfigClockSource+0x1b8>
 800a498:	2b50      	cmp	r3, #80	; 0x50
 800a49a:	d03c      	beq.n	800a516 <HAL_TIM_ConfigClockSource+0x146>
 800a49c:	2b50      	cmp	r3, #80	; 0x50
 800a49e:	d873      	bhi.n	800a588 <HAL_TIM_ConfigClockSource+0x1b8>
 800a4a0:	2b40      	cmp	r3, #64	; 0x40
 800a4a2:	d058      	beq.n	800a556 <HAL_TIM_ConfigClockSource+0x186>
 800a4a4:	2b40      	cmp	r3, #64	; 0x40
 800a4a6:	d86f      	bhi.n	800a588 <HAL_TIM_ConfigClockSource+0x1b8>
 800a4a8:	2b30      	cmp	r3, #48	; 0x30
 800a4aa:	d064      	beq.n	800a576 <HAL_TIM_ConfigClockSource+0x1a6>
 800a4ac:	2b30      	cmp	r3, #48	; 0x30
 800a4ae:	d86b      	bhi.n	800a588 <HAL_TIM_ConfigClockSource+0x1b8>
 800a4b0:	2b20      	cmp	r3, #32
 800a4b2:	d060      	beq.n	800a576 <HAL_TIM_ConfigClockSource+0x1a6>
 800a4b4:	2b20      	cmp	r3, #32
 800a4b6:	d867      	bhi.n	800a588 <HAL_TIM_ConfigClockSource+0x1b8>
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d05c      	beq.n	800a576 <HAL_TIM_ConfigClockSource+0x1a6>
 800a4bc:	2b10      	cmp	r3, #16
 800a4be:	d05a      	beq.n	800a576 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a4c0:	e062      	b.n	800a588 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6818      	ldr	r0, [r3, #0]
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	6899      	ldr	r1, [r3, #8]
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	685a      	ldr	r2, [r3, #4]
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	f000 fd3d 	bl	800af50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a4e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	609a      	str	r2, [r3, #8]
      break;
 800a4ee:	e04e      	b.n	800a58e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6818      	ldr	r0, [r3, #0]
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	6899      	ldr	r1, [r3, #8]
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	685a      	ldr	r2, [r3, #4]
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	f000 fd26 	bl	800af50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	689a      	ldr	r2, [r3, #8]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a512:	609a      	str	r2, [r3, #8]
      break;
 800a514:	e03b      	b.n	800a58e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6818      	ldr	r0, [r3, #0]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	6859      	ldr	r1, [r3, #4]
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	461a      	mov	r2, r3
 800a524:	f000 fc96 	bl	800ae54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2150      	movs	r1, #80	; 0x50
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 fcf0 	bl	800af14 <TIM_ITRx_SetConfig>
      break;
 800a534:	e02b      	b.n	800a58e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6818      	ldr	r0, [r3, #0]
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	6859      	ldr	r1, [r3, #4]
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	461a      	mov	r2, r3
 800a544:	f000 fcb5 	bl	800aeb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2160      	movs	r1, #96	; 0x60
 800a54e:	4618      	mov	r0, r3
 800a550:	f000 fce0 	bl	800af14 <TIM_ITRx_SetConfig>
      break;
 800a554:	e01b      	b.n	800a58e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6818      	ldr	r0, [r3, #0]
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	6859      	ldr	r1, [r3, #4]
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	461a      	mov	r2, r3
 800a564:	f000 fc76 	bl	800ae54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2140      	movs	r1, #64	; 0x40
 800a56e:	4618      	mov	r0, r3
 800a570:	f000 fcd0 	bl	800af14 <TIM_ITRx_SetConfig>
      break;
 800a574:	e00b      	b.n	800a58e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4619      	mov	r1, r3
 800a580:	4610      	mov	r0, r2
 800a582:	f000 fcc7 	bl	800af14 <TIM_ITRx_SetConfig>
        break;
 800a586:	e002      	b.n	800a58e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a588:	bf00      	nop
 800a58a:	e000      	b.n	800a58e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a58c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2201      	movs	r2, #1
 800a592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3710      	adds	r7, #16
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	ffceff88 	.word	0xffceff88
 800a5ac:	00100040 	.word	0x00100040
 800a5b0:	00100030 	.word	0x00100030
 800a5b4:	00100020 	.word	0x00100020

0800a5b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a5d4:	bf00      	nop
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ec:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d107      	bne.n	800a608 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2201      	movs	r2, #1
 800a602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a606:	e02a      	b.n	800a65e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d107      	bne.n	800a622 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2202      	movs	r2, #2
 800a616:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a620:	e01d      	b.n	800a65e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d107      	bne.n	800a63c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2204      	movs	r2, #4
 800a630:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2201      	movs	r2, #1
 800a636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a63a:	e010      	b.n	800a65e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	429a      	cmp	r2, r3
 800a644:	d107      	bne.n	800a656 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2208      	movs	r2, #8
 800a64a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a654:	e003      	b.n	800a65e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2201      	movs	r2, #1
 800a65a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f7ff ffb4 	bl	800a5cc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2200      	movs	r2, #0
 800a668:	771a      	strb	r2, [r3, #28]
}
 800a66a:	bf00      	nop
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b084      	sub	sp, #16
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a67e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	429a      	cmp	r2, r3
 800a688:	d10b      	bne.n	800a6a2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2201      	movs	r2, #1
 800a68e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	69db      	ldr	r3, [r3, #28]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d136      	bne.n	800a706 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6a0:	e031      	b.n	800a706 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d10b      	bne.n	800a6c4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2202      	movs	r2, #2
 800a6b0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	69db      	ldr	r3, [r3, #28]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d125      	bne.n	800a706 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6c2:	e020      	b.n	800a706 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d10b      	bne.n	800a6e6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2204      	movs	r2, #4
 800a6d2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	69db      	ldr	r3, [r3, #28]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d114      	bne.n	800a706 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6e4:	e00f      	b.n	800a706 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d10a      	bne.n	800a706 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2208      	movs	r2, #8
 800a6f4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	69db      	ldr	r3, [r3, #28]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d103      	bne.n	800a706 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2201      	movs	r2, #1
 800a702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	f7f6 fbae 	bl	8000e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2200      	movs	r2, #0
 800a710:	771a      	strb	r2, [r3, #28]
}
 800a712:	bf00      	nop
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b084      	sub	sp, #16
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a726:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	429a      	cmp	r2, r3
 800a730:	d103      	bne.n	800a73a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2201      	movs	r2, #1
 800a736:	771a      	strb	r2, [r3, #28]
 800a738:	e019      	b.n	800a76e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	429a      	cmp	r2, r3
 800a742:	d103      	bne.n	800a74c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2202      	movs	r2, #2
 800a748:	771a      	strb	r2, [r3, #28]
 800a74a:	e010      	b.n	800a76e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	429a      	cmp	r2, r3
 800a754:	d103      	bne.n	800a75e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2204      	movs	r2, #4
 800a75a:	771a      	strb	r2, [r3, #28]
 800a75c:	e007      	b.n	800a76e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	429a      	cmp	r2, r3
 800a766:	d102      	bne.n	800a76e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2208      	movs	r2, #8
 800a76c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	f7ff ff22 	bl	800a5b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2200      	movs	r2, #0
 800a778:	771a      	strb	r2, [r3, #28]
}
 800a77a:	bf00      	nop
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
	...

0800a784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4a40      	ldr	r2, [pc, #256]	; (800a898 <TIM_Base_SetConfig+0x114>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d013      	beq.n	800a7c4 <TIM_Base_SetConfig+0x40>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7a2:	d00f      	beq.n	800a7c4 <TIM_Base_SetConfig+0x40>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4a3d      	ldr	r2, [pc, #244]	; (800a89c <TIM_Base_SetConfig+0x118>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d00b      	beq.n	800a7c4 <TIM_Base_SetConfig+0x40>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a3c      	ldr	r2, [pc, #240]	; (800a8a0 <TIM_Base_SetConfig+0x11c>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d007      	beq.n	800a7c4 <TIM_Base_SetConfig+0x40>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	4a3b      	ldr	r2, [pc, #236]	; (800a8a4 <TIM_Base_SetConfig+0x120>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d003      	beq.n	800a7c4 <TIM_Base_SetConfig+0x40>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	4a3a      	ldr	r2, [pc, #232]	; (800a8a8 <TIM_Base_SetConfig+0x124>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d108      	bne.n	800a7d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4a2f      	ldr	r2, [pc, #188]	; (800a898 <TIM_Base_SetConfig+0x114>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d01f      	beq.n	800a81e <TIM_Base_SetConfig+0x9a>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7e4:	d01b      	beq.n	800a81e <TIM_Base_SetConfig+0x9a>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4a2c      	ldr	r2, [pc, #176]	; (800a89c <TIM_Base_SetConfig+0x118>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d017      	beq.n	800a81e <TIM_Base_SetConfig+0x9a>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4a2b      	ldr	r2, [pc, #172]	; (800a8a0 <TIM_Base_SetConfig+0x11c>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d013      	beq.n	800a81e <TIM_Base_SetConfig+0x9a>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a2a      	ldr	r2, [pc, #168]	; (800a8a4 <TIM_Base_SetConfig+0x120>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d00f      	beq.n	800a81e <TIM_Base_SetConfig+0x9a>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a29      	ldr	r2, [pc, #164]	; (800a8a8 <TIM_Base_SetConfig+0x124>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d00b      	beq.n	800a81e <TIM_Base_SetConfig+0x9a>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4a28      	ldr	r2, [pc, #160]	; (800a8ac <TIM_Base_SetConfig+0x128>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d007      	beq.n	800a81e <TIM_Base_SetConfig+0x9a>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4a27      	ldr	r2, [pc, #156]	; (800a8b0 <TIM_Base_SetConfig+0x12c>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d003      	beq.n	800a81e <TIM_Base_SetConfig+0x9a>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4a26      	ldr	r2, [pc, #152]	; (800a8b4 <TIM_Base_SetConfig+0x130>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d108      	bne.n	800a830 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	4313      	orrs	r3, r2
 800a82e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	695b      	ldr	r3, [r3, #20]
 800a83a:	4313      	orrs	r3, r2
 800a83c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	689a      	ldr	r2, [r3, #8]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a10      	ldr	r2, [pc, #64]	; (800a898 <TIM_Base_SetConfig+0x114>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d00f      	beq.n	800a87c <TIM_Base_SetConfig+0xf8>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a12      	ldr	r2, [pc, #72]	; (800a8a8 <TIM_Base_SetConfig+0x124>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d00b      	beq.n	800a87c <TIM_Base_SetConfig+0xf8>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4a11      	ldr	r2, [pc, #68]	; (800a8ac <TIM_Base_SetConfig+0x128>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d007      	beq.n	800a87c <TIM_Base_SetConfig+0xf8>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4a10      	ldr	r2, [pc, #64]	; (800a8b0 <TIM_Base_SetConfig+0x12c>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d003      	beq.n	800a87c <TIM_Base_SetConfig+0xf8>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	4a0f      	ldr	r2, [pc, #60]	; (800a8b4 <TIM_Base_SetConfig+0x130>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d103      	bne.n	800a884 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	691a      	ldr	r2, [r3, #16]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	615a      	str	r2, [r3, #20]
}
 800a88a:	bf00      	nop
 800a88c:	3714      	adds	r7, #20
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop
 800a898:	40010000 	.word	0x40010000
 800a89c:	40000400 	.word	0x40000400
 800a8a0:	40000800 	.word	0x40000800
 800a8a4:	40000c00 	.word	0x40000c00
 800a8a8:	40010400 	.word	0x40010400
 800a8ac:	40014000 	.word	0x40014000
 800a8b0:	40014400 	.word	0x40014400
 800a8b4:	40014800 	.word	0x40014800

0800a8b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b087      	sub	sp, #28
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a1b      	ldr	r3, [r3, #32]
 800a8c6:	f023 0201 	bic.w	r2, r3, #1
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6a1b      	ldr	r3, [r3, #32]
 800a8d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	699b      	ldr	r3, [r3, #24]
 800a8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	4b37      	ldr	r3, [pc, #220]	; (800a9c0 <TIM_OC1_SetConfig+0x108>)
 800a8e4:	4013      	ands	r3, r2
 800a8e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f023 0303 	bic.w	r3, r3, #3
 800a8ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	68fa      	ldr	r2, [r7, #12]
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	f023 0302 	bic.w	r3, r3, #2
 800a900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	697a      	ldr	r2, [r7, #20]
 800a908:	4313      	orrs	r3, r2
 800a90a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a2d      	ldr	r2, [pc, #180]	; (800a9c4 <TIM_OC1_SetConfig+0x10c>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d00f      	beq.n	800a934 <TIM_OC1_SetConfig+0x7c>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4a2c      	ldr	r2, [pc, #176]	; (800a9c8 <TIM_OC1_SetConfig+0x110>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d00b      	beq.n	800a934 <TIM_OC1_SetConfig+0x7c>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	4a2b      	ldr	r2, [pc, #172]	; (800a9cc <TIM_OC1_SetConfig+0x114>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d007      	beq.n	800a934 <TIM_OC1_SetConfig+0x7c>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a2a      	ldr	r2, [pc, #168]	; (800a9d0 <TIM_OC1_SetConfig+0x118>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d003      	beq.n	800a934 <TIM_OC1_SetConfig+0x7c>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a29      	ldr	r2, [pc, #164]	; (800a9d4 <TIM_OC1_SetConfig+0x11c>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d10c      	bne.n	800a94e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	f023 0308 	bic.w	r3, r3, #8
 800a93a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	4313      	orrs	r3, r2
 800a944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	f023 0304 	bic.w	r3, r3, #4
 800a94c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a1c      	ldr	r2, [pc, #112]	; (800a9c4 <TIM_OC1_SetConfig+0x10c>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d00f      	beq.n	800a976 <TIM_OC1_SetConfig+0xbe>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a1b      	ldr	r2, [pc, #108]	; (800a9c8 <TIM_OC1_SetConfig+0x110>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d00b      	beq.n	800a976 <TIM_OC1_SetConfig+0xbe>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4a1a      	ldr	r2, [pc, #104]	; (800a9cc <TIM_OC1_SetConfig+0x114>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d007      	beq.n	800a976 <TIM_OC1_SetConfig+0xbe>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a19      	ldr	r2, [pc, #100]	; (800a9d0 <TIM_OC1_SetConfig+0x118>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d003      	beq.n	800a976 <TIM_OC1_SetConfig+0xbe>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a18      	ldr	r2, [pc, #96]	; (800a9d4 <TIM_OC1_SetConfig+0x11c>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d111      	bne.n	800a99a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a97c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	695b      	ldr	r3, [r3, #20]
 800a98a:	693a      	ldr	r2, [r7, #16]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	699b      	ldr	r3, [r3, #24]
 800a994:	693a      	ldr	r2, [r7, #16]
 800a996:	4313      	orrs	r3, r2
 800a998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	693a      	ldr	r2, [r7, #16]
 800a99e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	68fa      	ldr	r2, [r7, #12]
 800a9a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	685a      	ldr	r2, [r3, #4]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	697a      	ldr	r2, [r7, #20]
 800a9b2:	621a      	str	r2, [r3, #32]
}
 800a9b4:	bf00      	nop
 800a9b6:	371c      	adds	r7, #28
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr
 800a9c0:	fffeff8f 	.word	0xfffeff8f
 800a9c4:	40010000 	.word	0x40010000
 800a9c8:	40010400 	.word	0x40010400
 800a9cc:	40014000 	.word	0x40014000
 800a9d0:	40014400 	.word	0x40014400
 800a9d4:	40014800 	.word	0x40014800

0800a9d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b087      	sub	sp, #28
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a1b      	ldr	r3, [r3, #32]
 800a9e6:	f023 0210 	bic.w	r2, r3, #16
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6a1b      	ldr	r3, [r3, #32]
 800a9f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	699b      	ldr	r3, [r3, #24]
 800a9fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	4b34      	ldr	r3, [pc, #208]	; (800aad4 <TIM_OC2_SetConfig+0xfc>)
 800aa04:	4013      	ands	r3, r2
 800aa06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	021b      	lsls	r3, r3, #8
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	f023 0320 	bic.w	r3, r3, #32
 800aa22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	011b      	lsls	r3, r3, #4
 800aa2a:	697a      	ldr	r2, [r7, #20]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a29      	ldr	r2, [pc, #164]	; (800aad8 <TIM_OC2_SetConfig+0x100>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d003      	beq.n	800aa40 <TIM_OC2_SetConfig+0x68>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4a28      	ldr	r2, [pc, #160]	; (800aadc <TIM_OC2_SetConfig+0x104>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d10d      	bne.n	800aa5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	011b      	lsls	r3, r3, #4
 800aa4e:	697a      	ldr	r2, [r7, #20]
 800aa50:	4313      	orrs	r3, r2
 800aa52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a1e      	ldr	r2, [pc, #120]	; (800aad8 <TIM_OC2_SetConfig+0x100>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d00f      	beq.n	800aa84 <TIM_OC2_SetConfig+0xac>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a1d      	ldr	r2, [pc, #116]	; (800aadc <TIM_OC2_SetConfig+0x104>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d00b      	beq.n	800aa84 <TIM_OC2_SetConfig+0xac>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4a1c      	ldr	r2, [pc, #112]	; (800aae0 <TIM_OC2_SetConfig+0x108>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d007      	beq.n	800aa84 <TIM_OC2_SetConfig+0xac>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4a1b      	ldr	r2, [pc, #108]	; (800aae4 <TIM_OC2_SetConfig+0x10c>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d003      	beq.n	800aa84 <TIM_OC2_SetConfig+0xac>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4a1a      	ldr	r2, [pc, #104]	; (800aae8 <TIM_OC2_SetConfig+0x110>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d113      	bne.n	800aaac <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	695b      	ldr	r3, [r3, #20]
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	693a      	ldr	r2, [r7, #16]
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	699b      	ldr	r3, [r3, #24]
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	693a      	ldr	r2, [r7, #16]
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	693a      	ldr	r2, [r7, #16]
 800aab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	685a      	ldr	r2, [r3, #4]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	697a      	ldr	r2, [r7, #20]
 800aac4:	621a      	str	r2, [r3, #32]
}
 800aac6:	bf00      	nop
 800aac8:	371c      	adds	r7, #28
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	feff8fff 	.word	0xfeff8fff
 800aad8:	40010000 	.word	0x40010000
 800aadc:	40010400 	.word	0x40010400
 800aae0:	40014000 	.word	0x40014000
 800aae4:	40014400 	.word	0x40014400
 800aae8:	40014800 	.word	0x40014800

0800aaec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b087      	sub	sp, #28
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a1b      	ldr	r3, [r3, #32]
 800aafa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a1b      	ldr	r3, [r3, #32]
 800ab06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	69db      	ldr	r3, [r3, #28]
 800ab12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f023 0303 	bic.w	r3, r3, #3
 800ab22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	021b      	lsls	r3, r3, #8
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a27      	ldr	r2, [pc, #156]	; (800abe4 <TIM_OC3_SetConfig+0xf8>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d003      	beq.n	800ab52 <TIM_OC3_SetConfig+0x66>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a26      	ldr	r2, [pc, #152]	; (800abe8 <TIM_OC3_SetConfig+0xfc>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d10d      	bne.n	800ab6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	021b      	lsls	r3, r3, #8
 800ab60:	697a      	ldr	r2, [r7, #20]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a1c      	ldr	r2, [pc, #112]	; (800abe4 <TIM_OC3_SetConfig+0xf8>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d00f      	beq.n	800ab96 <TIM_OC3_SetConfig+0xaa>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4a1b      	ldr	r2, [pc, #108]	; (800abe8 <TIM_OC3_SetConfig+0xfc>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d00b      	beq.n	800ab96 <TIM_OC3_SetConfig+0xaa>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a1a      	ldr	r2, [pc, #104]	; (800abec <TIM_OC3_SetConfig+0x100>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d007      	beq.n	800ab96 <TIM_OC3_SetConfig+0xaa>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	4a19      	ldr	r2, [pc, #100]	; (800abf0 <TIM_OC3_SetConfig+0x104>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d003      	beq.n	800ab96 <TIM_OC3_SetConfig+0xaa>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a18      	ldr	r2, [pc, #96]	; (800abf4 <TIM_OC3_SetConfig+0x108>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d113      	bne.n	800abbe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	695b      	ldr	r3, [r3, #20]
 800abaa:	011b      	lsls	r3, r3, #4
 800abac:	693a      	ldr	r2, [r7, #16]
 800abae:	4313      	orrs	r3, r2
 800abb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	699b      	ldr	r3, [r3, #24]
 800abb6:	011b      	lsls	r3, r3, #4
 800abb8:	693a      	ldr	r2, [r7, #16]
 800abba:	4313      	orrs	r3, r2
 800abbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	693a      	ldr	r2, [r7, #16]
 800abc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	685a      	ldr	r2, [r3, #4]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	697a      	ldr	r2, [r7, #20]
 800abd6:	621a      	str	r2, [r3, #32]
}
 800abd8:	bf00      	nop
 800abda:	371c      	adds	r7, #28
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr
 800abe4:	40010000 	.word	0x40010000
 800abe8:	40010400 	.word	0x40010400
 800abec:	40014000 	.word	0x40014000
 800abf0:	40014400 	.word	0x40014400
 800abf4:	40014800 	.word	0x40014800

0800abf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b087      	sub	sp, #28
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a1b      	ldr	r3, [r3, #32]
 800ac06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	69db      	ldr	r3, [r3, #28]
 800ac1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	021b      	lsls	r3, r3, #8
 800ac36:	68fa      	ldr	r2, [r7, #12]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	031b      	lsls	r3, r3, #12
 800ac4a:	693a      	ldr	r2, [r7, #16]
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a18      	ldr	r2, [pc, #96]	; (800acb4 <TIM_OC4_SetConfig+0xbc>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d00f      	beq.n	800ac78 <TIM_OC4_SetConfig+0x80>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a17      	ldr	r2, [pc, #92]	; (800acb8 <TIM_OC4_SetConfig+0xc0>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d00b      	beq.n	800ac78 <TIM_OC4_SetConfig+0x80>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a16      	ldr	r2, [pc, #88]	; (800acbc <TIM_OC4_SetConfig+0xc4>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d007      	beq.n	800ac78 <TIM_OC4_SetConfig+0x80>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a15      	ldr	r2, [pc, #84]	; (800acc0 <TIM_OC4_SetConfig+0xc8>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d003      	beq.n	800ac78 <TIM_OC4_SetConfig+0x80>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	4a14      	ldr	r2, [pc, #80]	; (800acc4 <TIM_OC4_SetConfig+0xcc>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d109      	bne.n	800ac8c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	695b      	ldr	r3, [r3, #20]
 800ac84:	019b      	lsls	r3, r3, #6
 800ac86:	697a      	ldr	r2, [r7, #20]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	697a      	ldr	r2, [r7, #20]
 800ac90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	68fa      	ldr	r2, [r7, #12]
 800ac96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	685a      	ldr	r2, [r3, #4]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	693a      	ldr	r2, [r7, #16]
 800aca4:	621a      	str	r2, [r3, #32]
}
 800aca6:	bf00      	nop
 800aca8:	371c      	adds	r7, #28
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop
 800acb4:	40010000 	.word	0x40010000
 800acb8:	40010400 	.word	0x40010400
 800acbc:	40014000 	.word	0x40014000
 800acc0:	40014400 	.word	0x40014400
 800acc4:	40014800 	.word	0x40014800

0800acc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800acc8:	b480      	push	{r7}
 800acca:	b087      	sub	sp, #28
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a1b      	ldr	r3, [r3, #32]
 800acd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a1b      	ldr	r3, [r3, #32]
 800ace2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	4313      	orrs	r3, r2
 800ad00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ad08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	041b      	lsls	r3, r3, #16
 800ad10:	693a      	ldr	r2, [r7, #16]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	4a17      	ldr	r2, [pc, #92]	; (800ad78 <TIM_OC5_SetConfig+0xb0>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d00f      	beq.n	800ad3e <TIM_OC5_SetConfig+0x76>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a16      	ldr	r2, [pc, #88]	; (800ad7c <TIM_OC5_SetConfig+0xb4>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d00b      	beq.n	800ad3e <TIM_OC5_SetConfig+0x76>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	4a15      	ldr	r2, [pc, #84]	; (800ad80 <TIM_OC5_SetConfig+0xb8>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d007      	beq.n	800ad3e <TIM_OC5_SetConfig+0x76>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4a14      	ldr	r2, [pc, #80]	; (800ad84 <TIM_OC5_SetConfig+0xbc>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d003      	beq.n	800ad3e <TIM_OC5_SetConfig+0x76>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4a13      	ldr	r2, [pc, #76]	; (800ad88 <TIM_OC5_SetConfig+0xc0>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d109      	bne.n	800ad52 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	695b      	ldr	r3, [r3, #20]
 800ad4a:	021b      	lsls	r3, r3, #8
 800ad4c:	697a      	ldr	r2, [r7, #20]
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	697a      	ldr	r2, [r7, #20]
 800ad56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	685a      	ldr	r2, [r3, #4]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	693a      	ldr	r2, [r7, #16]
 800ad6a:	621a      	str	r2, [r3, #32]
}
 800ad6c:	bf00      	nop
 800ad6e:	371c      	adds	r7, #28
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr
 800ad78:	40010000 	.word	0x40010000
 800ad7c:	40010400 	.word	0x40010400
 800ad80:	40014000 	.word	0x40014000
 800ad84:	40014400 	.word	0x40014400
 800ad88:	40014800 	.word	0x40014800

0800ad8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b087      	sub	sp, #28
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6a1b      	ldr	r3, [r3, #32]
 800ad9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a1b      	ldr	r3, [r3, #32]
 800ada6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	021b      	lsls	r3, r3, #8
 800adc2:	68fa      	ldr	r2, [r7, #12]
 800adc4:	4313      	orrs	r3, r2
 800adc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800adce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	051b      	lsls	r3, r3, #20
 800add6:	693a      	ldr	r2, [r7, #16]
 800add8:	4313      	orrs	r3, r2
 800adda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4a18      	ldr	r2, [pc, #96]	; (800ae40 <TIM_OC6_SetConfig+0xb4>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d00f      	beq.n	800ae04 <TIM_OC6_SetConfig+0x78>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4a17      	ldr	r2, [pc, #92]	; (800ae44 <TIM_OC6_SetConfig+0xb8>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d00b      	beq.n	800ae04 <TIM_OC6_SetConfig+0x78>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4a16      	ldr	r2, [pc, #88]	; (800ae48 <TIM_OC6_SetConfig+0xbc>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d007      	beq.n	800ae04 <TIM_OC6_SetConfig+0x78>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4a15      	ldr	r2, [pc, #84]	; (800ae4c <TIM_OC6_SetConfig+0xc0>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d003      	beq.n	800ae04 <TIM_OC6_SetConfig+0x78>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a14      	ldr	r2, [pc, #80]	; (800ae50 <TIM_OC6_SetConfig+0xc4>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d109      	bne.n	800ae18 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ae0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	695b      	ldr	r3, [r3, #20]
 800ae10:	029b      	lsls	r3, r3, #10
 800ae12:	697a      	ldr	r2, [r7, #20]
 800ae14:	4313      	orrs	r3, r2
 800ae16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	697a      	ldr	r2, [r7, #20]
 800ae1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	685a      	ldr	r2, [r3, #4]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	693a      	ldr	r2, [r7, #16]
 800ae30:	621a      	str	r2, [r3, #32]
}
 800ae32:	bf00      	nop
 800ae34:	371c      	adds	r7, #28
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	40010000 	.word	0x40010000
 800ae44:	40010400 	.word	0x40010400
 800ae48:	40014000 	.word	0x40014000
 800ae4c:	40014400 	.word	0x40014400
 800ae50:	40014800 	.word	0x40014800

0800ae54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b087      	sub	sp, #28
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	6a1b      	ldr	r3, [r3, #32]
 800ae64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	6a1b      	ldr	r3, [r3, #32]
 800ae6a:	f023 0201 	bic.w	r2, r3, #1
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	699b      	ldr	r3, [r3, #24]
 800ae76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	011b      	lsls	r3, r3, #4
 800ae84:	693a      	ldr	r2, [r7, #16]
 800ae86:	4313      	orrs	r3, r2
 800ae88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	f023 030a 	bic.w	r3, r3, #10
 800ae90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	693a      	ldr	r2, [r7, #16]
 800ae9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	697a      	ldr	r2, [r7, #20]
 800aea4:	621a      	str	r2, [r3, #32]
}
 800aea6:	bf00      	nop
 800aea8:	371c      	adds	r7, #28
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr

0800aeb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aeb2:	b480      	push	{r7}
 800aeb4:	b087      	sub	sp, #28
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	60f8      	str	r0, [r7, #12]
 800aeba:	60b9      	str	r1, [r7, #8]
 800aebc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	6a1b      	ldr	r3, [r3, #32]
 800aec2:	f023 0210 	bic.w	r2, r3, #16
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	699b      	ldr	r3, [r3, #24]
 800aece:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6a1b      	ldr	r3, [r3, #32]
 800aed4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aedc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	031b      	lsls	r3, r3, #12
 800aee2:	697a      	ldr	r2, [r7, #20]
 800aee4:	4313      	orrs	r3, r2
 800aee6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aeee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	011b      	lsls	r3, r3, #4
 800aef4:	693a      	ldr	r2, [r7, #16]
 800aef6:	4313      	orrs	r3, r2
 800aef8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	697a      	ldr	r2, [r7, #20]
 800aefe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	693a      	ldr	r2, [r7, #16]
 800af04:	621a      	str	r2, [r3, #32]
}
 800af06:	bf00      	nop
 800af08:	371c      	adds	r7, #28
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
	...

0800af14 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af14:	b480      	push	{r7}
 800af16:	b085      	sub	sp, #20
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	4b09      	ldr	r3, [pc, #36]	; (800af4c <TIM_ITRx_SetConfig+0x38>)
 800af28:	4013      	ands	r3, r2
 800af2a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af2c:	683a      	ldr	r2, [r7, #0]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	4313      	orrs	r3, r2
 800af32:	f043 0307 	orr.w	r3, r3, #7
 800af36:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	609a      	str	r2, [r3, #8]
}
 800af3e:	bf00      	nop
 800af40:	3714      	adds	r7, #20
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr
 800af4a:	bf00      	nop
 800af4c:	ffcfff8f 	.word	0xffcfff8f

0800af50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af50:	b480      	push	{r7}
 800af52:	b087      	sub	sp, #28
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
 800af5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	021a      	lsls	r2, r3, #8
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	431a      	orrs	r2, r3
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	4313      	orrs	r3, r2
 800af78:	697a      	ldr	r2, [r7, #20]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	697a      	ldr	r2, [r7, #20]
 800af82:	609a      	str	r2, [r3, #8]
}
 800af84:	bf00      	nop
 800af86:	371c      	adds	r7, #28
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800af90:	b480      	push	{r7}
 800af92:	b087      	sub	sp, #28
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	f003 031f 	and.w	r3, r3, #31
 800afa2:	2201      	movs	r2, #1
 800afa4:	fa02 f303 	lsl.w	r3, r2, r3
 800afa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6a1a      	ldr	r2, [r3, #32]
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	43db      	mvns	r3, r3
 800afb2:	401a      	ands	r2, r3
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6a1a      	ldr	r2, [r3, #32]
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	f003 031f 	and.w	r3, r3, #31
 800afc2:	6879      	ldr	r1, [r7, #4]
 800afc4:	fa01 f303 	lsl.w	r3, r1, r3
 800afc8:	431a      	orrs	r2, r3
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	621a      	str	r2, [r3, #32]
}
 800afce:	bf00      	nop
 800afd0:	371c      	adds	r7, #28
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
	...

0800afdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800afdc:	b480      	push	{r7}
 800afde:	b085      	sub	sp, #20
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afec:	2b01      	cmp	r3, #1
 800afee:	d101      	bne.n	800aff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aff0:	2302      	movs	r3, #2
 800aff2:	e068      	b.n	800b0c6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2201      	movs	r2, #1
 800aff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2202      	movs	r2, #2
 800b000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	689b      	ldr	r3, [r3, #8]
 800b012:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a2e      	ldr	r2, [pc, #184]	; (800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d004      	beq.n	800b028 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4a2d      	ldr	r2, [pc, #180]	; (800b0d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d108      	bne.n	800b03a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b02e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	4313      	orrs	r3, r2
 800b038:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b040:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	68fa      	ldr	r2, [r7, #12]
 800b048:	4313      	orrs	r3, r2
 800b04a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	68fa      	ldr	r2, [r7, #12]
 800b052:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a1e      	ldr	r2, [pc, #120]	; (800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d01d      	beq.n	800b09a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b066:	d018      	beq.n	800b09a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a1b      	ldr	r2, [pc, #108]	; (800b0dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d013      	beq.n	800b09a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a1a      	ldr	r2, [pc, #104]	; (800b0e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d00e      	beq.n	800b09a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a18      	ldr	r2, [pc, #96]	; (800b0e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d009      	beq.n	800b09a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a13      	ldr	r2, [pc, #76]	; (800b0d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d004      	beq.n	800b09a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a14      	ldr	r2, [pc, #80]	; (800b0e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d10c      	bne.n	800b0b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	68ba      	ldr	r2, [r7, #8]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	68ba      	ldr	r2, [r7, #8]
 800b0b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3714      	adds	r7, #20
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop
 800b0d4:	40010000 	.word	0x40010000
 800b0d8:	40010400 	.word	0x40010400
 800b0dc:	40000400 	.word	0x40000400
 800b0e0:	40000800 	.word	0x40000800
 800b0e4:	40000c00 	.word	0x40000c00
 800b0e8:	40001800 	.word	0x40001800

0800b0ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b085      	sub	sp, #20
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b100:	2b01      	cmp	r3, #1
 800b102:	d101      	bne.n	800b108 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b104:	2302      	movs	r3, #2
 800b106:	e065      	b.n	800b1d4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2201      	movs	r2, #1
 800b10c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	68db      	ldr	r3, [r3, #12]
 800b11a:	4313      	orrs	r3, r2
 800b11c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	4313      	orrs	r3, r2
 800b12a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	4313      	orrs	r3, r2
 800b138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4313      	orrs	r3, r2
 800b146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	691b      	ldr	r3, [r3, #16]
 800b152:	4313      	orrs	r3, r2
 800b154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	695b      	ldr	r3, [r3, #20]
 800b160:	4313      	orrs	r3, r2
 800b162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b16e:	4313      	orrs	r3, r2
 800b170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	699b      	ldr	r3, [r3, #24]
 800b17c:	041b      	lsls	r3, r3, #16
 800b17e:	4313      	orrs	r3, r2
 800b180:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a16      	ldr	r2, [pc, #88]	; (800b1e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d004      	beq.n	800b196 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a14      	ldr	r2, [pc, #80]	; (800b1e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d115      	bne.n	800b1c2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a0:	051b      	lsls	r3, r3, #20
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	69db      	ldr	r3, [r3, #28]
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	6a1b      	ldr	r3, [r3, #32]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	68fa      	ldr	r2, [r7, #12]
 800b1c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1d2:	2300      	movs	r3, #0
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3714      	adds	r7, #20
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr
 800b1e0:	40010000 	.word	0x40010000
 800b1e4:	40010400 	.word	0x40010400

0800b1e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d101      	bne.n	800b1fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e042      	b.n	800b280 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b200:	2b00      	cmp	r3, #0
 800b202:	d106      	bne.n	800b212 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f7f6 fbab 	bl	8001968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2224      	movs	r2, #36	; 0x24
 800b216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f022 0201 	bic.w	r2, r2, #1
 800b228:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 fbe2 	bl	800b9f4 <UART_SetConfig>
 800b230:	4603      	mov	r3, r0
 800b232:	2b01      	cmp	r3, #1
 800b234:	d101      	bne.n	800b23a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	e022      	b.n	800b280 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d002      	beq.n	800b248 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f001 f936 	bl	800c4b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	685a      	ldr	r2, [r3, #4]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b256:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	689a      	ldr	r2, [r3, #8]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b266:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f042 0201 	orr.w	r2, r2, #1
 800b276:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f001 f9bd 	bl	800c5f8 <UART_CheckIdleState>
 800b27e:	4603      	mov	r3, r0
}
 800b280:	4618      	mov	r0, r3
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b08a      	sub	sp, #40	; 0x28
 800b28c:	af02      	add	r7, sp, #8
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	603b      	str	r3, [r7, #0]
 800b294:	4613      	mov	r3, r2
 800b296:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b29e:	2b20      	cmp	r3, #32
 800b2a0:	f040 8083 	bne.w	800b3aa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d002      	beq.n	800b2b0 <HAL_UART_Transmit+0x28>
 800b2aa:	88fb      	ldrh	r3, [r7, #6]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d101      	bne.n	800b2b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	e07b      	b.n	800b3ac <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d101      	bne.n	800b2c2 <HAL_UART_Transmit+0x3a>
 800b2be:	2302      	movs	r3, #2
 800b2c0:	e074      	b.n	800b3ac <HAL_UART_Transmit+0x124>
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2221      	movs	r2, #33	; 0x21
 800b2d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b2da:	f7f6 fd81 	bl	8001de0 <HAL_GetTick>
 800b2de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	88fa      	ldrh	r2, [r7, #6]
 800b2e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	88fa      	ldrh	r2, [r7, #6]
 800b2ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2f8:	d108      	bne.n	800b30c <HAL_UART_Transmit+0x84>
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d104      	bne.n	800b30c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b302:	2300      	movs	r3, #0
 800b304:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	61bb      	str	r3, [r7, #24]
 800b30a:	e003      	b.n	800b314 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b310:	2300      	movs	r3, #0
 800b312:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2200      	movs	r2, #0
 800b318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b31c:	e02c      	b.n	800b378 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	2200      	movs	r2, #0
 800b326:	2180      	movs	r1, #128	; 0x80
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	f001 f9b0 	bl	800c68e <UART_WaitOnFlagUntilTimeout>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d001      	beq.n	800b338 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b334:	2303      	movs	r3, #3
 800b336:	e039      	b.n	800b3ac <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d10b      	bne.n	800b356 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	881b      	ldrh	r3, [r3, #0]
 800b342:	461a      	mov	r2, r3
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b34c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	3302      	adds	r3, #2
 800b352:	61bb      	str	r3, [r7, #24]
 800b354:	e007      	b.n	800b366 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	781a      	ldrb	r2, [r3, #0]
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	3301      	adds	r3, #1
 800b364:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	3b01      	subs	r3, #1
 800b370:	b29a      	uxth	r2, r3
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b37e:	b29b      	uxth	r3, r3
 800b380:	2b00      	cmp	r3, #0
 800b382:	d1cc      	bne.n	800b31e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	9300      	str	r3, [sp, #0]
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	2200      	movs	r2, #0
 800b38c:	2140      	movs	r1, #64	; 0x40
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	f001 f97d 	bl	800c68e <UART_WaitOnFlagUntilTimeout>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d001      	beq.n	800b39e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b39a:	2303      	movs	r3, #3
 800b39c:	e006      	b.n	800b3ac <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2220      	movs	r2, #32
 800b3a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	e000      	b.n	800b3ac <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b3aa:	2302      	movs	r3, #2
  }
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3720      	adds	r7, #32
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	4613      	mov	r3, r2
 800b3c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3c8:	2b20      	cmp	r3, #32
 800b3ca:	d131      	bne.n	800b430 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d002      	beq.n	800b3d8 <HAL_UART_Receive_IT+0x24>
 800b3d2:	88fb      	ldrh	r3, [r7, #6]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d101      	bne.n	800b3dc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e02a      	b.n	800b432 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d101      	bne.n	800b3ea <HAL_UART_Receive_IT+0x36>
 800b3e6:	2302      	movs	r3, #2
 800b3e8:	e023      	b.n	800b432 <HAL_UART_Receive_IT+0x7e>
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a0f      	ldr	r2, [pc, #60]	; (800b43c <HAL_UART_Receive_IT+0x88>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d00e      	beq.n	800b420 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d007      	beq.n	800b420 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b41e:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b420:	88fb      	ldrh	r3, [r7, #6]
 800b422:	461a      	mov	r2, r3
 800b424:	68b9      	ldr	r1, [r7, #8]
 800b426:	68f8      	ldr	r0, [r7, #12]
 800b428:	f001 f9b2 	bl	800c790 <UART_Start_Receive_IT>
 800b42c:	4603      	mov	r3, r0
 800b42e:	e000      	b.n	800b432 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b430:	2302      	movs	r3, #2
  }
}
 800b432:	4618      	mov	r0, r3
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	58000c00 	.word	0x58000c00

0800b440 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b088      	sub	sp, #32
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	69db      	ldr	r3, [r3, #28]
 800b44e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b460:	69fa      	ldr	r2, [r7, #28]
 800b462:	f640 030f 	movw	r3, #2063	; 0x80f
 800b466:	4013      	ands	r3, r2
 800b468:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d118      	bne.n	800b4a2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	f003 0320 	and.w	r3, r3, #32
 800b476:	2b00      	cmp	r3, #0
 800b478:	d013      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b47a:	69bb      	ldr	r3, [r7, #24]
 800b47c:	f003 0320 	and.w	r3, r3, #32
 800b480:	2b00      	cmp	r3, #0
 800b482:	d104      	bne.n	800b48e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d009      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b492:	2b00      	cmp	r3, #0
 800b494:	f000 8282 	beq.w	800b99c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	4798      	blx	r3
      }
      return;
 800b4a0:	e27c      	b.n	800b99c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	f000 80ef 	beq.w	800b688 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b4aa:	697a      	ldr	r2, [r7, #20]
 800b4ac:	4b73      	ldr	r3, [pc, #460]	; (800b67c <HAL_UART_IRQHandler+0x23c>)
 800b4ae:	4013      	ands	r3, r2
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d105      	bne.n	800b4c0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b4b4:	69ba      	ldr	r2, [r7, #24]
 800b4b6:	4b72      	ldr	r3, [pc, #456]	; (800b680 <HAL_UART_IRQHandler+0x240>)
 800b4b8:	4013      	ands	r3, r2
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	f000 80e4 	beq.w	800b688 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	f003 0301 	and.w	r3, r3, #1
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d010      	beq.n	800b4ec <HAL_UART_IRQHandler+0xac>
 800b4ca:	69bb      	ldr	r3, [r7, #24]
 800b4cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d00b      	beq.n	800b4ec <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4e2:	f043 0201 	orr.w	r2, r3, #1
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	f003 0302 	and.w	r3, r3, #2
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d010      	beq.n	800b518 <HAL_UART_IRQHandler+0xd8>
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	f003 0301 	and.w	r3, r3, #1
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d00b      	beq.n	800b518 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2202      	movs	r2, #2
 800b506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b50e:	f043 0204 	orr.w	r2, r3, #4
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	f003 0304 	and.w	r3, r3, #4
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d010      	beq.n	800b544 <HAL_UART_IRQHandler+0x104>
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	f003 0301 	and.w	r3, r3, #1
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00b      	beq.n	800b544 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2204      	movs	r2, #4
 800b532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b53a:	f043 0202 	orr.w	r2, r3, #2
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	f003 0308 	and.w	r3, r3, #8
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d015      	beq.n	800b57a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	f003 0320 	and.w	r3, r3, #32
 800b554:	2b00      	cmp	r3, #0
 800b556:	d104      	bne.n	800b562 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b558:	697a      	ldr	r2, [r7, #20]
 800b55a:	4b48      	ldr	r3, [pc, #288]	; (800b67c <HAL_UART_IRQHandler+0x23c>)
 800b55c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00b      	beq.n	800b57a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2208      	movs	r2, #8
 800b568:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b570:	f043 0208 	orr.w	r2, r3, #8
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b580:	2b00      	cmp	r3, #0
 800b582:	d011      	beq.n	800b5a8 <HAL_UART_IRQHandler+0x168>
 800b584:	69bb      	ldr	r3, [r7, #24]
 800b586:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00c      	beq.n	800b5a8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b59e:	f043 0220 	orr.w	r2, r3, #32
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	f000 81f6 	beq.w	800b9a0 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	f003 0320 	and.w	r3, r3, #32
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d011      	beq.n	800b5e2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	f003 0320 	and.w	r3, r3, #32
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d104      	bne.n	800b5d2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d007      	beq.n	800b5e2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d003      	beq.n	800b5e2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5e8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5f4:	2b40      	cmp	r3, #64	; 0x40
 800b5f6:	d004      	beq.n	800b602 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d031      	beq.n	800b666 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f001 f982 	bl	800c90c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	689b      	ldr	r3, [r3, #8]
 800b60e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b612:	2b40      	cmp	r3, #64	; 0x40
 800b614:	d123      	bne.n	800b65e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	689a      	ldr	r2, [r3, #8]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b624:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d013      	beq.n	800b656 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b632:	4a14      	ldr	r2, [pc, #80]	; (800b684 <HAL_UART_IRQHandler+0x244>)
 800b634:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7f7 fe14 	bl	8003268 <HAL_DMA_Abort_IT>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d017      	beq.n	800b676 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b64a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b650:	4610      	mov	r0, r2
 800b652:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b654:	e00f      	b.n	800b676 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 f9b6 	bl	800b9c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b65c:	e00b      	b.n	800b676 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 f9b2 	bl	800b9c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b664:	e007      	b.n	800b676 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 f9ae 	bl	800b9c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b674:	e194      	b.n	800b9a0 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b676:	bf00      	nop
    return;
 800b678:	e192      	b.n	800b9a0 <HAL_UART_IRQHandler+0x560>
 800b67a:	bf00      	nop
 800b67c:	10000001 	.word	0x10000001
 800b680:	04000120 	.word	0x04000120
 800b684:	0800c971 	.word	0x0800c971

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	f040 810f 	bne.w	800b8b0 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b692:	69fb      	ldr	r3, [r7, #28]
 800b694:	f003 0310 	and.w	r3, r3, #16
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f000 8109 	beq.w	800b8b0 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	f003 0310 	and.w	r3, r3, #16
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f000 8103 	beq.w	800b8b0 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2210      	movs	r2, #16
 800b6b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6bc:	2b40      	cmp	r3, #64	; 0x40
 800b6be:	f040 80bb 	bne.w	800b838 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4a96      	ldr	r2, [pc, #600]	; (800b924 <HAL_UART_IRQHandler+0x4e4>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d059      	beq.n	800b782 <HAL_UART_IRQHandler+0x342>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a94      	ldr	r2, [pc, #592]	; (800b928 <HAL_UART_IRQHandler+0x4e8>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d053      	beq.n	800b782 <HAL_UART_IRQHandler+0x342>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4a92      	ldr	r2, [pc, #584]	; (800b92c <HAL_UART_IRQHandler+0x4ec>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d04d      	beq.n	800b782 <HAL_UART_IRQHandler+0x342>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a90      	ldr	r2, [pc, #576]	; (800b930 <HAL_UART_IRQHandler+0x4f0>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d047      	beq.n	800b782 <HAL_UART_IRQHandler+0x342>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a8e      	ldr	r2, [pc, #568]	; (800b934 <HAL_UART_IRQHandler+0x4f4>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d041      	beq.n	800b782 <HAL_UART_IRQHandler+0x342>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a8c      	ldr	r2, [pc, #560]	; (800b938 <HAL_UART_IRQHandler+0x4f8>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d03b      	beq.n	800b782 <HAL_UART_IRQHandler+0x342>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4a8a      	ldr	r2, [pc, #552]	; (800b93c <HAL_UART_IRQHandler+0x4fc>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d035      	beq.n	800b782 <HAL_UART_IRQHandler+0x342>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a88      	ldr	r2, [pc, #544]	; (800b940 <HAL_UART_IRQHandler+0x500>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d02f      	beq.n	800b782 <HAL_UART_IRQHandler+0x342>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a86      	ldr	r2, [pc, #536]	; (800b944 <HAL_UART_IRQHandler+0x504>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d029      	beq.n	800b782 <HAL_UART_IRQHandler+0x342>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a84      	ldr	r2, [pc, #528]	; (800b948 <HAL_UART_IRQHandler+0x508>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d023      	beq.n	800b782 <HAL_UART_IRQHandler+0x342>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a82      	ldr	r2, [pc, #520]	; (800b94c <HAL_UART_IRQHandler+0x50c>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d01d      	beq.n	800b782 <HAL_UART_IRQHandler+0x342>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a80      	ldr	r2, [pc, #512]	; (800b950 <HAL_UART_IRQHandler+0x510>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d017      	beq.n	800b782 <HAL_UART_IRQHandler+0x342>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a7e      	ldr	r2, [pc, #504]	; (800b954 <HAL_UART_IRQHandler+0x514>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d011      	beq.n	800b782 <HAL_UART_IRQHandler+0x342>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a7c      	ldr	r2, [pc, #496]	; (800b958 <HAL_UART_IRQHandler+0x518>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d00b      	beq.n	800b782 <HAL_UART_IRQHandler+0x342>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a7a      	ldr	r2, [pc, #488]	; (800b95c <HAL_UART_IRQHandler+0x51c>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d005      	beq.n	800b782 <HAL_UART_IRQHandler+0x342>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a78      	ldr	r2, [pc, #480]	; (800b960 <HAL_UART_IRQHandler+0x520>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d105      	bne.n	800b78e <HAL_UART_IRQHandler+0x34e>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	e004      	b.n	800b798 <HAL_UART_IRQHandler+0x358>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	b29b      	uxth	r3, r3
 800b798:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800b79a:	893b      	ldrh	r3, [r7, #8]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	f000 8101 	beq.w	800b9a4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b7a8:	893a      	ldrh	r2, [r7, #8]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	f080 80fa 	bcs.w	800b9a4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	893a      	ldrh	r2, [r7, #8]
 800b7b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7bc:	69db      	ldr	r3, [r3, #28]
 800b7be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7c2:	d02b      	beq.n	800b81c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b7d2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	689a      	ldr	r2, [r3, #8]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f022 0201 	bic.w	r2, r2, #1
 800b7e2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	689a      	ldr	r2, [r3, #8]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7f2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2220      	movs	r2, #32
 800b7f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2200      	movs	r2, #0
 800b800:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f022 0210 	bic.w	r2, r2, #16
 800b810:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b816:	4618      	mov	r0, r3
 800b818:	f7f7 fa08 	bl	8002c2c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b828:	b29b      	uxth	r3, r3
 800b82a:	1ad3      	subs	r3, r2, r3
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	4619      	mov	r1, r3
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 f8d3 	bl	800b9dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b836:	e0b5      	b.n	800b9a4 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b844:	b29b      	uxth	r3, r3
 800b846:	1ad3      	subs	r3, r2, r3
 800b848:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b850:	b29b      	uxth	r3, r3
 800b852:	2b00      	cmp	r3, #0
 800b854:	f000 80a8 	beq.w	800b9a8 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800b858:	897b      	ldrh	r3, [r7, #10]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f000 80a4 	beq.w	800b9a8 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b86e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	6899      	ldr	r1, [r3, #8]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	4b3a      	ldr	r3, [pc, #232]	; (800b964 <HAL_UART_IRQHandler+0x524>)
 800b87c:	400b      	ands	r3, r1
 800b87e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2220      	movs	r2, #32
 800b884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f022 0210 	bic.w	r2, r2, #16
 800b8a2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b8a4:	897b      	ldrh	r3, [r7, #10]
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 f897 	bl	800b9dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b8ae:	e07b      	b.n	800b9a8 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00d      	beq.n	800b8d6 <HAL_UART_IRQHandler+0x496>
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d008      	beq.n	800b8d6 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b8cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f001 fb5a 	bl	800cf88 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b8d4:	e06b      	b.n	800b9ae <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b8d6:	69fb      	ldr	r3, [r7, #28]
 800b8d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d012      	beq.n	800b906 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b8e0:	69bb      	ldr	r3, [r7, #24]
 800b8e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d104      	bne.n	800b8f4 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d008      	beq.n	800b906 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d057      	beq.n	800b9ac <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	4798      	blx	r3
    }
    return;
 800b904:	e052      	b.n	800b9ac <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d02b      	beq.n	800b968 <HAL_UART_IRQHandler+0x528>
 800b910:	69bb      	ldr	r3, [r7, #24]
 800b912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b916:	2b00      	cmp	r3, #0
 800b918:	d026      	beq.n	800b968 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f001 f83e 	bl	800c99c <UART_EndTransmit_IT>
    return;
 800b920:	e045      	b.n	800b9ae <HAL_UART_IRQHandler+0x56e>
 800b922:	bf00      	nop
 800b924:	40020010 	.word	0x40020010
 800b928:	40020028 	.word	0x40020028
 800b92c:	40020040 	.word	0x40020040
 800b930:	40020058 	.word	0x40020058
 800b934:	40020070 	.word	0x40020070
 800b938:	40020088 	.word	0x40020088
 800b93c:	400200a0 	.word	0x400200a0
 800b940:	400200b8 	.word	0x400200b8
 800b944:	40020410 	.word	0x40020410
 800b948:	40020428 	.word	0x40020428
 800b94c:	40020440 	.word	0x40020440
 800b950:	40020458 	.word	0x40020458
 800b954:	40020470 	.word	0x40020470
 800b958:	40020488 	.word	0x40020488
 800b95c:	400204a0 	.word	0x400204a0
 800b960:	400204b8 	.word	0x400204b8
 800b964:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d008      	beq.n	800b984 <HAL_UART_IRQHandler+0x544>
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d003      	beq.n	800b984 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f001 fb17 	bl	800cfb0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b982:	e014      	b.n	800b9ae <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d00f      	beq.n	800b9ae <HAL_UART_IRQHandler+0x56e>
 800b98e:	69bb      	ldr	r3, [r7, #24]
 800b990:	2b00      	cmp	r3, #0
 800b992:	da0c      	bge.n	800b9ae <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f001 fb01 	bl	800cf9c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b99a:	e008      	b.n	800b9ae <HAL_UART_IRQHandler+0x56e>
      return;
 800b99c:	bf00      	nop
 800b99e:	e006      	b.n	800b9ae <HAL_UART_IRQHandler+0x56e>
    return;
 800b9a0:	bf00      	nop
 800b9a2:	e004      	b.n	800b9ae <HAL_UART_IRQHandler+0x56e>
      return;
 800b9a4:	bf00      	nop
 800b9a6:	e002      	b.n	800b9ae <HAL_UART_IRQHandler+0x56e>
      return;
 800b9a8:	bf00      	nop
 800b9aa:	e000      	b.n	800b9ae <HAL_UART_IRQHandler+0x56e>
    return;
 800b9ac:	bf00      	nop
  }
}
 800b9ae:	3720      	adds	r7, #32
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b9bc:	bf00      	nop
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b9e8:	bf00      	nop
 800b9ea:	370c      	adds	r7, #12
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr

0800b9f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b9f4:	b5b0      	push	{r4, r5, r7, lr}
 800b9f6:	b08e      	sub	sp, #56	; 0x38
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	689a      	ldr	r2, [r3, #8]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	431a      	orrs	r2, r3
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	695b      	ldr	r3, [r3, #20]
 800ba10:	431a      	orrs	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	69db      	ldr	r3, [r3, #28]
 800ba16:	4313      	orrs	r3, r2
 800ba18:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	4bbf      	ldr	r3, [pc, #764]	; (800bd20 <UART_SetConfig+0x32c>)
 800ba22:	4013      	ands	r3, r2
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	6812      	ldr	r2, [r2, #0]
 800ba28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ba2a:	430b      	orrs	r3, r1
 800ba2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	68da      	ldr	r2, [r3, #12]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	430a      	orrs	r2, r1
 800ba42:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	699b      	ldr	r3, [r3, #24]
 800ba48:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4ab5      	ldr	r2, [pc, #724]	; (800bd24 <UART_SetConfig+0x330>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d004      	beq.n	800ba5e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6a1b      	ldr	r3, [r3, #32]
 800ba58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	689a      	ldr	r2, [r3, #8]
 800ba64:	4bb0      	ldr	r3, [pc, #704]	; (800bd28 <UART_SetConfig+0x334>)
 800ba66:	4013      	ands	r3, r2
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	6812      	ldr	r2, [r2, #0]
 800ba6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ba6e:	430b      	orrs	r3, r1
 800ba70:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba78:	f023 010f 	bic.w	r1, r3, #15
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	430a      	orrs	r2, r1
 800ba86:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4aa7      	ldr	r2, [pc, #668]	; (800bd2c <UART_SetConfig+0x338>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d176      	bne.n	800bb80 <UART_SetConfig+0x18c>
 800ba92:	4ba7      	ldr	r3, [pc, #668]	; (800bd30 <UART_SetConfig+0x33c>)
 800ba94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ba9a:	2b28      	cmp	r3, #40	; 0x28
 800ba9c:	d86c      	bhi.n	800bb78 <UART_SetConfig+0x184>
 800ba9e:	a201      	add	r2, pc, #4	; (adr r2, 800baa4 <UART_SetConfig+0xb0>)
 800baa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa4:	0800bb49 	.word	0x0800bb49
 800baa8:	0800bb79 	.word	0x0800bb79
 800baac:	0800bb79 	.word	0x0800bb79
 800bab0:	0800bb79 	.word	0x0800bb79
 800bab4:	0800bb79 	.word	0x0800bb79
 800bab8:	0800bb79 	.word	0x0800bb79
 800babc:	0800bb79 	.word	0x0800bb79
 800bac0:	0800bb79 	.word	0x0800bb79
 800bac4:	0800bb51 	.word	0x0800bb51
 800bac8:	0800bb79 	.word	0x0800bb79
 800bacc:	0800bb79 	.word	0x0800bb79
 800bad0:	0800bb79 	.word	0x0800bb79
 800bad4:	0800bb79 	.word	0x0800bb79
 800bad8:	0800bb79 	.word	0x0800bb79
 800badc:	0800bb79 	.word	0x0800bb79
 800bae0:	0800bb79 	.word	0x0800bb79
 800bae4:	0800bb59 	.word	0x0800bb59
 800bae8:	0800bb79 	.word	0x0800bb79
 800baec:	0800bb79 	.word	0x0800bb79
 800baf0:	0800bb79 	.word	0x0800bb79
 800baf4:	0800bb79 	.word	0x0800bb79
 800baf8:	0800bb79 	.word	0x0800bb79
 800bafc:	0800bb79 	.word	0x0800bb79
 800bb00:	0800bb79 	.word	0x0800bb79
 800bb04:	0800bb61 	.word	0x0800bb61
 800bb08:	0800bb79 	.word	0x0800bb79
 800bb0c:	0800bb79 	.word	0x0800bb79
 800bb10:	0800bb79 	.word	0x0800bb79
 800bb14:	0800bb79 	.word	0x0800bb79
 800bb18:	0800bb79 	.word	0x0800bb79
 800bb1c:	0800bb79 	.word	0x0800bb79
 800bb20:	0800bb79 	.word	0x0800bb79
 800bb24:	0800bb69 	.word	0x0800bb69
 800bb28:	0800bb79 	.word	0x0800bb79
 800bb2c:	0800bb79 	.word	0x0800bb79
 800bb30:	0800bb79 	.word	0x0800bb79
 800bb34:	0800bb79 	.word	0x0800bb79
 800bb38:	0800bb79 	.word	0x0800bb79
 800bb3c:	0800bb79 	.word	0x0800bb79
 800bb40:	0800bb79 	.word	0x0800bb79
 800bb44:	0800bb71 	.word	0x0800bb71
 800bb48:	2301      	movs	r3, #1
 800bb4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb4e:	e222      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bb50:	2304      	movs	r3, #4
 800bb52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb56:	e21e      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bb58:	2308      	movs	r3, #8
 800bb5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb5e:	e21a      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bb60:	2310      	movs	r3, #16
 800bb62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb66:	e216      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bb68:	2320      	movs	r3, #32
 800bb6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb6e:	e212      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bb70:	2340      	movs	r3, #64	; 0x40
 800bb72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb76:	e20e      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bb78:	2380      	movs	r3, #128	; 0x80
 800bb7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb7e:	e20a      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4a6b      	ldr	r2, [pc, #428]	; (800bd34 <UART_SetConfig+0x340>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d130      	bne.n	800bbec <UART_SetConfig+0x1f8>
 800bb8a:	4b69      	ldr	r3, [pc, #420]	; (800bd30 <UART_SetConfig+0x33c>)
 800bb8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb8e:	f003 0307 	and.w	r3, r3, #7
 800bb92:	2b05      	cmp	r3, #5
 800bb94:	d826      	bhi.n	800bbe4 <UART_SetConfig+0x1f0>
 800bb96:	a201      	add	r2, pc, #4	; (adr r2, 800bb9c <UART_SetConfig+0x1a8>)
 800bb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb9c:	0800bbb5 	.word	0x0800bbb5
 800bba0:	0800bbbd 	.word	0x0800bbbd
 800bba4:	0800bbc5 	.word	0x0800bbc5
 800bba8:	0800bbcd 	.word	0x0800bbcd
 800bbac:	0800bbd5 	.word	0x0800bbd5
 800bbb0:	0800bbdd 	.word	0x0800bbdd
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbba:	e1ec      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bbbc:	2304      	movs	r3, #4
 800bbbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbc2:	e1e8      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bbc4:	2308      	movs	r3, #8
 800bbc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbca:	e1e4      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bbcc:	2310      	movs	r3, #16
 800bbce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbd2:	e1e0      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bbd4:	2320      	movs	r3, #32
 800bbd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbda:	e1dc      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bbdc:	2340      	movs	r3, #64	; 0x40
 800bbde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbe2:	e1d8      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bbe4:	2380      	movs	r3, #128	; 0x80
 800bbe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbea:	e1d4      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a51      	ldr	r2, [pc, #324]	; (800bd38 <UART_SetConfig+0x344>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d130      	bne.n	800bc58 <UART_SetConfig+0x264>
 800bbf6:	4b4e      	ldr	r3, [pc, #312]	; (800bd30 <UART_SetConfig+0x33c>)
 800bbf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbfa:	f003 0307 	and.w	r3, r3, #7
 800bbfe:	2b05      	cmp	r3, #5
 800bc00:	d826      	bhi.n	800bc50 <UART_SetConfig+0x25c>
 800bc02:	a201      	add	r2, pc, #4	; (adr r2, 800bc08 <UART_SetConfig+0x214>)
 800bc04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc08:	0800bc21 	.word	0x0800bc21
 800bc0c:	0800bc29 	.word	0x0800bc29
 800bc10:	0800bc31 	.word	0x0800bc31
 800bc14:	0800bc39 	.word	0x0800bc39
 800bc18:	0800bc41 	.word	0x0800bc41
 800bc1c:	0800bc49 	.word	0x0800bc49
 800bc20:	2300      	movs	r3, #0
 800bc22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc26:	e1b6      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bc28:	2304      	movs	r3, #4
 800bc2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc2e:	e1b2      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bc30:	2308      	movs	r3, #8
 800bc32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc36:	e1ae      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bc38:	2310      	movs	r3, #16
 800bc3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc3e:	e1aa      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bc40:	2320      	movs	r3, #32
 800bc42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc46:	e1a6      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bc48:	2340      	movs	r3, #64	; 0x40
 800bc4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc4e:	e1a2      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bc50:	2380      	movs	r3, #128	; 0x80
 800bc52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc56:	e19e      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a37      	ldr	r2, [pc, #220]	; (800bd3c <UART_SetConfig+0x348>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d130      	bne.n	800bcc4 <UART_SetConfig+0x2d0>
 800bc62:	4b33      	ldr	r3, [pc, #204]	; (800bd30 <UART_SetConfig+0x33c>)
 800bc64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc66:	f003 0307 	and.w	r3, r3, #7
 800bc6a:	2b05      	cmp	r3, #5
 800bc6c:	d826      	bhi.n	800bcbc <UART_SetConfig+0x2c8>
 800bc6e:	a201      	add	r2, pc, #4	; (adr r2, 800bc74 <UART_SetConfig+0x280>)
 800bc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc74:	0800bc8d 	.word	0x0800bc8d
 800bc78:	0800bc95 	.word	0x0800bc95
 800bc7c:	0800bc9d 	.word	0x0800bc9d
 800bc80:	0800bca5 	.word	0x0800bca5
 800bc84:	0800bcad 	.word	0x0800bcad
 800bc88:	0800bcb5 	.word	0x0800bcb5
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc92:	e180      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bc94:	2304      	movs	r3, #4
 800bc96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc9a:	e17c      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bc9c:	2308      	movs	r3, #8
 800bc9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bca2:	e178      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bca4:	2310      	movs	r3, #16
 800bca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcaa:	e174      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bcac:	2320      	movs	r3, #32
 800bcae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcb2:	e170      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bcb4:	2340      	movs	r3, #64	; 0x40
 800bcb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcba:	e16c      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bcbc:	2380      	movs	r3, #128	; 0x80
 800bcbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcc2:	e168      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a1d      	ldr	r2, [pc, #116]	; (800bd40 <UART_SetConfig+0x34c>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d142      	bne.n	800bd54 <UART_SetConfig+0x360>
 800bcce:	4b18      	ldr	r3, [pc, #96]	; (800bd30 <UART_SetConfig+0x33c>)
 800bcd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcd2:	f003 0307 	and.w	r3, r3, #7
 800bcd6:	2b05      	cmp	r3, #5
 800bcd8:	d838      	bhi.n	800bd4c <UART_SetConfig+0x358>
 800bcda:	a201      	add	r2, pc, #4	; (adr r2, 800bce0 <UART_SetConfig+0x2ec>)
 800bcdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce0:	0800bcf9 	.word	0x0800bcf9
 800bce4:	0800bd01 	.word	0x0800bd01
 800bce8:	0800bd09 	.word	0x0800bd09
 800bcec:	0800bd11 	.word	0x0800bd11
 800bcf0:	0800bd19 	.word	0x0800bd19
 800bcf4:	0800bd45 	.word	0x0800bd45
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcfe:	e14a      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bd00:	2304      	movs	r3, #4
 800bd02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd06:	e146      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bd08:	2308      	movs	r3, #8
 800bd0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd0e:	e142      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bd10:	2310      	movs	r3, #16
 800bd12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd16:	e13e      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bd18:	2320      	movs	r3, #32
 800bd1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd1e:	e13a      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bd20:	cfff69f3 	.word	0xcfff69f3
 800bd24:	58000c00 	.word	0x58000c00
 800bd28:	11fff4ff 	.word	0x11fff4ff
 800bd2c:	40011000 	.word	0x40011000
 800bd30:	58024400 	.word	0x58024400
 800bd34:	40004400 	.word	0x40004400
 800bd38:	40004800 	.word	0x40004800
 800bd3c:	40004c00 	.word	0x40004c00
 800bd40:	40005000 	.word	0x40005000
 800bd44:	2340      	movs	r3, #64	; 0x40
 800bd46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd4a:	e124      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bd4c:	2380      	movs	r3, #128	; 0x80
 800bd4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd52:	e120      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4acc      	ldr	r2, [pc, #816]	; (800c08c <UART_SetConfig+0x698>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d176      	bne.n	800be4c <UART_SetConfig+0x458>
 800bd5e:	4bcc      	ldr	r3, [pc, #816]	; (800c090 <UART_SetConfig+0x69c>)
 800bd60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd66:	2b28      	cmp	r3, #40	; 0x28
 800bd68:	d86c      	bhi.n	800be44 <UART_SetConfig+0x450>
 800bd6a:	a201      	add	r2, pc, #4	; (adr r2, 800bd70 <UART_SetConfig+0x37c>)
 800bd6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd70:	0800be15 	.word	0x0800be15
 800bd74:	0800be45 	.word	0x0800be45
 800bd78:	0800be45 	.word	0x0800be45
 800bd7c:	0800be45 	.word	0x0800be45
 800bd80:	0800be45 	.word	0x0800be45
 800bd84:	0800be45 	.word	0x0800be45
 800bd88:	0800be45 	.word	0x0800be45
 800bd8c:	0800be45 	.word	0x0800be45
 800bd90:	0800be1d 	.word	0x0800be1d
 800bd94:	0800be45 	.word	0x0800be45
 800bd98:	0800be45 	.word	0x0800be45
 800bd9c:	0800be45 	.word	0x0800be45
 800bda0:	0800be45 	.word	0x0800be45
 800bda4:	0800be45 	.word	0x0800be45
 800bda8:	0800be45 	.word	0x0800be45
 800bdac:	0800be45 	.word	0x0800be45
 800bdb0:	0800be25 	.word	0x0800be25
 800bdb4:	0800be45 	.word	0x0800be45
 800bdb8:	0800be45 	.word	0x0800be45
 800bdbc:	0800be45 	.word	0x0800be45
 800bdc0:	0800be45 	.word	0x0800be45
 800bdc4:	0800be45 	.word	0x0800be45
 800bdc8:	0800be45 	.word	0x0800be45
 800bdcc:	0800be45 	.word	0x0800be45
 800bdd0:	0800be2d 	.word	0x0800be2d
 800bdd4:	0800be45 	.word	0x0800be45
 800bdd8:	0800be45 	.word	0x0800be45
 800bddc:	0800be45 	.word	0x0800be45
 800bde0:	0800be45 	.word	0x0800be45
 800bde4:	0800be45 	.word	0x0800be45
 800bde8:	0800be45 	.word	0x0800be45
 800bdec:	0800be45 	.word	0x0800be45
 800bdf0:	0800be35 	.word	0x0800be35
 800bdf4:	0800be45 	.word	0x0800be45
 800bdf8:	0800be45 	.word	0x0800be45
 800bdfc:	0800be45 	.word	0x0800be45
 800be00:	0800be45 	.word	0x0800be45
 800be04:	0800be45 	.word	0x0800be45
 800be08:	0800be45 	.word	0x0800be45
 800be0c:	0800be45 	.word	0x0800be45
 800be10:	0800be3d 	.word	0x0800be3d
 800be14:	2301      	movs	r3, #1
 800be16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be1a:	e0bc      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800be1c:	2304      	movs	r3, #4
 800be1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be22:	e0b8      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800be24:	2308      	movs	r3, #8
 800be26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be2a:	e0b4      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800be2c:	2310      	movs	r3, #16
 800be2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be32:	e0b0      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800be34:	2320      	movs	r3, #32
 800be36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be3a:	e0ac      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800be3c:	2340      	movs	r3, #64	; 0x40
 800be3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be42:	e0a8      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800be44:	2380      	movs	r3, #128	; 0x80
 800be46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be4a:	e0a4      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a90      	ldr	r2, [pc, #576]	; (800c094 <UART_SetConfig+0x6a0>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d130      	bne.n	800beb8 <UART_SetConfig+0x4c4>
 800be56:	4b8e      	ldr	r3, [pc, #568]	; (800c090 <UART_SetConfig+0x69c>)
 800be58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be5a:	f003 0307 	and.w	r3, r3, #7
 800be5e:	2b05      	cmp	r3, #5
 800be60:	d826      	bhi.n	800beb0 <UART_SetConfig+0x4bc>
 800be62:	a201      	add	r2, pc, #4	; (adr r2, 800be68 <UART_SetConfig+0x474>)
 800be64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be68:	0800be81 	.word	0x0800be81
 800be6c:	0800be89 	.word	0x0800be89
 800be70:	0800be91 	.word	0x0800be91
 800be74:	0800be99 	.word	0x0800be99
 800be78:	0800bea1 	.word	0x0800bea1
 800be7c:	0800bea9 	.word	0x0800bea9
 800be80:	2300      	movs	r3, #0
 800be82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be86:	e086      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800be88:	2304      	movs	r3, #4
 800be8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be8e:	e082      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800be90:	2308      	movs	r3, #8
 800be92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be96:	e07e      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800be98:	2310      	movs	r3, #16
 800be9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be9e:	e07a      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bea0:	2320      	movs	r3, #32
 800bea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bea6:	e076      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bea8:	2340      	movs	r3, #64	; 0x40
 800beaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beae:	e072      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800beb0:	2380      	movs	r3, #128	; 0x80
 800beb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beb6:	e06e      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a76      	ldr	r2, [pc, #472]	; (800c098 <UART_SetConfig+0x6a4>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d130      	bne.n	800bf24 <UART_SetConfig+0x530>
 800bec2:	4b73      	ldr	r3, [pc, #460]	; (800c090 <UART_SetConfig+0x69c>)
 800bec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bec6:	f003 0307 	and.w	r3, r3, #7
 800beca:	2b05      	cmp	r3, #5
 800becc:	d826      	bhi.n	800bf1c <UART_SetConfig+0x528>
 800bece:	a201      	add	r2, pc, #4	; (adr r2, 800bed4 <UART_SetConfig+0x4e0>)
 800bed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed4:	0800beed 	.word	0x0800beed
 800bed8:	0800bef5 	.word	0x0800bef5
 800bedc:	0800befd 	.word	0x0800befd
 800bee0:	0800bf05 	.word	0x0800bf05
 800bee4:	0800bf0d 	.word	0x0800bf0d
 800bee8:	0800bf15 	.word	0x0800bf15
 800beec:	2300      	movs	r3, #0
 800beee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bef2:	e050      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bef4:	2304      	movs	r3, #4
 800bef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800befa:	e04c      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800befc:	2308      	movs	r3, #8
 800befe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf02:	e048      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bf04:	2310      	movs	r3, #16
 800bf06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf0a:	e044      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bf0c:	2320      	movs	r3, #32
 800bf0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf12:	e040      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bf14:	2340      	movs	r3, #64	; 0x40
 800bf16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf1a:	e03c      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bf1c:	2380      	movs	r3, #128	; 0x80
 800bf1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf22:	e038      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a5c      	ldr	r2, [pc, #368]	; (800c09c <UART_SetConfig+0x6a8>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d130      	bne.n	800bf90 <UART_SetConfig+0x59c>
 800bf2e:	4b58      	ldr	r3, [pc, #352]	; (800c090 <UART_SetConfig+0x69c>)
 800bf30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf32:	f003 0307 	and.w	r3, r3, #7
 800bf36:	2b05      	cmp	r3, #5
 800bf38:	d826      	bhi.n	800bf88 <UART_SetConfig+0x594>
 800bf3a:	a201      	add	r2, pc, #4	; (adr r2, 800bf40 <UART_SetConfig+0x54c>)
 800bf3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf40:	0800bf59 	.word	0x0800bf59
 800bf44:	0800bf61 	.word	0x0800bf61
 800bf48:	0800bf69 	.word	0x0800bf69
 800bf4c:	0800bf71 	.word	0x0800bf71
 800bf50:	0800bf79 	.word	0x0800bf79
 800bf54:	0800bf81 	.word	0x0800bf81
 800bf58:	2302      	movs	r3, #2
 800bf5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf5e:	e01a      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bf60:	2304      	movs	r3, #4
 800bf62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf66:	e016      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bf68:	2308      	movs	r3, #8
 800bf6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf6e:	e012      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bf70:	2310      	movs	r3, #16
 800bf72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf76:	e00e      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bf78:	2320      	movs	r3, #32
 800bf7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf7e:	e00a      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bf80:	2340      	movs	r3, #64	; 0x40
 800bf82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf86:	e006      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bf88:	2380      	movs	r3, #128	; 0x80
 800bf8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bf8e:	e002      	b.n	800bf96 <UART_SetConfig+0x5a2>
 800bf90:	2380      	movs	r3, #128	; 0x80
 800bf92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a40      	ldr	r2, [pc, #256]	; (800c09c <UART_SetConfig+0x6a8>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	f040 80ef 	bne.w	800c180 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bfa2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bfa6:	2b20      	cmp	r3, #32
 800bfa8:	dc46      	bgt.n	800c038 <UART_SetConfig+0x644>
 800bfaa:	2b02      	cmp	r3, #2
 800bfac:	f2c0 8081 	blt.w	800c0b2 <UART_SetConfig+0x6be>
 800bfb0:	3b02      	subs	r3, #2
 800bfb2:	2b1e      	cmp	r3, #30
 800bfb4:	d87d      	bhi.n	800c0b2 <UART_SetConfig+0x6be>
 800bfb6:	a201      	add	r2, pc, #4	; (adr r2, 800bfbc <UART_SetConfig+0x5c8>)
 800bfb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfbc:	0800c03f 	.word	0x0800c03f
 800bfc0:	0800c0b3 	.word	0x0800c0b3
 800bfc4:	0800c047 	.word	0x0800c047
 800bfc8:	0800c0b3 	.word	0x0800c0b3
 800bfcc:	0800c0b3 	.word	0x0800c0b3
 800bfd0:	0800c0b3 	.word	0x0800c0b3
 800bfd4:	0800c057 	.word	0x0800c057
 800bfd8:	0800c0b3 	.word	0x0800c0b3
 800bfdc:	0800c0b3 	.word	0x0800c0b3
 800bfe0:	0800c0b3 	.word	0x0800c0b3
 800bfe4:	0800c0b3 	.word	0x0800c0b3
 800bfe8:	0800c0b3 	.word	0x0800c0b3
 800bfec:	0800c0b3 	.word	0x0800c0b3
 800bff0:	0800c0b3 	.word	0x0800c0b3
 800bff4:	0800c067 	.word	0x0800c067
 800bff8:	0800c0b3 	.word	0x0800c0b3
 800bffc:	0800c0b3 	.word	0x0800c0b3
 800c000:	0800c0b3 	.word	0x0800c0b3
 800c004:	0800c0b3 	.word	0x0800c0b3
 800c008:	0800c0b3 	.word	0x0800c0b3
 800c00c:	0800c0b3 	.word	0x0800c0b3
 800c010:	0800c0b3 	.word	0x0800c0b3
 800c014:	0800c0b3 	.word	0x0800c0b3
 800c018:	0800c0b3 	.word	0x0800c0b3
 800c01c:	0800c0b3 	.word	0x0800c0b3
 800c020:	0800c0b3 	.word	0x0800c0b3
 800c024:	0800c0b3 	.word	0x0800c0b3
 800c028:	0800c0b3 	.word	0x0800c0b3
 800c02c:	0800c0b3 	.word	0x0800c0b3
 800c030:	0800c0b3 	.word	0x0800c0b3
 800c034:	0800c0a5 	.word	0x0800c0a5
 800c038:	2b40      	cmp	r3, #64	; 0x40
 800c03a:	d036      	beq.n	800c0aa <UART_SetConfig+0x6b6>
 800c03c:	e039      	b.n	800c0b2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c03e:	f7fd f8d3 	bl	80091e8 <HAL_RCCEx_GetD3PCLK1Freq>
 800c042:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c044:	e03b      	b.n	800c0be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c046:	f107 0314 	add.w	r3, r7, #20
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fd f8e2 	bl	8009214 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c054:	e033      	b.n	800c0be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c056:	f107 0308 	add.w	r3, r7, #8
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7fd fa2e 	bl	80094bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c064:	e02b      	b.n	800c0be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c066:	4b0a      	ldr	r3, [pc, #40]	; (800c090 <UART_SetConfig+0x69c>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f003 0320 	and.w	r3, r3, #32
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d009      	beq.n	800c086 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c072:	4b07      	ldr	r3, [pc, #28]	; (800c090 <UART_SetConfig+0x69c>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	08db      	lsrs	r3, r3, #3
 800c078:	f003 0303 	and.w	r3, r3, #3
 800c07c:	4a08      	ldr	r2, [pc, #32]	; (800c0a0 <UART_SetConfig+0x6ac>)
 800c07e:	fa22 f303 	lsr.w	r3, r2, r3
 800c082:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c084:	e01b      	b.n	800c0be <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800c086:	4b06      	ldr	r3, [pc, #24]	; (800c0a0 <UART_SetConfig+0x6ac>)
 800c088:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c08a:	e018      	b.n	800c0be <UART_SetConfig+0x6ca>
 800c08c:	40011400 	.word	0x40011400
 800c090:	58024400 	.word	0x58024400
 800c094:	40007800 	.word	0x40007800
 800c098:	40007c00 	.word	0x40007c00
 800c09c:	58000c00 	.word	0x58000c00
 800c0a0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c0a4:	4bc4      	ldr	r3, [pc, #784]	; (800c3b8 <UART_SetConfig+0x9c4>)
 800c0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c0a8:	e009      	b.n	800c0be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c0b0:	e005      	b.n	800c0be <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c0bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	f000 81da 	beq.w	800c47a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ca:	4abc      	ldr	r2, [pc, #752]	; (800c3bc <UART_SetConfig+0x9c8>)
 800c0cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0d8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	685a      	ldr	r2, [r3, #4]
 800c0de:	4613      	mov	r3, r2
 800c0e0:	005b      	lsls	r3, r3, #1
 800c0e2:	4413      	add	r3, r2
 800c0e4:	6a3a      	ldr	r2, [r7, #32]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d305      	bcc.n	800c0f6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0f0:	6a3a      	ldr	r2, [r7, #32]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d903      	bls.n	800c0fe <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c0fc:	e1bd      	b.n	800c47a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c100:	4618      	mov	r0, r3
 800c102:	f04f 0100 	mov.w	r1, #0
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c10a:	4aac      	ldr	r2, [pc, #688]	; (800c3bc <UART_SetConfig+0x9c8>)
 800c10c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c110:	b29a      	uxth	r2, r3
 800c112:	f04f 0300 	mov.w	r3, #0
 800c116:	f7f4 f93b 	bl	8000390 <__aeabi_uldivmod>
 800c11a:	4602      	mov	r2, r0
 800c11c:	460b      	mov	r3, r1
 800c11e:	4610      	mov	r0, r2
 800c120:	4619      	mov	r1, r3
 800c122:	f04f 0200 	mov.w	r2, #0
 800c126:	f04f 0300 	mov.w	r3, #0
 800c12a:	020b      	lsls	r3, r1, #8
 800c12c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c130:	0202      	lsls	r2, r0, #8
 800c132:	6879      	ldr	r1, [r7, #4]
 800c134:	6849      	ldr	r1, [r1, #4]
 800c136:	0849      	lsrs	r1, r1, #1
 800c138:	4608      	mov	r0, r1
 800c13a:	f04f 0100 	mov.w	r1, #0
 800c13e:	1814      	adds	r4, r2, r0
 800c140:	eb43 0501 	adc.w	r5, r3, r1
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	461a      	mov	r2, r3
 800c14a:	f04f 0300 	mov.w	r3, #0
 800c14e:	4620      	mov	r0, r4
 800c150:	4629      	mov	r1, r5
 800c152:	f7f4 f91d 	bl	8000390 <__aeabi_uldivmod>
 800c156:	4602      	mov	r2, r0
 800c158:	460b      	mov	r3, r1
 800c15a:	4613      	mov	r3, r2
 800c15c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c160:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c164:	d308      	bcc.n	800c178 <UART_SetConfig+0x784>
 800c166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c16c:	d204      	bcs.n	800c178 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c174:	60da      	str	r2, [r3, #12]
 800c176:	e180      	b.n	800c47a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800c178:	2301      	movs	r3, #1
 800c17a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c17e:	e17c      	b.n	800c47a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	69db      	ldr	r3, [r3, #28]
 800c184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c188:	f040 80bf 	bne.w	800c30a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800c18c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c190:	2b20      	cmp	r3, #32
 800c192:	dc49      	bgt.n	800c228 <UART_SetConfig+0x834>
 800c194:	2b00      	cmp	r3, #0
 800c196:	db7c      	blt.n	800c292 <UART_SetConfig+0x89e>
 800c198:	2b20      	cmp	r3, #32
 800c19a:	d87a      	bhi.n	800c292 <UART_SetConfig+0x89e>
 800c19c:	a201      	add	r2, pc, #4	; (adr r2, 800c1a4 <UART_SetConfig+0x7b0>)
 800c19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a2:	bf00      	nop
 800c1a4:	0800c22f 	.word	0x0800c22f
 800c1a8:	0800c237 	.word	0x0800c237
 800c1ac:	0800c293 	.word	0x0800c293
 800c1b0:	0800c293 	.word	0x0800c293
 800c1b4:	0800c23f 	.word	0x0800c23f
 800c1b8:	0800c293 	.word	0x0800c293
 800c1bc:	0800c293 	.word	0x0800c293
 800c1c0:	0800c293 	.word	0x0800c293
 800c1c4:	0800c24f 	.word	0x0800c24f
 800c1c8:	0800c293 	.word	0x0800c293
 800c1cc:	0800c293 	.word	0x0800c293
 800c1d0:	0800c293 	.word	0x0800c293
 800c1d4:	0800c293 	.word	0x0800c293
 800c1d8:	0800c293 	.word	0x0800c293
 800c1dc:	0800c293 	.word	0x0800c293
 800c1e0:	0800c293 	.word	0x0800c293
 800c1e4:	0800c25f 	.word	0x0800c25f
 800c1e8:	0800c293 	.word	0x0800c293
 800c1ec:	0800c293 	.word	0x0800c293
 800c1f0:	0800c293 	.word	0x0800c293
 800c1f4:	0800c293 	.word	0x0800c293
 800c1f8:	0800c293 	.word	0x0800c293
 800c1fc:	0800c293 	.word	0x0800c293
 800c200:	0800c293 	.word	0x0800c293
 800c204:	0800c293 	.word	0x0800c293
 800c208:	0800c293 	.word	0x0800c293
 800c20c:	0800c293 	.word	0x0800c293
 800c210:	0800c293 	.word	0x0800c293
 800c214:	0800c293 	.word	0x0800c293
 800c218:	0800c293 	.word	0x0800c293
 800c21c:	0800c293 	.word	0x0800c293
 800c220:	0800c293 	.word	0x0800c293
 800c224:	0800c285 	.word	0x0800c285
 800c228:	2b40      	cmp	r3, #64	; 0x40
 800c22a:	d02e      	beq.n	800c28a <UART_SetConfig+0x896>
 800c22c:	e031      	b.n	800c292 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c22e:	f7fc f86f 	bl	8008310 <HAL_RCC_GetPCLK1Freq>
 800c232:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c234:	e033      	b.n	800c29e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c236:	f7fc f881 	bl	800833c <HAL_RCC_GetPCLK2Freq>
 800c23a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c23c:	e02f      	b.n	800c29e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c23e:	f107 0314 	add.w	r3, r7, #20
 800c242:	4618      	mov	r0, r3
 800c244:	f7fc ffe6 	bl	8009214 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c24c:	e027      	b.n	800c29e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c24e:	f107 0308 	add.w	r3, r7, #8
 800c252:	4618      	mov	r0, r3
 800c254:	f7fd f932 	bl	80094bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c25c:	e01f      	b.n	800c29e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c25e:	4b58      	ldr	r3, [pc, #352]	; (800c3c0 <UART_SetConfig+0x9cc>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f003 0320 	and.w	r3, r3, #32
 800c266:	2b00      	cmp	r3, #0
 800c268:	d009      	beq.n	800c27e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c26a:	4b55      	ldr	r3, [pc, #340]	; (800c3c0 <UART_SetConfig+0x9cc>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	08db      	lsrs	r3, r3, #3
 800c270:	f003 0303 	and.w	r3, r3, #3
 800c274:	4a53      	ldr	r2, [pc, #332]	; (800c3c4 <UART_SetConfig+0x9d0>)
 800c276:	fa22 f303 	lsr.w	r3, r2, r3
 800c27a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c27c:	e00f      	b.n	800c29e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800c27e:	4b51      	ldr	r3, [pc, #324]	; (800c3c4 <UART_SetConfig+0x9d0>)
 800c280:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c282:	e00c      	b.n	800c29e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c284:	4b4c      	ldr	r3, [pc, #304]	; (800c3b8 <UART_SetConfig+0x9c4>)
 800c286:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c288:	e009      	b.n	800c29e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c28a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c28e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c290:	e005      	b.n	800c29e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800c292:	2300      	movs	r3, #0
 800c294:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c296:	2301      	movs	r3, #1
 800c298:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c29c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	f000 80ea 	beq.w	800c47a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2aa:	4a44      	ldr	r2, [pc, #272]	; (800c3bc <UART_SetConfig+0x9c8>)
 800c2ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2b8:	005a      	lsls	r2, r3, #1
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	085b      	lsrs	r3, r3, #1
 800c2c0:	441a      	add	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d0:	2b0f      	cmp	r3, #15
 800c2d2:	d916      	bls.n	800c302 <UART_SetConfig+0x90e>
 800c2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2da:	d212      	bcs.n	800c302 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	f023 030f 	bic.w	r3, r3, #15
 800c2e4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e8:	085b      	lsrs	r3, r3, #1
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	f003 0307 	and.w	r3, r3, #7
 800c2f0:	b29a      	uxth	r2, r3
 800c2f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c2fe:	60da      	str	r2, [r3, #12]
 800c300:	e0bb      	b.n	800c47a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c302:	2301      	movs	r3, #1
 800c304:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c308:	e0b7      	b.n	800c47a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c30a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c30e:	2b20      	cmp	r3, #32
 800c310:	dc4a      	bgt.n	800c3a8 <UART_SetConfig+0x9b4>
 800c312:	2b00      	cmp	r3, #0
 800c314:	f2c0 8086 	blt.w	800c424 <UART_SetConfig+0xa30>
 800c318:	2b20      	cmp	r3, #32
 800c31a:	f200 8083 	bhi.w	800c424 <UART_SetConfig+0xa30>
 800c31e:	a201      	add	r2, pc, #4	; (adr r2, 800c324 <UART_SetConfig+0x930>)
 800c320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c324:	0800c3af 	.word	0x0800c3af
 800c328:	0800c3c9 	.word	0x0800c3c9
 800c32c:	0800c425 	.word	0x0800c425
 800c330:	0800c425 	.word	0x0800c425
 800c334:	0800c3d1 	.word	0x0800c3d1
 800c338:	0800c425 	.word	0x0800c425
 800c33c:	0800c425 	.word	0x0800c425
 800c340:	0800c425 	.word	0x0800c425
 800c344:	0800c3e1 	.word	0x0800c3e1
 800c348:	0800c425 	.word	0x0800c425
 800c34c:	0800c425 	.word	0x0800c425
 800c350:	0800c425 	.word	0x0800c425
 800c354:	0800c425 	.word	0x0800c425
 800c358:	0800c425 	.word	0x0800c425
 800c35c:	0800c425 	.word	0x0800c425
 800c360:	0800c425 	.word	0x0800c425
 800c364:	0800c3f1 	.word	0x0800c3f1
 800c368:	0800c425 	.word	0x0800c425
 800c36c:	0800c425 	.word	0x0800c425
 800c370:	0800c425 	.word	0x0800c425
 800c374:	0800c425 	.word	0x0800c425
 800c378:	0800c425 	.word	0x0800c425
 800c37c:	0800c425 	.word	0x0800c425
 800c380:	0800c425 	.word	0x0800c425
 800c384:	0800c425 	.word	0x0800c425
 800c388:	0800c425 	.word	0x0800c425
 800c38c:	0800c425 	.word	0x0800c425
 800c390:	0800c425 	.word	0x0800c425
 800c394:	0800c425 	.word	0x0800c425
 800c398:	0800c425 	.word	0x0800c425
 800c39c:	0800c425 	.word	0x0800c425
 800c3a0:	0800c425 	.word	0x0800c425
 800c3a4:	0800c417 	.word	0x0800c417
 800c3a8:	2b40      	cmp	r3, #64	; 0x40
 800c3aa:	d037      	beq.n	800c41c <UART_SetConfig+0xa28>
 800c3ac:	e03a      	b.n	800c424 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c3ae:	f7fb ffaf 	bl	8008310 <HAL_RCC_GetPCLK1Freq>
 800c3b2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c3b4:	e03c      	b.n	800c430 <UART_SetConfig+0xa3c>
 800c3b6:	bf00      	nop
 800c3b8:	003d0900 	.word	0x003d0900
 800c3bc:	08011f64 	.word	0x08011f64
 800c3c0:	58024400 	.word	0x58024400
 800c3c4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c3c8:	f7fb ffb8 	bl	800833c <HAL_RCC_GetPCLK2Freq>
 800c3cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c3ce:	e02f      	b.n	800c430 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3d0:	f107 0314 	add.w	r3, r7, #20
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7fc ff1d 	bl	8009214 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c3de:	e027      	b.n	800c430 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3e0:	f107 0308 	add.w	r3, r7, #8
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7fd f869 	bl	80094bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c3ee:	e01f      	b.n	800c430 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3f0:	4b2c      	ldr	r3, [pc, #176]	; (800c4a4 <UART_SetConfig+0xab0>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f003 0320 	and.w	r3, r3, #32
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d009      	beq.n	800c410 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c3fc:	4b29      	ldr	r3, [pc, #164]	; (800c4a4 <UART_SetConfig+0xab0>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	08db      	lsrs	r3, r3, #3
 800c402:	f003 0303 	and.w	r3, r3, #3
 800c406:	4a28      	ldr	r2, [pc, #160]	; (800c4a8 <UART_SetConfig+0xab4>)
 800c408:	fa22 f303 	lsr.w	r3, r2, r3
 800c40c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c40e:	e00f      	b.n	800c430 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800c410:	4b25      	ldr	r3, [pc, #148]	; (800c4a8 <UART_SetConfig+0xab4>)
 800c412:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c414:	e00c      	b.n	800c430 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c416:	4b25      	ldr	r3, [pc, #148]	; (800c4ac <UART_SetConfig+0xab8>)
 800c418:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c41a:	e009      	b.n	800c430 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c41c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c420:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c422:	e005      	b.n	800c430 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800c424:	2300      	movs	r3, #0
 800c426:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c428:	2301      	movs	r3, #1
 800c42a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c42e:	bf00      	nop
    }

    if (pclk != 0U)
 800c430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c432:	2b00      	cmp	r3, #0
 800c434:	d021      	beq.n	800c47a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c43a:	4a1d      	ldr	r2, [pc, #116]	; (800c4b0 <UART_SetConfig+0xabc>)
 800c43c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c440:	461a      	mov	r2, r3
 800c442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c444:	fbb3 f2f2 	udiv	r2, r3, r2
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	085b      	lsrs	r3, r3, #1
 800c44e:	441a      	add	r2, r3
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	fbb2 f3f3 	udiv	r3, r2, r3
 800c458:	b29b      	uxth	r3, r3
 800c45a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45e:	2b0f      	cmp	r3, #15
 800c460:	d908      	bls.n	800c474 <UART_SetConfig+0xa80>
 800c462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c468:	d204      	bcs.n	800c474 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c470:	60da      	str	r2, [r3, #12]
 800c472:	e002      	b.n	800c47a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c474:	2301      	movs	r3, #1
 800c476:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2201      	movs	r2, #1
 800c47e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2201      	movs	r2, #1
 800c486:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2200      	movs	r2, #0
 800c48e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c496:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3738      	adds	r7, #56	; 0x38
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bdb0      	pop	{r4, r5, r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	58024400 	.word	0x58024400
 800c4a8:	03d09000 	.word	0x03d09000
 800c4ac:	003d0900 	.word	0x003d0900
 800c4b0:	08011f64 	.word	0x08011f64

0800c4b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4c0:	f003 0301 	and.w	r3, r3, #1
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d00a      	beq.n	800c4de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	430a      	orrs	r2, r1
 800c4dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4e2:	f003 0302 	and.w	r3, r3, #2
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d00a      	beq.n	800c500 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	430a      	orrs	r2, r1
 800c4fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c504:	f003 0304 	and.w	r3, r3, #4
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d00a      	beq.n	800c522 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	685b      	ldr	r3, [r3, #4]
 800c512:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	430a      	orrs	r2, r1
 800c520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c526:	f003 0308 	and.w	r3, r3, #8
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d00a      	beq.n	800c544 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	430a      	orrs	r2, r1
 800c542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c548:	f003 0310 	and.w	r3, r3, #16
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d00a      	beq.n	800c566 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	689b      	ldr	r3, [r3, #8]
 800c556:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	430a      	orrs	r2, r1
 800c564:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c56a:	f003 0320 	and.w	r3, r3, #32
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d00a      	beq.n	800c588 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	689b      	ldr	r3, [r3, #8]
 800c578:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	430a      	orrs	r2, r1
 800c586:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c58c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c590:	2b00      	cmp	r3, #0
 800c592:	d01a      	beq.n	800c5ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	430a      	orrs	r2, r1
 800c5a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5b2:	d10a      	bne.n	800c5ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	430a      	orrs	r2, r1
 800c5c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00a      	beq.n	800c5ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	430a      	orrs	r2, r1
 800c5ea:	605a      	str	r2, [r3, #4]
  }
}
 800c5ec:	bf00      	nop
 800c5ee:	370c      	adds	r7, #12
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr

0800c5f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af02      	add	r7, sp, #8
 800c5fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2200      	movs	r2, #0
 800c604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c608:	f7f5 fbea 	bl	8001de0 <HAL_GetTick>
 800c60c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f003 0308 	and.w	r3, r3, #8
 800c618:	2b08      	cmp	r3, #8
 800c61a:	d10e      	bne.n	800c63a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c61c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c620:	9300      	str	r3, [sp, #0]
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2200      	movs	r2, #0
 800c626:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f000 f82f 	bl	800c68e <UART_WaitOnFlagUntilTimeout>
 800c630:	4603      	mov	r3, r0
 800c632:	2b00      	cmp	r3, #0
 800c634:	d001      	beq.n	800c63a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c636:	2303      	movs	r3, #3
 800c638:	e025      	b.n	800c686 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f003 0304 	and.w	r3, r3, #4
 800c644:	2b04      	cmp	r3, #4
 800c646:	d10e      	bne.n	800c666 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c648:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c64c:	9300      	str	r3, [sp, #0]
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	2200      	movs	r2, #0
 800c652:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 f819 	bl	800c68e <UART_WaitOnFlagUntilTimeout>
 800c65c:	4603      	mov	r3, r0
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d001      	beq.n	800c666 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c662:	2303      	movs	r3, #3
 800c664:	e00f      	b.n	800c686 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2220      	movs	r2, #32
 800c66a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2220      	movs	r2, #32
 800c672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2200      	movs	r2, #0
 800c67a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2200      	movs	r2, #0
 800c680:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c684:	2300      	movs	r3, #0
}
 800c686:	4618      	mov	r0, r3
 800c688:	3710      	adds	r7, #16
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}

0800c68e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c68e:	b580      	push	{r7, lr}
 800c690:	b084      	sub	sp, #16
 800c692:	af00      	add	r7, sp, #0
 800c694:	60f8      	str	r0, [r7, #12]
 800c696:	60b9      	str	r1, [r7, #8]
 800c698:	603b      	str	r3, [r7, #0]
 800c69a:	4613      	mov	r3, r2
 800c69c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c69e:	e062      	b.n	800c766 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6a6:	d05e      	beq.n	800c766 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c6a8:	f7f5 fb9a 	bl	8001de0 <HAL_GetTick>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	1ad3      	subs	r3, r2, r3
 800c6b2:	69ba      	ldr	r2, [r7, #24]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d302      	bcc.n	800c6be <UART_WaitOnFlagUntilTimeout+0x30>
 800c6b8:	69bb      	ldr	r3, [r7, #24]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d11d      	bne.n	800c6fa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c6cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	689a      	ldr	r2, [r3, #8]
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f022 0201 	bic.w	r2, r2, #1
 800c6dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2220      	movs	r2, #32
 800c6e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2220      	movs	r2, #32
 800c6ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c6f6:	2303      	movs	r3, #3
 800c6f8:	e045      	b.n	800c786 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f003 0304 	and.w	r3, r3, #4
 800c704:	2b00      	cmp	r3, #0
 800c706:	d02e      	beq.n	800c766 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	69db      	ldr	r3, [r3, #28]
 800c70e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c716:	d126      	bne.n	800c766 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c720:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	681a      	ldr	r2, [r3, #0]
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c730:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	689a      	ldr	r2, [r3, #8]
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f022 0201 	bic.w	r2, r2, #1
 800c740:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2220      	movs	r2, #32
 800c746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2220      	movs	r2, #32
 800c74e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2220      	movs	r2, #32
 800c756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2200      	movs	r2, #0
 800c75e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c762:	2303      	movs	r3, #3
 800c764:	e00f      	b.n	800c786 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	69da      	ldr	r2, [r3, #28]
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	4013      	ands	r3, r2
 800c770:	68ba      	ldr	r2, [r7, #8]
 800c772:	429a      	cmp	r2, r3
 800c774:	bf0c      	ite	eq
 800c776:	2301      	moveq	r3, #1
 800c778:	2300      	movne	r3, #0
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	461a      	mov	r2, r3
 800c77e:	79fb      	ldrb	r3, [r7, #7]
 800c780:	429a      	cmp	r2, r3
 800c782:	d08d      	beq.n	800c6a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c784:	2300      	movs	r3, #0
}
 800c786:	4618      	mov	r0, r3
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
	...

0800c790 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	4613      	mov	r3, r2
 800c79c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	68ba      	ldr	r2, [r7, #8]
 800c7a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	88fa      	ldrh	r2, [r7, #6]
 800c7a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	88fa      	ldrh	r2, [r7, #6]
 800c7b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7c2:	d10e      	bne.n	800c7e2 <UART_Start_Receive_IT+0x52>
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	691b      	ldr	r3, [r3, #16]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d105      	bne.n	800c7d8 <UART_Start_Receive_IT+0x48>
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c7d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c7d6:	e02d      	b.n	800c834 <UART_Start_Receive_IT+0xa4>
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	22ff      	movs	r2, #255	; 0xff
 800c7dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c7e0:	e028      	b.n	800c834 <UART_Start_Receive_IT+0xa4>
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	689b      	ldr	r3, [r3, #8]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d10d      	bne.n	800c806 <UART_Start_Receive_IT+0x76>
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	691b      	ldr	r3, [r3, #16]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d104      	bne.n	800c7fc <UART_Start_Receive_IT+0x6c>
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	22ff      	movs	r2, #255	; 0xff
 800c7f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c7fa:	e01b      	b.n	800c834 <UART_Start_Receive_IT+0xa4>
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	227f      	movs	r2, #127	; 0x7f
 800c800:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c804:	e016      	b.n	800c834 <UART_Start_Receive_IT+0xa4>
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	689b      	ldr	r3, [r3, #8]
 800c80a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c80e:	d10d      	bne.n	800c82c <UART_Start_Receive_IT+0x9c>
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	691b      	ldr	r3, [r3, #16]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d104      	bne.n	800c822 <UART_Start_Receive_IT+0x92>
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	227f      	movs	r2, #127	; 0x7f
 800c81c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c820:	e008      	b.n	800c834 <UART_Start_Receive_IT+0xa4>
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	223f      	movs	r2, #63	; 0x3f
 800c826:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c82a:	e003      	b.n	800c834 <UART_Start_Receive_IT+0xa4>
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2200      	movs	r2, #0
 800c830:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2200      	movs	r2, #0
 800c838:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	2222      	movs	r2, #34	; 0x22
 800c840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	689a      	ldr	r2, [r3, #8]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f042 0201 	orr.w	r2, r2, #1
 800c852:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c85c:	d12a      	bne.n	800c8b4 <UART_Start_Receive_IT+0x124>
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c864:	88fa      	ldrh	r2, [r7, #6]
 800c866:	429a      	cmp	r2, r3
 800c868:	d324      	bcc.n	800c8b4 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	689b      	ldr	r3, [r3, #8]
 800c86e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c872:	d107      	bne.n	800c884 <UART_Start_Receive_IT+0xf4>
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	691b      	ldr	r3, [r3, #16]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d103      	bne.n	800c884 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	4a1f      	ldr	r2, [pc, #124]	; (800c8fc <UART_Start_Receive_IT+0x16c>)
 800c880:	671a      	str	r2, [r3, #112]	; 0x70
 800c882:	e002      	b.n	800c88a <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	4a1e      	ldr	r2, [pc, #120]	; (800c900 <UART_Start_Receive_IT+0x170>)
 800c888:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2200      	movs	r2, #0
 800c88e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c8a0:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	689a      	ldr	r2, [r3, #8]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c8b0:	609a      	str	r2, [r3, #8]
 800c8b2:	e01b      	b.n	800c8ec <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	689b      	ldr	r3, [r3, #8]
 800c8b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8bc:	d107      	bne.n	800c8ce <UART_Start_Receive_IT+0x13e>
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	691b      	ldr	r3, [r3, #16]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d103      	bne.n	800c8ce <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	4a0e      	ldr	r2, [pc, #56]	; (800c904 <UART_Start_Receive_IT+0x174>)
 800c8ca:	671a      	str	r2, [r3, #112]	; 0x70
 800c8cc:	e002      	b.n	800c8d4 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	4a0d      	ldr	r2, [pc, #52]	; (800c908 <UART_Start_Receive_IT+0x178>)
 800c8d2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	681a      	ldr	r2, [r3, #0]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800c8ea:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c8ec:	2300      	movs	r3, #0
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3714      	adds	r7, #20
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr
 800c8fa:	bf00      	nop
 800c8fc:	0800cd85 	.word	0x0800cd85
 800c900:	0800cb81 	.word	0x0800cb81
 800c904:	0800caa9 	.word	0x0800caa9
 800c908:	0800c9d1 	.word	0x0800c9d1

0800c90c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b083      	sub	sp, #12
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c922:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	6899      	ldr	r1, [r3, #8]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	4b0f      	ldr	r3, [pc, #60]	; (800c96c <UART_EndRxTransfer+0x60>)
 800c930:	400b      	ands	r3, r1
 800c932:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d107      	bne.n	800c94c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f022 0210 	bic.w	r2, r2, #16
 800c94a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2220      	movs	r2, #32
 800c950:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2200      	movs	r2, #0
 800c958:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2200      	movs	r2, #0
 800c95e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c960:	bf00      	nop
 800c962:	370c      	adds	r7, #12
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr
 800c96c:	effffffe 	.word	0xeffffffe

0800c970 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c97c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2200      	movs	r2, #0
 800c982:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	2200      	movs	r2, #0
 800c98a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c98e:	68f8      	ldr	r0, [r7, #12]
 800c990:	f7ff f81a 	bl	800b9c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c994:	bf00      	nop
 800c996:	3710      	adds	r7, #16
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	681a      	ldr	r2, [r3, #0]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c9b2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2220      	movs	r2, #32
 800c9b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f7fe fff6 	bl	800b9b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9c8:	bf00      	nop
 800c9ca:	3708      	adds	r7, #8
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b084      	sub	sp, #16
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c9de:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9e6:	2b22      	cmp	r3, #34	; 0x22
 800c9e8:	d152      	bne.n	800ca90 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9f0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c9f2:	89bb      	ldrh	r3, [r7, #12]
 800c9f4:	b2d9      	uxtb	r1, r3
 800c9f6:	89fb      	ldrh	r3, [r7, #14]
 800c9f8:	b2da      	uxtb	r2, r3
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9fe:	400a      	ands	r2, r1
 800ca00:	b2d2      	uxtb	r2, r2
 800ca02:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca08:	1c5a      	adds	r2, r3, #1
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca14:	b29b      	uxth	r3, r3
 800ca16:	3b01      	subs	r3, #1
 800ca18:	b29a      	uxth	r2, r3
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d139      	bne.n	800caa0 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ca3a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	689a      	ldr	r2, [r3, #8]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f022 0201 	bic.w	r2, r2, #1
 800ca4a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2220      	movs	r2, #32
 800ca50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2200      	movs	r2, #0
 800ca58:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca5e:	2b01      	cmp	r3, #1
 800ca60:	d10f      	bne.n	800ca82 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	681a      	ldr	r2, [r3, #0]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f022 0210 	bic.w	r2, r2, #16
 800ca70:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ca78:	4619      	mov	r1, r3
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f7fe ffae 	bl	800b9dc <HAL_UARTEx_RxEventCallback>
 800ca80:	e002      	b.n	800ca88 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f7f4 f9b4 	bl	8000df0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca8e:	e007      	b.n	800caa0 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	699a      	ldr	r2, [r3, #24]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f042 0208 	orr.w	r2, r2, #8
 800ca9e:	619a      	str	r2, [r3, #24]
}
 800caa0:	bf00      	nop
 800caa2:	3710      	adds	r7, #16
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cab6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cabe:	2b22      	cmp	r3, #34	; 0x22
 800cac0:	d152      	bne.n	800cb68 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cac8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cace:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800cad0:	89ba      	ldrh	r2, [r7, #12]
 800cad2:	89fb      	ldrh	r3, [r7, #14]
 800cad4:	4013      	ands	r3, r2
 800cad6:	b29a      	uxth	r2, r3
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cae0:	1c9a      	adds	r2, r3, #2
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800caec:	b29b      	uxth	r3, r3
 800caee:	3b01      	subs	r3, #1
 800caf0:	b29a      	uxth	r2, r3
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d139      	bne.n	800cb78 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cb12:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	689a      	ldr	r2, [r3, #8]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f022 0201 	bic.w	r2, r2, #1
 800cb22:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2220      	movs	r2, #32
 800cb28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d10f      	bne.n	800cb5a <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f022 0210 	bic.w	r2, r2, #16
 800cb48:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cb50:	4619      	mov	r1, r3
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f7fe ff42 	bl	800b9dc <HAL_UARTEx_RxEventCallback>
 800cb58:	e002      	b.n	800cb60 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f7f4 f948 	bl	8000df0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2200      	movs	r2, #0
 800cb64:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cb66:	e007      	b.n	800cb78 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	699a      	ldr	r2, [r3, #24]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f042 0208 	orr.w	r2, r2, #8
 800cb76:	619a      	str	r2, [r3, #24]
}
 800cb78:	bf00      	nop
 800cb7a:	3710      	adds	r7, #16
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b088      	sub	sp, #32
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb8e:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	69db      	ldr	r3, [r3, #28]
 800cb96:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	689b      	ldr	r3, [r3, #8]
 800cba6:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbae:	2b22      	cmp	r3, #34	; 0x22
 800cbb0:	f040 80d8 	bne.w	800cd64 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cbba:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cbbc:	e0a8      	b.n	800cd10 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc4:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cbc6:	89bb      	ldrh	r3, [r7, #12]
 800cbc8:	b2d9      	uxtb	r1, r3
 800cbca:	8b7b      	ldrh	r3, [r7, #26]
 800cbcc:	b2da      	uxtb	r2, r3
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbd2:	400a      	ands	r2, r1
 800cbd4:	b2d2      	uxtb	r2, r2
 800cbd6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbdc:	1c5a      	adds	r2, r3, #1
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	3b01      	subs	r3, #1
 800cbec:	b29a      	uxth	r2, r3
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	69db      	ldr	r3, [r3, #28]
 800cbfa:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	f003 0307 	and.w	r3, r3, #7
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d04d      	beq.n	800cca2 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc06:	69fb      	ldr	r3, [r7, #28]
 800cc08:	f003 0301 	and.w	r3, r3, #1
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d010      	beq.n	800cc32 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d00b      	beq.n	800cc32 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc28:	f043 0201 	orr.w	r2, r3, #1
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc32:	69fb      	ldr	r3, [r7, #28]
 800cc34:	f003 0302 	and.w	r3, r3, #2
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d010      	beq.n	800cc5e <UART_RxISR_8BIT_FIFOEN+0xde>
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	f003 0301 	and.w	r3, r3, #1
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d00b      	beq.n	800cc5e <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	2202      	movs	r2, #2
 800cc4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc54:	f043 0204 	orr.w	r2, r3, #4
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	f003 0304 	and.w	r3, r3, #4
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d010      	beq.n	800cc8a <UART_RxISR_8BIT_FIFOEN+0x10a>
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	f003 0301 	and.w	r3, r3, #1
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d00b      	beq.n	800cc8a <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2204      	movs	r2, #4
 800cc78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc80:	f043 0202 	orr.w	r2, r3, #2
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d006      	beq.n	800cca2 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f7fe fe97 	bl	800b9c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cca8:	b29b      	uxth	r3, r3
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d130      	bne.n	800cd10 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ccbc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	6899      	ldr	r1, [r3, #8]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681a      	ldr	r2, [r3, #0]
 800ccc8:	4b2c      	ldr	r3, [pc, #176]	; (800cd7c <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800ccca:	400b      	ands	r3, r1
 800cccc:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2220      	movs	r2, #32
 800ccd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d10f      	bne.n	800cd04 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f022 0210 	bic.w	r2, r2, #16
 800ccf2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f7fe fe6d 	bl	800b9dc <HAL_UARTEx_RxEventCallback>
 800cd02:	e002      	b.n	800cd0a <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f7f4 f873 	bl	8000df0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cd10:	89fb      	ldrh	r3, [r7, #14]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d005      	beq.n	800cd22 <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800cd16:	69fb      	ldr	r3, [r7, #28]
 800cd18:	f003 0320 	and.w	r3, r3, #32
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	f47f af4e 	bne.w	800cbbe <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd28:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cd2a:	897b      	ldrh	r3, [r7, #10]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d021      	beq.n	800cd74 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cd36:	897a      	ldrh	r2, [r7, #10]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d21b      	bcs.n	800cd74 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	689a      	ldr	r2, [r3, #8]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cd4a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	4a0c      	ldr	r2, [pc, #48]	; (800cd80 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800cd50:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	681a      	ldr	r2, [r3, #0]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f042 0220 	orr.w	r2, r2, #32
 800cd60:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cd62:	e007      	b.n	800cd74 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	699a      	ldr	r2, [r3, #24]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f042 0208 	orr.w	r2, r2, #8
 800cd72:	619a      	str	r2, [r3, #24]
}
 800cd74:	bf00      	nop
 800cd76:	3720      	adds	r7, #32
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}
 800cd7c:	effffffe 	.word	0xeffffffe
 800cd80:	0800c9d1 	.word	0x0800c9d1

0800cd84 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b08a      	sub	sp, #40	; 0x28
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cd92:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	69db      	ldr	r3, [r3, #28]
 800cd9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	689b      	ldr	r3, [r3, #8]
 800cdaa:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdb2:	2b22      	cmp	r3, #34	; 0x22
 800cdb4:	f040 80d8 	bne.w	800cf68 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cdbe:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cdc0:	e0a8      	b.n	800cf14 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc8:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdce:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800cdd0:	8aba      	ldrh	r2, [r7, #20]
 800cdd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cdd4:	4013      	ands	r3, r2
 800cdd6:	b29a      	uxth	r2, r3
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cde0:	1c9a      	adds	r2, r3, #2
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cdec:	b29b      	uxth	r3, r3
 800cdee:	3b01      	subs	r3, #1
 800cdf0:	b29a      	uxth	r2, r3
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	69db      	ldr	r3, [r3, #28]
 800cdfe:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ce00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce02:	f003 0307 	and.w	r3, r3, #7
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d04d      	beq.n	800cea6 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ce0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0c:	f003 0301 	and.w	r3, r3, #1
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d010      	beq.n	800ce36 <UART_RxISR_16BIT_FIFOEN+0xb2>
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00b      	beq.n	800ce36 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	2201      	movs	r2, #1
 800ce24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce2c:	f043 0201 	orr.w	r2, r3, #1
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce38:	f003 0302 	and.w	r3, r3, #2
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d010      	beq.n	800ce62 <UART_RxISR_16BIT_FIFOEN+0xde>
 800ce40:	69bb      	ldr	r3, [r7, #24]
 800ce42:	f003 0301 	and.w	r3, r3, #1
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d00b      	beq.n	800ce62 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2202      	movs	r2, #2
 800ce50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce58:	f043 0204 	orr.w	r2, r3, #4
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce64:	f003 0304 	and.w	r3, r3, #4
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d010      	beq.n	800ce8e <UART_RxISR_16BIT_FIFOEN+0x10a>
 800ce6c:	69bb      	ldr	r3, [r7, #24]
 800ce6e:	f003 0301 	and.w	r3, r3, #1
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d00b      	beq.n	800ce8e <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2204      	movs	r2, #4
 800ce7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce84:	f043 0202 	orr.w	r2, r3, #2
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d006      	beq.n	800cea6 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f7fe fd95 	bl	800b9c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2200      	movs	r2, #0
 800cea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d130      	bne.n	800cf14 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cec0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	6899      	ldr	r1, [r3, #8]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	4b2c      	ldr	r3, [pc, #176]	; (800cf80 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800cece:	400b      	ands	r3, r1
 800ced0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2220      	movs	r2, #32
 800ced6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2200      	movs	r2, #0
 800cede:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	d10f      	bne.n	800cf08 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f022 0210 	bic.w	r2, r2, #16
 800cef6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cefe:	4619      	mov	r1, r3
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f7fe fd6b 	bl	800b9dc <HAL_UARTEx_RxEventCallback>
 800cf06:	e002      	b.n	800cf0e <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f7f3 ff71 	bl	8000df0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2200      	movs	r2, #0
 800cf12:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cf14:	8afb      	ldrh	r3, [r7, #22]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d005      	beq.n	800cf26 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800cf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1c:	f003 0320 	and.w	r3, r3, #32
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	f47f af4e 	bne.w	800cdc2 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf2c:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cf2e:	89fb      	ldrh	r3, [r7, #14]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d021      	beq.n	800cf78 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cf3a:	89fa      	ldrh	r2, [r7, #14]
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d21b      	bcs.n	800cf78 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	689a      	ldr	r2, [r3, #8]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cf4e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	4a0c      	ldr	r2, [pc, #48]	; (800cf84 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800cf54:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	681a      	ldr	r2, [r3, #0]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f042 0220 	orr.w	r2, r2, #32
 800cf64:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cf66:	e007      	b.n	800cf78 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	699a      	ldr	r2, [r3, #24]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f042 0208 	orr.w	r2, r2, #8
 800cf76:	619a      	str	r2, [r3, #24]
}
 800cf78:	bf00      	nop
 800cf7a:	3728      	adds	r7, #40	; 0x28
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	effffffe 	.word	0xeffffffe
 800cf84:	0800caa9 	.word	0x0800caa9

0800cf88 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cf90:	bf00      	nop
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cfa4:	bf00      	nop
 800cfa6:	370c      	adds	r7, #12
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b083      	sub	sp, #12
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cfb8:	bf00      	nop
 800cfba:	370c      	adds	r7, #12
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr

0800cfc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b085      	sub	sp, #20
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d101      	bne.n	800cfda <HAL_UARTEx_DisableFifoMode+0x16>
 800cfd6:	2302      	movs	r3, #2
 800cfd8:	e027      	b.n	800d02a <HAL_UARTEx_DisableFifoMode+0x66>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2201      	movs	r2, #1
 800cfde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2224      	movs	r2, #36	; 0x24
 800cfe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f022 0201 	bic.w	r2, r2, #1
 800d000:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d008:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2200      	movs	r2, #0
 800d00e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2220      	movs	r2, #32
 800d01c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d028:	2300      	movs	r3, #0
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3714      	adds	r7, #20
 800d02e:	46bd      	mov	sp, r7
 800d030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d034:	4770      	bx	lr

0800d036 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d036:	b580      	push	{r7, lr}
 800d038:	b084      	sub	sp, #16
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
 800d03e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d046:	2b01      	cmp	r3, #1
 800d048:	d101      	bne.n	800d04e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d04a:	2302      	movs	r3, #2
 800d04c:	e02d      	b.n	800d0aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2201      	movs	r2, #1
 800d052:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2224      	movs	r2, #36	; 0x24
 800d05a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f022 0201 	bic.w	r2, r2, #1
 800d074:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	689b      	ldr	r3, [r3, #8]
 800d07c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	683a      	ldr	r2, [r7, #0]
 800d086:	430a      	orrs	r2, r1
 800d088:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f000 f850 	bl	800d130 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	68fa      	ldr	r2, [r7, #12]
 800d096:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2220      	movs	r2, #32
 800d09c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d0a8:	2300      	movs	r3, #0
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3710      	adds	r7, #16
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}

0800d0b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d0b2:	b580      	push	{r7, lr}
 800d0b4:	b084      	sub	sp, #16
 800d0b6:	af00      	add	r7, sp, #0
 800d0b8:	6078      	str	r0, [r7, #4]
 800d0ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d101      	bne.n	800d0ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d0c6:	2302      	movs	r3, #2
 800d0c8:	e02d      	b.n	800d126 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2224      	movs	r2, #36	; 0x24
 800d0d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	681a      	ldr	r2, [r3, #0]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f022 0201 	bic.w	r2, r2, #1
 800d0f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	689b      	ldr	r3, [r3, #8]
 800d0f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	683a      	ldr	r2, [r7, #0]
 800d102:	430a      	orrs	r2, r1
 800d104:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f000 f812 	bl	800d130 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	68fa      	ldr	r2, [r7, #12]
 800d112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2220      	movs	r2, #32
 800d118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2200      	movs	r2, #0
 800d120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d124:	2300      	movs	r3, #0
}
 800d126:	4618      	mov	r0, r3
 800d128:	3710      	adds	r7, #16
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
	...

0800d130 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d130:	b480      	push	{r7}
 800d132:	b085      	sub	sp, #20
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d108      	bne.n	800d152 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2201      	movs	r2, #1
 800d144:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2201      	movs	r2, #1
 800d14c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d150:	e031      	b.n	800d1b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d152:	2310      	movs	r3, #16
 800d154:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d156:	2310      	movs	r3, #16
 800d158:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	689b      	ldr	r3, [r3, #8]
 800d160:	0e5b      	lsrs	r3, r3, #25
 800d162:	b2db      	uxtb	r3, r3
 800d164:	f003 0307 	and.w	r3, r3, #7
 800d168:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	689b      	ldr	r3, [r3, #8]
 800d170:	0f5b      	lsrs	r3, r3, #29
 800d172:	b2db      	uxtb	r3, r3
 800d174:	f003 0307 	and.w	r3, r3, #7
 800d178:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d17a:	7bbb      	ldrb	r3, [r7, #14]
 800d17c:	7b3a      	ldrb	r2, [r7, #12]
 800d17e:	4911      	ldr	r1, [pc, #68]	; (800d1c4 <UARTEx_SetNbDataToProcess+0x94>)
 800d180:	5c8a      	ldrb	r2, [r1, r2]
 800d182:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d186:	7b3a      	ldrb	r2, [r7, #12]
 800d188:	490f      	ldr	r1, [pc, #60]	; (800d1c8 <UARTEx_SetNbDataToProcess+0x98>)
 800d18a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d18c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d190:	b29a      	uxth	r2, r3
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d198:	7bfb      	ldrb	r3, [r7, #15]
 800d19a:	7b7a      	ldrb	r2, [r7, #13]
 800d19c:	4909      	ldr	r1, [pc, #36]	; (800d1c4 <UARTEx_SetNbDataToProcess+0x94>)
 800d19e:	5c8a      	ldrb	r2, [r1, r2]
 800d1a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d1a4:	7b7a      	ldrb	r2, [r7, #13]
 800d1a6:	4908      	ldr	r1, [pc, #32]	; (800d1c8 <UARTEx_SetNbDataToProcess+0x98>)
 800d1a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d1aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d1b6:	bf00      	nop
 800d1b8:	3714      	adds	r7, #20
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr
 800d1c2:	bf00      	nop
 800d1c4:	08011f7c 	.word	0x08011f7c
 800d1c8:	08011f84 	.word	0x08011f84

0800d1cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d1cc:	b084      	sub	sp, #16
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b084      	sub	sp, #16
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
 800d1d6:	f107 001c 	add.w	r0, r7, #28
 800d1da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e0:	2b01      	cmp	r3, #1
 800d1e2:	d120      	bne.n	800d226 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	68da      	ldr	r2, [r3, #12]
 800d1f4:	4b2a      	ldr	r3, [pc, #168]	; (800d2a0 <USB_CoreInit+0xd4>)
 800d1f6:	4013      	ands	r3, r2
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	68db      	ldr	r3, [r3, #12]
 800d200:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d20a:	2b01      	cmp	r3, #1
 800d20c:	d105      	bne.n	800d21a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	68db      	ldr	r3, [r3, #12]
 800d212:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f000 f990 	bl	800d540 <USB_CoreReset>
 800d220:	4603      	mov	r3, r0
 800d222:	73fb      	strb	r3, [r7, #15]
 800d224:	e01a      	b.n	800d25c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	68db      	ldr	r3, [r3, #12]
 800d22a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f000 f984 	bl	800d540 <USB_CoreReset>
 800d238:	4603      	mov	r3, r0
 800d23a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d23c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d106      	bne.n	800d250 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d246:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	639a      	str	r2, [r3, #56]	; 0x38
 800d24e:	e005      	b.n	800d25c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d254:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25e:	2b01      	cmp	r3, #1
 800d260:	d116      	bne.n	800d290 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d266:	b29a      	uxth	r2, r3
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d270:	4b0c      	ldr	r3, [pc, #48]	; (800d2a4 <USB_CoreInit+0xd8>)
 800d272:	4313      	orrs	r3, r2
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	689b      	ldr	r3, [r3, #8]
 800d27c:	f043 0206 	orr.w	r2, r3, #6
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	689b      	ldr	r3, [r3, #8]
 800d288:	f043 0220 	orr.w	r2, r3, #32
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d290:	7bfb      	ldrb	r3, [r7, #15]
}
 800d292:	4618      	mov	r0, r3
 800d294:	3710      	adds	r7, #16
 800d296:	46bd      	mov	sp, r7
 800d298:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d29c:	b004      	add	sp, #16
 800d29e:	4770      	bx	lr
 800d2a0:	ffbdffbf 	.word	0xffbdffbf
 800d2a4:	03ee0000 	.word	0x03ee0000

0800d2a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	689b      	ldr	r3, [r3, #8]
 800d2b4:	f043 0201 	orr.w	r2, r3, #1
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d2bc:	2300      	movs	r3, #0
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	370c      	adds	r7, #12
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr

0800d2ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d2ca:	b480      	push	{r7}
 800d2cc:	b083      	sub	sp, #12
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	689b      	ldr	r3, [r3, #8]
 800d2d6:	f023 0201 	bic.w	r2, r3, #1
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d2de:	2300      	movs	r3, #0
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	370c      	adds	r7, #12
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	68db      	ldr	r3, [r3, #12]
 800d2fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d304:	78fb      	ldrb	r3, [r7, #3]
 800d306:	2b01      	cmp	r3, #1
 800d308:	d106      	bne.n	800d318 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	60da      	str	r2, [r3, #12]
 800d316:	e00b      	b.n	800d330 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d318:	78fb      	ldrb	r3, [r7, #3]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d106      	bne.n	800d32c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	68db      	ldr	r3, [r3, #12]
 800d322:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	60da      	str	r2, [r3, #12]
 800d32a:	e001      	b.n	800d330 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d32c:	2301      	movs	r3, #1
 800d32e:	e003      	b.n	800d338 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d330:	2032      	movs	r0, #50	; 0x32
 800d332:	f7f4 fd61 	bl	8001df8 <HAL_Delay>

  return HAL_OK;
 800d336:	2300      	movs	r3, #0
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3708      	adds	r7, #8
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d340:	b480      	push	{r7}
 800d342:	b085      	sub	sp, #20
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d34a:	2300      	movs	r3, #0
 800d34c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	019b      	lsls	r3, r3, #6
 800d352:	f043 0220 	orr.w	r2, r3, #32
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	3301      	adds	r3, #1
 800d35e:	60fb      	str	r3, [r7, #12]
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	4a09      	ldr	r2, [pc, #36]	; (800d388 <USB_FlushTxFifo+0x48>)
 800d364:	4293      	cmp	r3, r2
 800d366:	d901      	bls.n	800d36c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d368:	2303      	movs	r3, #3
 800d36a:	e006      	b.n	800d37a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	691b      	ldr	r3, [r3, #16]
 800d370:	f003 0320 	and.w	r3, r3, #32
 800d374:	2b20      	cmp	r3, #32
 800d376:	d0f0      	beq.n	800d35a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d378:	2300      	movs	r3, #0
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3714      	adds	r7, #20
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr
 800d386:	bf00      	nop
 800d388:	00030d40 	.word	0x00030d40

0800d38c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b085      	sub	sp, #20
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d394:	2300      	movs	r3, #0
 800d396:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2210      	movs	r2, #16
 800d39c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	3301      	adds	r3, #1
 800d3a2:	60fb      	str	r3, [r7, #12]
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	4a09      	ldr	r2, [pc, #36]	; (800d3cc <USB_FlushRxFifo+0x40>)
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	d901      	bls.n	800d3b0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d3ac:	2303      	movs	r3, #3
 800d3ae:	e006      	b.n	800d3be <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	691b      	ldr	r3, [r3, #16]
 800d3b4:	f003 0310 	and.w	r3, r3, #16
 800d3b8:	2b10      	cmp	r3, #16
 800d3ba:	d0f0      	beq.n	800d39e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d3bc:	2300      	movs	r3, #0
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3714      	adds	r7, #20
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c8:	4770      	bx	lr
 800d3ca:	bf00      	nop
 800d3cc:	00030d40 	.word	0x00030d40

0800d3d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b089      	sub	sp, #36	; 0x24
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	60b9      	str	r1, [r7, #8]
 800d3da:	4611      	mov	r1, r2
 800d3dc:	461a      	mov	r2, r3
 800d3de:	460b      	mov	r3, r1
 800d3e0:	71fb      	strb	r3, [r7, #7]
 800d3e2:	4613      	mov	r3, r2
 800d3e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d3ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d123      	bne.n	800d43e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d3f6:	88bb      	ldrh	r3, [r7, #4]
 800d3f8:	3303      	adds	r3, #3
 800d3fa:	089b      	lsrs	r3, r3, #2
 800d3fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d3fe:	2300      	movs	r3, #0
 800d400:	61bb      	str	r3, [r7, #24]
 800d402:	e018      	b.n	800d436 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d404:	79fb      	ldrb	r3, [r7, #7]
 800d406:	031a      	lsls	r2, r3, #12
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	4413      	add	r3, r2
 800d40c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d410:	461a      	mov	r2, r3
 800d412:	69fb      	ldr	r3, [r7, #28]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	3301      	adds	r3, #1
 800d41c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d41e:	69fb      	ldr	r3, [r7, #28]
 800d420:	3301      	adds	r3, #1
 800d422:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d424:	69fb      	ldr	r3, [r7, #28]
 800d426:	3301      	adds	r3, #1
 800d428:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d42a:	69fb      	ldr	r3, [r7, #28]
 800d42c:	3301      	adds	r3, #1
 800d42e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	3301      	adds	r3, #1
 800d434:	61bb      	str	r3, [r7, #24]
 800d436:	69ba      	ldr	r2, [r7, #24]
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d3e2      	bcc.n	800d404 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d43e:	2300      	movs	r3, #0
}
 800d440:	4618      	mov	r0, r3
 800d442:	3724      	adds	r7, #36	; 0x24
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr

0800d44c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d44c:	b480      	push	{r7}
 800d44e:	b08b      	sub	sp, #44	; 0x2c
 800d450:	af00      	add	r7, sp, #0
 800d452:	60f8      	str	r0, [r7, #12]
 800d454:	60b9      	str	r1, [r7, #8]
 800d456:	4613      	mov	r3, r2
 800d458:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d462:	88fb      	ldrh	r3, [r7, #6]
 800d464:	089b      	lsrs	r3, r3, #2
 800d466:	b29b      	uxth	r3, r3
 800d468:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d46a:	88fb      	ldrh	r3, [r7, #6]
 800d46c:	f003 0303 	and.w	r3, r3, #3
 800d470:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d472:	2300      	movs	r3, #0
 800d474:	623b      	str	r3, [r7, #32]
 800d476:	e014      	b.n	800d4a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d47e:	681a      	ldr	r2, [r3, #0]
 800d480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d482:	601a      	str	r2, [r3, #0]
    pDest++;
 800d484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d486:	3301      	adds	r3, #1
 800d488:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48c:	3301      	adds	r3, #1
 800d48e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d492:	3301      	adds	r3, #1
 800d494:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d498:	3301      	adds	r3, #1
 800d49a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d49c:	6a3b      	ldr	r3, [r7, #32]
 800d49e:	3301      	adds	r3, #1
 800d4a0:	623b      	str	r3, [r7, #32]
 800d4a2:	6a3a      	ldr	r2, [r7, #32]
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d3e6      	bcc.n	800d478 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d4aa:	8bfb      	ldrh	r3, [r7, #30]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d01e      	beq.n	800d4ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d4b4:	69bb      	ldr	r3, [r7, #24]
 800d4b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	f107 0310 	add.w	r3, r7, #16
 800d4c0:	6812      	ldr	r2, [r2, #0]
 800d4c2:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d4c4:	693a      	ldr	r2, [r7, #16]
 800d4c6:	6a3b      	ldr	r3, [r7, #32]
 800d4c8:	b2db      	uxtb	r3, r3
 800d4ca:	00db      	lsls	r3, r3, #3
 800d4cc:	fa22 f303 	lsr.w	r3, r2, r3
 800d4d0:	b2da      	uxtb	r2, r3
 800d4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d4:	701a      	strb	r2, [r3, #0]
      i++;
 800d4d6:	6a3b      	ldr	r3, [r7, #32]
 800d4d8:	3301      	adds	r3, #1
 800d4da:	623b      	str	r3, [r7, #32]
      pDest++;
 800d4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4de:	3301      	adds	r3, #1
 800d4e0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d4e2:	8bfb      	ldrh	r3, [r7, #30]
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d4e8:	8bfb      	ldrh	r3, [r7, #30]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d1ea      	bne.n	800d4c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	372c      	adds	r7, #44	; 0x2c
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr

0800d4fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b085      	sub	sp, #20
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	695b      	ldr	r3, [r3, #20]
 800d508:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	699b      	ldr	r3, [r3, #24]
 800d50e:	68fa      	ldr	r2, [r7, #12]
 800d510:	4013      	ands	r3, r2
 800d512:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d514:	68fb      	ldr	r3, [r7, #12]
}
 800d516:	4618      	mov	r0, r3
 800d518:	3714      	adds	r7, #20
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr

0800d522 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d522:	b480      	push	{r7}
 800d524:	b083      	sub	sp, #12
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	695b      	ldr	r3, [r3, #20]
 800d52e:	f003 0301 	and.w	r3, r3, #1
}
 800d532:	4618      	mov	r0, r3
 800d534:	370c      	adds	r7, #12
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr
	...

0800d540 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d540:	b480      	push	{r7}
 800d542:	b085      	sub	sp, #20
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d548:	2300      	movs	r3, #0
 800d54a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	3301      	adds	r3, #1
 800d550:	60fb      	str	r3, [r7, #12]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	4a13      	ldr	r2, [pc, #76]	; (800d5a4 <USB_CoreReset+0x64>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d901      	bls.n	800d55e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d55a:	2303      	movs	r3, #3
 800d55c:	e01b      	b.n	800d596 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	691b      	ldr	r3, [r3, #16]
 800d562:	2b00      	cmp	r3, #0
 800d564:	daf2      	bge.n	800d54c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d566:	2300      	movs	r3, #0
 800d568:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	691b      	ldr	r3, [r3, #16]
 800d56e:	f043 0201 	orr.w	r2, r3, #1
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	3301      	adds	r3, #1
 800d57a:	60fb      	str	r3, [r7, #12]
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	4a09      	ldr	r2, [pc, #36]	; (800d5a4 <USB_CoreReset+0x64>)
 800d580:	4293      	cmp	r3, r2
 800d582:	d901      	bls.n	800d588 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d584:	2303      	movs	r3, #3
 800d586:	e006      	b.n	800d596 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	691b      	ldr	r3, [r3, #16]
 800d58c:	f003 0301 	and.w	r3, r3, #1
 800d590:	2b01      	cmp	r3, #1
 800d592:	d0f0      	beq.n	800d576 <USB_CoreReset+0x36>

  return HAL_OK;
 800d594:	2300      	movs	r3, #0
}
 800d596:	4618      	mov	r0, r3
 800d598:	3714      	adds	r7, #20
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop
 800d5a4:	00030d40 	.word	0x00030d40

0800d5a8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d5a8:	b084      	sub	sp, #16
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b084      	sub	sp, #16
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
 800d5b2:	f107 001c 	add.w	r0, r7, #28
 800d5b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d018      	beq.n	800d620 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f0:	2b01      	cmp	r3, #1
 800d5f2:	d10a      	bne.n	800d60a <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	68ba      	ldr	r2, [r7, #8]
 800d5fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d602:	f043 0304 	orr.w	r3, r3, #4
 800d606:	6013      	str	r3, [r2, #0]
 800d608:	e014      	b.n	800d634 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	68ba      	ldr	r2, [r7, #8]
 800d614:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d618:	f023 0304 	bic.w	r3, r3, #4
 800d61c:	6013      	str	r3, [r2, #0]
 800d61e:	e009      	b.n	800d634 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	68ba      	ldr	r2, [r7, #8]
 800d62a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d62e:	f023 0304 	bic.w	r3, r3, #4
 800d632:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800d634:	2110      	movs	r1, #16
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f7ff fe82 	bl	800d340 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f7ff fea5 	bl	800d38c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d642:	2300      	movs	r3, #0
 800d644:	60fb      	str	r3, [r7, #12]
 800d646:	e015      	b.n	800d674 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	015a      	lsls	r2, r3, #5
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	4413      	add	r3, r2
 800d650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d654:	461a      	mov	r2, r3
 800d656:	f04f 33ff 	mov.w	r3, #4294967295
 800d65a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	015a      	lsls	r2, r3, #5
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	4413      	add	r3, r2
 800d664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d668:	461a      	mov	r2, r3
 800d66a:	2300      	movs	r3, #0
 800d66c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	3301      	adds	r3, #1
 800d672:	60fb      	str	r3, [r7, #12]
 800d674:	6a3b      	ldr	r3, [r7, #32]
 800d676:	68fa      	ldr	r2, [r7, #12]
 800d678:	429a      	cmp	r2, r3
 800d67a:	d3e5      	bcc.n	800d648 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800d67c:	2101      	movs	r1, #1
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 f8ac 	bl	800d7dc <USB_DriveVbus>

  HAL_Delay(200U);
 800d684:	20c8      	movs	r0, #200	; 0xc8
 800d686:	f7f4 fbb7 	bl	8001df8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2200      	movs	r2, #0
 800d68e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f04f 32ff 	mov.w	r2, #4294967295
 800d696:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d69c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d00b      	beq.n	800d6bc <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d6aa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	4a14      	ldr	r2, [pc, #80]	; (800d700 <USB_HostInit+0x158>)
 800d6b0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	4a13      	ldr	r2, [pc, #76]	; (800d704 <USB_HostInit+0x15c>)
 800d6b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d6ba:	e009      	b.n	800d6d0 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2280      	movs	r2, #128	; 0x80
 800d6c0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	4a10      	ldr	r2, [pc, #64]	; (800d708 <USB_HostInit+0x160>)
 800d6c6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	4a10      	ldr	r2, [pc, #64]	; (800d70c <USB_HostInit+0x164>)
 800d6cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d105      	bne.n	800d6e2 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	699b      	ldr	r3, [r3, #24]
 800d6da:	f043 0210 	orr.w	r2, r3, #16
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	699a      	ldr	r2, [r3, #24]
 800d6e6:	4b0a      	ldr	r3, [pc, #40]	; (800d710 <USB_HostInit+0x168>)
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	687a      	ldr	r2, [r7, #4]
 800d6ec:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800d6ee:	2300      	movs	r3, #0
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3710      	adds	r7, #16
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d6fa:	b004      	add	sp, #16
 800d6fc:	4770      	bx	lr
 800d6fe:	bf00      	nop
 800d700:	01000200 	.word	0x01000200
 800d704:	00e00300 	.word	0x00e00300
 800d708:	00600080 	.word	0x00600080
 800d70c:	004000e0 	.word	0x004000e0
 800d710:	a3200008 	.word	0xa3200008

0800d714 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d714:	b480      	push	{r7}
 800d716:	b085      	sub	sp, #20
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	460b      	mov	r3, r1
 800d71e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	68fa      	ldr	r2, [r7, #12]
 800d72e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d732:	f023 0303 	bic.w	r3, r3, #3
 800d736:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d73e:	681a      	ldr	r2, [r3, #0]
 800d740:	78fb      	ldrb	r3, [r7, #3]
 800d742:	f003 0303 	and.w	r3, r3, #3
 800d746:	68f9      	ldr	r1, [r7, #12]
 800d748:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d74c:	4313      	orrs	r3, r2
 800d74e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d750:	78fb      	ldrb	r3, [r7, #3]
 800d752:	2b01      	cmp	r3, #1
 800d754:	d107      	bne.n	800d766 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d75c:	461a      	mov	r2, r3
 800d75e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d762:	6053      	str	r3, [r2, #4]
 800d764:	e009      	b.n	800d77a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d766:	78fb      	ldrb	r3, [r7, #3]
 800d768:	2b02      	cmp	r3, #2
 800d76a:	d106      	bne.n	800d77a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d772:	461a      	mov	r2, r3
 800d774:	f241 7370 	movw	r3, #6000	; 0x1770
 800d778:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d77a:	2300      	movs	r3, #0
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3714      	adds	r7, #20
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr

0800d788 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d794:	2300      	movs	r3, #0
 800d796:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d7a8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	68fa      	ldr	r2, [r7, #12]
 800d7ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d7b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d7b6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d7b8:	2064      	movs	r0, #100	; 0x64
 800d7ba:	f7f4 fb1d 	bl	8001df8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	68fa      	ldr	r2, [r7, #12]
 800d7c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d7c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d7ca:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d7cc:	200a      	movs	r0, #10
 800d7ce:	f7f4 fb13 	bl	8001df8 <HAL_Delay>

  return HAL_OK;
 800d7d2:	2300      	movs	r3, #0
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3710      	adds	r7, #16
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b085      	sub	sp, #20
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d800:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d109      	bne.n	800d820 <USB_DriveVbus+0x44>
 800d80c:	78fb      	ldrb	r3, [r7, #3]
 800d80e:	2b01      	cmp	r3, #1
 800d810:	d106      	bne.n	800d820 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	68fa      	ldr	r2, [r7, #12]
 800d816:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d81a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d81e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d82a:	d109      	bne.n	800d840 <USB_DriveVbus+0x64>
 800d82c:	78fb      	ldrb	r3, [r7, #3]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d106      	bne.n	800d840 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	68fa      	ldr	r2, [r7, #12]
 800d836:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d83a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d83e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d840:	2300      	movs	r3, #0
}
 800d842:	4618      	mov	r0, r3
 800d844:	3714      	adds	r7, #20
 800d846:	46bd      	mov	sp, r7
 800d848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84c:	4770      	bx	lr

0800d84e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d84e:	b480      	push	{r7}
 800d850:	b085      	sub	sp, #20
 800d852:	af00      	add	r7, sp, #0
 800d854:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d85a:	2300      	movs	r3, #0
 800d85c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	0c5b      	lsrs	r3, r3, #17
 800d86c:	f003 0303 	and.w	r3, r3, #3
}
 800d870:	4618      	mov	r0, r3
 800d872:	3714      	adds	r7, #20
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr

0800d87c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b085      	sub	sp, #20
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d88e:	689b      	ldr	r3, [r3, #8]
 800d890:	b29b      	uxth	r3, r3
}
 800d892:	4618      	mov	r0, r3
 800d894:	3714      	adds	r7, #20
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr
	...

0800d8a0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b088      	sub	sp, #32
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	4608      	mov	r0, r1
 800d8aa:	4611      	mov	r1, r2
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	70fb      	strb	r3, [r7, #3]
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	70bb      	strb	r3, [r7, #2]
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d8c2:	78fb      	ldrb	r3, [r7, #3]
 800d8c4:	015a      	lsls	r2, r3, #5
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	4413      	add	r3, r2
 800d8ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d8d4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d8d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d8da:	2b03      	cmp	r3, #3
 800d8dc:	d87e      	bhi.n	800d9dc <USB_HC_Init+0x13c>
 800d8de:	a201      	add	r2, pc, #4	; (adr r2, 800d8e4 <USB_HC_Init+0x44>)
 800d8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e4:	0800d8f5 	.word	0x0800d8f5
 800d8e8:	0800d99f 	.word	0x0800d99f
 800d8ec:	0800d8f5 	.word	0x0800d8f5
 800d8f0:	0800d961 	.word	0x0800d961
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d8f4:	78fb      	ldrb	r3, [r7, #3]
 800d8f6:	015a      	lsls	r2, r3, #5
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	4413      	add	r3, r2
 800d8fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d900:	461a      	mov	r2, r3
 800d902:	f240 439d 	movw	r3, #1181	; 0x49d
 800d906:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d908:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	da10      	bge.n	800d932 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d910:	78fb      	ldrb	r3, [r7, #3]
 800d912:	015a      	lsls	r2, r3, #5
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	4413      	add	r3, r2
 800d918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d91c:	68db      	ldr	r3, [r3, #12]
 800d91e:	78fa      	ldrb	r2, [r7, #3]
 800d920:	0151      	lsls	r1, r2, #5
 800d922:	693a      	ldr	r2, [r7, #16]
 800d924:	440a      	add	r2, r1
 800d926:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d92a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d92e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800d930:	e057      	b.n	800d9e2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d051      	beq.n	800d9e2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800d93e:	78fb      	ldrb	r3, [r7, #3]
 800d940:	015a      	lsls	r2, r3, #5
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	4413      	add	r3, r2
 800d946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d94a:	68db      	ldr	r3, [r3, #12]
 800d94c:	78fa      	ldrb	r2, [r7, #3]
 800d94e:	0151      	lsls	r1, r2, #5
 800d950:	693a      	ldr	r2, [r7, #16]
 800d952:	440a      	add	r2, r1
 800d954:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d958:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d95c:	60d3      	str	r3, [r2, #12]
      break;
 800d95e:	e040      	b.n	800d9e2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d960:	78fb      	ldrb	r3, [r7, #3]
 800d962:	015a      	lsls	r2, r3, #5
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	4413      	add	r3, r2
 800d968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d96c:	461a      	mov	r2, r3
 800d96e:	f240 639d 	movw	r3, #1693	; 0x69d
 800d972:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d974:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	da34      	bge.n	800d9e6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d97c:	78fb      	ldrb	r3, [r7, #3]
 800d97e:	015a      	lsls	r2, r3, #5
 800d980:	693b      	ldr	r3, [r7, #16]
 800d982:	4413      	add	r3, r2
 800d984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d988:	68db      	ldr	r3, [r3, #12]
 800d98a:	78fa      	ldrb	r2, [r7, #3]
 800d98c:	0151      	lsls	r1, r2, #5
 800d98e:	693a      	ldr	r2, [r7, #16]
 800d990:	440a      	add	r2, r1
 800d992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d99a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d99c:	e023      	b.n	800d9e6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d99e:	78fb      	ldrb	r3, [r7, #3]
 800d9a0:	015a      	lsls	r2, r3, #5
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	4413      	add	r3, r2
 800d9a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	f240 2325 	movw	r3, #549	; 0x225
 800d9b0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d9b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	da17      	bge.n	800d9ea <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d9ba:	78fb      	ldrb	r3, [r7, #3]
 800d9bc:	015a      	lsls	r2, r3, #5
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	78fa      	ldrb	r2, [r7, #3]
 800d9ca:	0151      	lsls	r1, r2, #5
 800d9cc:	693a      	ldr	r2, [r7, #16]
 800d9ce:	440a      	add	r2, r1
 800d9d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d9d4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d9d8:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d9da:	e006      	b.n	800d9ea <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	77fb      	strb	r3, [r7, #31]
      break;
 800d9e0:	e004      	b.n	800d9ec <USB_HC_Init+0x14c>
      break;
 800d9e2:	bf00      	nop
 800d9e4:	e002      	b.n	800d9ec <USB_HC_Init+0x14c>
      break;
 800d9e6:	bf00      	nop
 800d9e8:	e000      	b.n	800d9ec <USB_HC_Init+0x14c>
      break;
 800d9ea:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d9f2:	699a      	ldr	r2, [r3, #24]
 800d9f4:	78fb      	ldrb	r3, [r7, #3]
 800d9f6:	f003 030f 	and.w	r3, r3, #15
 800d9fa:	2101      	movs	r1, #1
 800d9fc:	fa01 f303 	lsl.w	r3, r1, r3
 800da00:	6939      	ldr	r1, [r7, #16]
 800da02:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800da06:	4313      	orrs	r3, r2
 800da08:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	699b      	ldr	r3, [r3, #24]
 800da0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800da16:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	da03      	bge.n	800da26 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800da1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da22:	61bb      	str	r3, [r7, #24]
 800da24:	e001      	b.n	800da2a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800da26:	2300      	movs	r3, #0
 800da28:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f7ff ff0f 	bl	800d84e <USB_GetHostSpeed>
 800da30:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800da32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800da36:	2b02      	cmp	r3, #2
 800da38:	d106      	bne.n	800da48 <USB_HC_Init+0x1a8>
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2b02      	cmp	r3, #2
 800da3e:	d003      	beq.n	800da48 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800da40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800da44:	617b      	str	r3, [r7, #20]
 800da46:	e001      	b.n	800da4c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800da48:	2300      	movs	r3, #0
 800da4a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800da4c:	787b      	ldrb	r3, [r7, #1]
 800da4e:	059b      	lsls	r3, r3, #22
 800da50:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800da54:	78bb      	ldrb	r3, [r7, #2]
 800da56:	02db      	lsls	r3, r3, #11
 800da58:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800da5c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800da5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800da62:	049b      	lsls	r3, r3, #18
 800da64:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800da68:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800da6a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800da6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800da70:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800da72:	69bb      	ldr	r3, [r7, #24]
 800da74:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800da76:	78fb      	ldrb	r3, [r7, #3]
 800da78:	0159      	lsls	r1, r3, #5
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	440b      	add	r3, r1
 800da7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da82:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800da88:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800da8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800da8e:	2b03      	cmp	r3, #3
 800da90:	d10f      	bne.n	800dab2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800da92:	78fb      	ldrb	r3, [r7, #3]
 800da94:	015a      	lsls	r2, r3, #5
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	4413      	add	r3, r2
 800da9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	78fa      	ldrb	r2, [r7, #3]
 800daa2:	0151      	lsls	r1, r2, #5
 800daa4:	693a      	ldr	r2, [r7, #16]
 800daa6:	440a      	add	r2, r1
 800daa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800daac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dab0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800dab2:	7ffb      	ldrb	r3, [r7, #31]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3720      	adds	r7, #32
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}

0800dabc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b08c      	sub	sp, #48	; 0x30
 800dac0:	af02      	add	r7, sp, #8
 800dac2:	60f8      	str	r0, [r7, #12]
 800dac4:	60b9      	str	r1, [r7, #8]
 800dac6:	4613      	mov	r3, r2
 800dac8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	785b      	ldrb	r3, [r3, #1]
 800dad2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800dad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dad8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d02d      	beq.n	800db42 <USB_HC_StartXfer+0x86>
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	791b      	ldrb	r3, [r3, #4]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d129      	bne.n	800db42 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800daee:	79fb      	ldrb	r3, [r7, #7]
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d117      	bne.n	800db24 <USB_HC_StartXfer+0x68>
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	79db      	ldrb	r3, [r3, #7]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d003      	beq.n	800db04 <USB_HC_StartXfer+0x48>
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	79db      	ldrb	r3, [r3, #7]
 800db00:	2b02      	cmp	r3, #2
 800db02:	d10f      	bne.n	800db24 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800db04:	69fb      	ldr	r3, [r7, #28]
 800db06:	015a      	lsls	r2, r3, #5
 800db08:	6a3b      	ldr	r3, [r7, #32]
 800db0a:	4413      	add	r3, r2
 800db0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db10:	68db      	ldr	r3, [r3, #12]
 800db12:	69fa      	ldr	r2, [r7, #28]
 800db14:	0151      	lsls	r1, r2, #5
 800db16:	6a3a      	ldr	r2, [r7, #32]
 800db18:	440a      	add	r2, r1
 800db1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800db1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db22:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800db24:	79fb      	ldrb	r3, [r7, #7]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d10b      	bne.n	800db42 <USB_HC_StartXfer+0x86>
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	795b      	ldrb	r3, [r3, #5]
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d107      	bne.n	800db42 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	785b      	ldrb	r3, [r3, #1]
 800db36:	4619      	mov	r1, r3
 800db38:	68f8      	ldr	r0, [r7, #12]
 800db3a:	f000 fa2f 	bl	800df9c <USB_DoPing>
      return HAL_OK;
 800db3e:	2300      	movs	r3, #0
 800db40:	e0f8      	b.n	800dd34 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	695b      	ldr	r3, [r3, #20]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d018      	beq.n	800db7c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	695b      	ldr	r3, [r3, #20]
 800db4e:	68ba      	ldr	r2, [r7, #8]
 800db50:	8912      	ldrh	r2, [r2, #8]
 800db52:	4413      	add	r3, r2
 800db54:	3b01      	subs	r3, #1
 800db56:	68ba      	ldr	r2, [r7, #8]
 800db58:	8912      	ldrh	r2, [r2, #8]
 800db5a:	fbb3 f3f2 	udiv	r3, r3, r2
 800db5e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800db60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800db62:	8b7b      	ldrh	r3, [r7, #26]
 800db64:	429a      	cmp	r2, r3
 800db66:	d90b      	bls.n	800db80 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800db68:	8b7b      	ldrh	r3, [r7, #26]
 800db6a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800db6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800db6e:	68ba      	ldr	r2, [r7, #8]
 800db70:	8912      	ldrh	r2, [r2, #8]
 800db72:	fb02 f203 	mul.w	r2, r2, r3
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	611a      	str	r2, [r3, #16]
 800db7a:	e001      	b.n	800db80 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800db7c:	2301      	movs	r3, #1
 800db7e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	78db      	ldrb	r3, [r3, #3]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d007      	beq.n	800db98 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800db88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800db8a:	68ba      	ldr	r2, [r7, #8]
 800db8c:	8912      	ldrh	r2, [r2, #8]
 800db8e:	fb02 f203 	mul.w	r2, r2, r3
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	611a      	str	r2, [r3, #16]
 800db96:	e003      	b.n	800dba0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	695a      	ldr	r2, [r3, #20]
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	691b      	ldr	r3, [r3, #16]
 800dba4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dba8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dbaa:	04d9      	lsls	r1, r3, #19
 800dbac:	4b63      	ldr	r3, [pc, #396]	; (800dd3c <USB_HC_StartXfer+0x280>)
 800dbae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dbb0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	7a9b      	ldrb	r3, [r3, #10]
 800dbb6:	075b      	lsls	r3, r3, #29
 800dbb8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dbbc:	69f9      	ldr	r1, [r7, #28]
 800dbbe:	0148      	lsls	r0, r1, #5
 800dbc0:	6a39      	ldr	r1, [r7, #32]
 800dbc2:	4401      	add	r1, r0
 800dbc4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dbc8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dbca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800dbcc:	79fb      	ldrb	r3, [r7, #7]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d009      	beq.n	800dbe6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	68d9      	ldr	r1, [r3, #12]
 800dbd6:	69fb      	ldr	r3, [r7, #28]
 800dbd8:	015a      	lsls	r2, r3, #5
 800dbda:	6a3b      	ldr	r3, [r7, #32]
 800dbdc:	4413      	add	r3, r2
 800dbde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbe2:	460a      	mov	r2, r1
 800dbe4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800dbe6:	6a3b      	ldr	r3, [r7, #32]
 800dbe8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dbec:	689b      	ldr	r3, [r3, #8]
 800dbee:	f003 0301 	and.w	r3, r3, #1
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	bf0c      	ite	eq
 800dbf6:	2301      	moveq	r3, #1
 800dbf8:	2300      	movne	r3, #0
 800dbfa:	b2db      	uxtb	r3, r3
 800dbfc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	015a      	lsls	r2, r3, #5
 800dc02:	6a3b      	ldr	r3, [r7, #32]
 800dc04:	4413      	add	r3, r2
 800dc06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	69fa      	ldr	r2, [r7, #28]
 800dc0e:	0151      	lsls	r1, r2, #5
 800dc10:	6a3a      	ldr	r2, [r7, #32]
 800dc12:	440a      	add	r2, r1
 800dc14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dc1c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800dc1e:	69fb      	ldr	r3, [r7, #28]
 800dc20:	015a      	lsls	r2, r3, #5
 800dc22:	6a3b      	ldr	r3, [r7, #32]
 800dc24:	4413      	add	r3, r2
 800dc26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	7e7b      	ldrb	r3, [r7, #25]
 800dc2e:	075b      	lsls	r3, r3, #29
 800dc30:	69f9      	ldr	r1, [r7, #28]
 800dc32:	0148      	lsls	r0, r1, #5
 800dc34:	6a39      	ldr	r1, [r7, #32]
 800dc36:	4401      	add	r1, r0
 800dc38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800dc3c:	4313      	orrs	r3, r2
 800dc3e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	015a      	lsls	r2, r3, #5
 800dc44:	6a3b      	ldr	r3, [r7, #32]
 800dc46:	4413      	add	r3, r2
 800dc48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dc56:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	78db      	ldrb	r3, [r3, #3]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d004      	beq.n	800dc6a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc66:	613b      	str	r3, [r7, #16]
 800dc68:	e003      	b.n	800dc72 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dc70:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dc78:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800dc7a:	69fb      	ldr	r3, [r7, #28]
 800dc7c:	015a      	lsls	r2, r3, #5
 800dc7e:	6a3b      	ldr	r3, [r7, #32]
 800dc80:	4413      	add	r3, r2
 800dc82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc86:	461a      	mov	r2, r3
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800dc8c:	79fb      	ldrb	r3, [r7, #7]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d001      	beq.n	800dc96 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800dc92:	2300      	movs	r3, #0
 800dc94:	e04e      	b.n	800dd34 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	78db      	ldrb	r3, [r3, #3]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d149      	bne.n	800dd32 <USB_HC_StartXfer+0x276>
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	695b      	ldr	r3, [r3, #20]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d045      	beq.n	800dd32 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	79db      	ldrb	r3, [r3, #7]
 800dcaa:	2b03      	cmp	r3, #3
 800dcac:	d830      	bhi.n	800dd10 <USB_HC_StartXfer+0x254>
 800dcae:	a201      	add	r2, pc, #4	; (adr r2, 800dcb4 <USB_HC_StartXfer+0x1f8>)
 800dcb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb4:	0800dcc5 	.word	0x0800dcc5
 800dcb8:	0800dce9 	.word	0x0800dce9
 800dcbc:	0800dcc5 	.word	0x0800dcc5
 800dcc0:	0800dce9 	.word	0x0800dce9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	695b      	ldr	r3, [r3, #20]
 800dcc8:	3303      	adds	r3, #3
 800dcca:	089b      	lsrs	r3, r3, #2
 800dccc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800dcce:	8afa      	ldrh	r2, [r7, #22]
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd4:	b29b      	uxth	r3, r3
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d91c      	bls.n	800dd14 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	699b      	ldr	r3, [r3, #24]
 800dcde:	f043 0220 	orr.w	r2, r3, #32
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	619a      	str	r2, [r3, #24]
        }
        break;
 800dce6:	e015      	b.n	800dd14 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	695b      	ldr	r3, [r3, #20]
 800dcec:	3303      	adds	r3, #3
 800dcee:	089b      	lsrs	r3, r3, #2
 800dcf0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800dcf2:	8afa      	ldrh	r2, [r7, #22]
 800dcf4:	6a3b      	ldr	r3, [r7, #32]
 800dcf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dcfa:	691b      	ldr	r3, [r3, #16]
 800dcfc:	b29b      	uxth	r3, r3
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d90a      	bls.n	800dd18 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	699b      	ldr	r3, [r3, #24]
 800dd06:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	619a      	str	r2, [r3, #24]
        }
        break;
 800dd0e:	e003      	b.n	800dd18 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800dd10:	bf00      	nop
 800dd12:	e002      	b.n	800dd1a <USB_HC_StartXfer+0x25e>
        break;
 800dd14:	bf00      	nop
 800dd16:	e000      	b.n	800dd1a <USB_HC_StartXfer+0x25e>
        break;
 800dd18:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	68d9      	ldr	r1, [r3, #12]
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	785a      	ldrb	r2, [r3, #1]
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	695b      	ldr	r3, [r3, #20]
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	2000      	movs	r0, #0
 800dd2a:	9000      	str	r0, [sp, #0]
 800dd2c:	68f8      	ldr	r0, [r7, #12]
 800dd2e:	f7ff fb4f 	bl	800d3d0 <USB_WritePacket>
  }

  return HAL_OK;
 800dd32:	2300      	movs	r3, #0
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3728      	adds	r7, #40	; 0x28
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	1ff80000 	.word	0x1ff80000

0800dd40 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b085      	sub	sp, #20
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dd52:	695b      	ldr	r3, [r3, #20]
 800dd54:	b29b      	uxth	r3, r3
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3714      	adds	r7, #20
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd60:	4770      	bx	lr

0800dd62 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800dd62:	b480      	push	{r7}
 800dd64:	b089      	sub	sp, #36	; 0x24
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	6078      	str	r0, [r7, #4]
 800dd6a:	460b      	mov	r3, r1
 800dd6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800dd72:	78fb      	ldrb	r3, [r7, #3]
 800dd74:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800dd76:	2300      	movs	r3, #0
 800dd78:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	015a      	lsls	r2, r3, #5
 800dd7e:	69bb      	ldr	r3, [r7, #24]
 800dd80:	4413      	add	r3, r2
 800dd82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	0c9b      	lsrs	r3, r3, #18
 800dd8a:	f003 0303 	and.w	r3, r3, #3
 800dd8e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	015a      	lsls	r2, r3, #5
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	4413      	add	r3, r2
 800dd98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	0fdb      	lsrs	r3, r3, #31
 800dda0:	f003 0301 	and.w	r3, r3, #1
 800dda4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	689b      	ldr	r3, [r3, #8]
 800ddaa:	f003 0320 	and.w	r3, r3, #32
 800ddae:	2b20      	cmp	r3, #32
 800ddb0:	d104      	bne.n	800ddbc <USB_HC_Halt+0x5a>
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d101      	bne.n	800ddbc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	e0e8      	b.n	800df8e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d002      	beq.n	800ddc8 <USB_HC_Halt+0x66>
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	2b02      	cmp	r3, #2
 800ddc6:	d173      	bne.n	800deb0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	015a      	lsls	r2, r3, #5
 800ddcc:	69bb      	ldr	r3, [r7, #24]
 800ddce:	4413      	add	r3, r2
 800ddd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	697a      	ldr	r2, [r7, #20]
 800ddd8:	0151      	lsls	r1, r2, #5
 800ddda:	69ba      	ldr	r2, [r7, #24]
 800dddc:	440a      	add	r2, r1
 800ddde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dde2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dde6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	689b      	ldr	r3, [r3, #8]
 800ddec:	f003 0320 	and.w	r3, r3, #32
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	f040 80cb 	bne.w	800df8c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddfa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d143      	bne.n	800de8a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	015a      	lsls	r2, r3, #5
 800de06:	69bb      	ldr	r3, [r7, #24]
 800de08:	4413      	add	r3, r2
 800de0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	697a      	ldr	r2, [r7, #20]
 800de12:	0151      	lsls	r1, r2, #5
 800de14:	69ba      	ldr	r2, [r7, #24]
 800de16:	440a      	add	r2, r1
 800de18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de20:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	015a      	lsls	r2, r3, #5
 800de26:	69bb      	ldr	r3, [r7, #24]
 800de28:	4413      	add	r3, r2
 800de2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	697a      	ldr	r2, [r7, #20]
 800de32:	0151      	lsls	r1, r2, #5
 800de34:	69ba      	ldr	r2, [r7, #24]
 800de36:	440a      	add	r2, r1
 800de38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800de40:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	015a      	lsls	r2, r3, #5
 800de46:	69bb      	ldr	r3, [r7, #24]
 800de48:	4413      	add	r3, r2
 800de4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	697a      	ldr	r2, [r7, #20]
 800de52:	0151      	lsls	r1, r2, #5
 800de54:	69ba      	ldr	r2, [r7, #24]
 800de56:	440a      	add	r2, r1
 800de58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800de60:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800de62:	69fb      	ldr	r3, [r7, #28]
 800de64:	3301      	adds	r3, #1
 800de66:	61fb      	str	r3, [r7, #28]
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de6e:	d81d      	bhi.n	800deac <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	015a      	lsls	r2, r3, #5
 800de74:	69bb      	ldr	r3, [r7, #24]
 800de76:	4413      	add	r3, r2
 800de78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de86:	d0ec      	beq.n	800de62 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800de88:	e080      	b.n	800df8c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	015a      	lsls	r2, r3, #5
 800de8e:	69bb      	ldr	r3, [r7, #24]
 800de90:	4413      	add	r3, r2
 800de92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	697a      	ldr	r2, [r7, #20]
 800de9a:	0151      	lsls	r1, r2, #5
 800de9c:	69ba      	ldr	r2, [r7, #24]
 800de9e:	440a      	add	r2, r1
 800dea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dea4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dea8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800deaa:	e06f      	b.n	800df8c <USB_HC_Halt+0x22a>
            break;
 800deac:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800deae:	e06d      	b.n	800df8c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	015a      	lsls	r2, r3, #5
 800deb4:	69bb      	ldr	r3, [r7, #24]
 800deb6:	4413      	add	r3, r2
 800deb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	697a      	ldr	r2, [r7, #20]
 800dec0:	0151      	lsls	r1, r2, #5
 800dec2:	69ba      	ldr	r2, [r7, #24]
 800dec4:	440a      	add	r2, r1
 800dec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800deca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dece:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ded0:	69bb      	ldr	r3, [r7, #24]
 800ded2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ded6:	691b      	ldr	r3, [r3, #16]
 800ded8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d143      	bne.n	800df68 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	015a      	lsls	r2, r3, #5
 800dee4:	69bb      	ldr	r3, [r7, #24]
 800dee6:	4413      	add	r3, r2
 800dee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	697a      	ldr	r2, [r7, #20]
 800def0:	0151      	lsls	r1, r2, #5
 800def2:	69ba      	ldr	r2, [r7, #24]
 800def4:	440a      	add	r2, r1
 800def6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800defa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800defe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	015a      	lsls	r2, r3, #5
 800df04:	69bb      	ldr	r3, [r7, #24]
 800df06:	4413      	add	r3, r2
 800df08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	697a      	ldr	r2, [r7, #20]
 800df10:	0151      	lsls	r1, r2, #5
 800df12:	69ba      	ldr	r2, [r7, #24]
 800df14:	440a      	add	r2, r1
 800df16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df1e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	015a      	lsls	r2, r3, #5
 800df24:	69bb      	ldr	r3, [r7, #24]
 800df26:	4413      	add	r3, r2
 800df28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	697a      	ldr	r2, [r7, #20]
 800df30:	0151      	lsls	r1, r2, #5
 800df32:	69ba      	ldr	r2, [r7, #24]
 800df34:	440a      	add	r2, r1
 800df36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800df3e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	3301      	adds	r3, #1
 800df44:	61fb      	str	r3, [r7, #28]
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df4c:	d81d      	bhi.n	800df8a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	015a      	lsls	r2, r3, #5
 800df52:	69bb      	ldr	r3, [r7, #24]
 800df54:	4413      	add	r3, r2
 800df56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df64:	d0ec      	beq.n	800df40 <USB_HC_Halt+0x1de>
 800df66:	e011      	b.n	800df8c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	015a      	lsls	r2, r3, #5
 800df6c:	69bb      	ldr	r3, [r7, #24]
 800df6e:	4413      	add	r3, r2
 800df70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	697a      	ldr	r2, [r7, #20]
 800df78:	0151      	lsls	r1, r2, #5
 800df7a:	69ba      	ldr	r2, [r7, #24]
 800df7c:	440a      	add	r2, r1
 800df7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df86:	6013      	str	r3, [r2, #0]
 800df88:	e000      	b.n	800df8c <USB_HC_Halt+0x22a>
          break;
 800df8a:	bf00      	nop
    }
  }

  return HAL_OK;
 800df8c:	2300      	movs	r3, #0
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3724      	adds	r7, #36	; 0x24
 800df92:	46bd      	mov	sp, r7
 800df94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df98:	4770      	bx	lr
	...

0800df9c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800df9c:	b480      	push	{r7}
 800df9e:	b087      	sub	sp, #28
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800dfac:	78fb      	ldrb	r3, [r7, #3]
 800dfae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	04da      	lsls	r2, r3, #19
 800dfb8:	4b15      	ldr	r3, [pc, #84]	; (800e010 <USB_DoPing+0x74>)
 800dfba:	4013      	ands	r3, r2
 800dfbc:	693a      	ldr	r2, [r7, #16]
 800dfbe:	0151      	lsls	r1, r2, #5
 800dfc0:	697a      	ldr	r2, [r7, #20]
 800dfc2:	440a      	add	r2, r1
 800dfc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dfc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dfcc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	015a      	lsls	r2, r3, #5
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	4413      	add	r3, r2
 800dfd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dfe4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dfec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	015a      	lsls	r2, r3, #5
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	4413      	add	r3, r2
 800dff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dffa:	461a      	mov	r2, r3
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e000:	2300      	movs	r3, #0
}
 800e002:	4618      	mov	r0, r3
 800e004:	371c      	adds	r7, #28
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr
 800e00e:	bf00      	nop
 800e010:	1ff80000 	.word	0x1ff80000

0800e014 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b086      	sub	sp, #24
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800e020:	2300      	movs	r3, #0
 800e022:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f7ff f950 	bl	800d2ca <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800e02a:	2110      	movs	r1, #16
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f7ff f987 	bl	800d340 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f7ff f9aa 	bl	800d38c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e038:	2300      	movs	r3, #0
 800e03a:	613b      	str	r3, [r7, #16]
 800e03c:	e01f      	b.n	800e07e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	015a      	lsls	r2, r3, #5
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	4413      	add	r3, r2
 800e046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e054:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e05c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e064:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	015a      	lsls	r2, r3, #5
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	4413      	add	r3, r2
 800e06e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e072:	461a      	mov	r2, r3
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	3301      	adds	r3, #1
 800e07c:	613b      	str	r3, [r7, #16]
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	2b0f      	cmp	r3, #15
 800e082:	d9dc      	bls.n	800e03e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e084:	2300      	movs	r3, #0
 800e086:	613b      	str	r3, [r7, #16]
 800e088:	e034      	b.n	800e0f4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	015a      	lsls	r2, r3, #5
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	4413      	add	r3, r2
 800e092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e0a0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e0a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e0b0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	015a      	lsls	r2, r3, #5
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e0be:	461a      	mov	r2, r3
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	617b      	str	r3, [r7, #20]
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e0d0:	d80c      	bhi.n	800e0ec <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e0d2:	693b      	ldr	r3, [r7, #16]
 800e0d4:	015a      	lsls	r2, r3, #5
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	4413      	add	r3, r2
 800e0da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e0e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e0e8:	d0ec      	beq.n	800e0c4 <USB_StopHost+0xb0>
 800e0ea:	e000      	b.n	800e0ee <USB_StopHost+0xda>
        break;
 800e0ec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	613b      	str	r3, [r7, #16]
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	2b0f      	cmp	r3, #15
 800e0f8:	d9c7      	bls.n	800e08a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e100:	461a      	mov	r2, r3
 800e102:	f04f 33ff 	mov.w	r3, #4294967295
 800e106:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f04f 32ff 	mov.w	r2, #4294967295
 800e10e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f7ff f8c9 	bl	800d2a8 <USB_EnableGlobalInt>

  return HAL_OK;
 800e116:	2300      	movs	r3, #0
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3718      	adds	r7, #24
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800e120:	b590      	push	{r4, r7, lr}
 800e122:	b089      	sub	sp, #36	; 0x24
 800e124:	af04      	add	r7, sp, #16
 800e126:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800e128:	2301      	movs	r3, #1
 800e12a:	2202      	movs	r2, #2
 800e12c:	2102      	movs	r1, #2
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 fccc 	bl	800eacc <USBH_FindInterface>
 800e134:	4603      	mov	r3, r0
 800e136:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e138:	7bfb      	ldrb	r3, [r7, #15]
 800e13a:	2bff      	cmp	r3, #255	; 0xff
 800e13c:	d002      	beq.n	800e144 <USBH_CDC_InterfaceInit+0x24>
 800e13e:	7bfb      	ldrb	r3, [r7, #15]
 800e140:	2b01      	cmp	r3, #1
 800e142:	d901      	bls.n	800e148 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e144:	2302      	movs	r3, #2
 800e146:	e13d      	b.n	800e3c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800e148:	7bfb      	ldrb	r3, [r7, #15]
 800e14a:	4619      	mov	r1, r3
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f000 fca1 	bl	800ea94 <USBH_SelectInterface>
 800e152:	4603      	mov	r3, r0
 800e154:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800e156:	7bbb      	ldrb	r3, [r7, #14]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d001      	beq.n	800e160 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800e15c:	2302      	movs	r3, #2
 800e15e:	e131      	b.n	800e3c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800e166:	2050      	movs	r0, #80	; 0x50
 800e168:	f002 fb46 	bl	80107f8 <malloc>
 800e16c:	4603      	mov	r3, r0
 800e16e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e176:	69db      	ldr	r3, [r3, #28]
 800e178:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d101      	bne.n	800e184 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800e180:	2302      	movs	r3, #2
 800e182:	e11f      	b.n	800e3c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800e184:	2250      	movs	r2, #80	; 0x50
 800e186:	2100      	movs	r1, #0
 800e188:	68b8      	ldr	r0, [r7, #8]
 800e18a:	f002 fb45 	bl	8010818 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e18e:	7bfb      	ldrb	r3, [r7, #15]
 800e190:	687a      	ldr	r2, [r7, #4]
 800e192:	211a      	movs	r1, #26
 800e194:	fb01 f303 	mul.w	r3, r1, r3
 800e198:	4413      	add	r3, r2
 800e19a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	b25b      	sxtb	r3, r3
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	da15      	bge.n	800e1d2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e1a6:	7bfb      	ldrb	r3, [r7, #15]
 800e1a8:	687a      	ldr	r2, [r7, #4]
 800e1aa:	211a      	movs	r1, #26
 800e1ac:	fb01 f303 	mul.w	r3, r1, r3
 800e1b0:	4413      	add	r3, r2
 800e1b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e1b6:	781a      	ldrb	r2, [r3, #0]
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e1bc:	7bfb      	ldrb	r3, [r7, #15]
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	211a      	movs	r1, #26
 800e1c2:	fb01 f303 	mul.w	r3, r1, r3
 800e1c6:	4413      	add	r3, r2
 800e1c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e1cc:	881a      	ldrh	r2, [r3, #0]
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	785b      	ldrb	r3, [r3, #1]
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f001 fe98 	bl	800ff0e <USBH_AllocPipe>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	461a      	mov	r2, r3
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	7819      	ldrb	r1, [r3, #0]
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	7858      	ldrb	r0, [r3, #1]
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e1fa:	68ba      	ldr	r2, [r7, #8]
 800e1fc:	8952      	ldrh	r2, [r2, #10]
 800e1fe:	9202      	str	r2, [sp, #8]
 800e200:	2203      	movs	r2, #3
 800e202:	9201      	str	r2, [sp, #4]
 800e204:	9300      	str	r3, [sp, #0]
 800e206:	4623      	mov	r3, r4
 800e208:	4602      	mov	r2, r0
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f001 fe50 	bl	800feb0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	2200      	movs	r2, #0
 800e216:	4619      	mov	r1, r3
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f002 fa3f 	bl	801069c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800e21e:	2300      	movs	r3, #0
 800e220:	2200      	movs	r2, #0
 800e222:	210a      	movs	r1, #10
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f000 fc51 	bl	800eacc <USBH_FindInterface>
 800e22a:	4603      	mov	r3, r0
 800e22c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e22e:	7bfb      	ldrb	r3, [r7, #15]
 800e230:	2bff      	cmp	r3, #255	; 0xff
 800e232:	d002      	beq.n	800e23a <USBH_CDC_InterfaceInit+0x11a>
 800e234:	7bfb      	ldrb	r3, [r7, #15]
 800e236:	2b01      	cmp	r3, #1
 800e238:	d901      	bls.n	800e23e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e23a:	2302      	movs	r3, #2
 800e23c:	e0c2      	b.n	800e3c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e23e:	7bfb      	ldrb	r3, [r7, #15]
 800e240:	687a      	ldr	r2, [r7, #4]
 800e242:	211a      	movs	r1, #26
 800e244:	fb01 f303 	mul.w	r3, r1, r3
 800e248:	4413      	add	r3, r2
 800e24a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	b25b      	sxtb	r3, r3
 800e252:	2b00      	cmp	r3, #0
 800e254:	da16      	bge.n	800e284 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e256:	7bfb      	ldrb	r3, [r7, #15]
 800e258:	687a      	ldr	r2, [r7, #4]
 800e25a:	211a      	movs	r1, #26
 800e25c:	fb01 f303 	mul.w	r3, r1, r3
 800e260:	4413      	add	r3, r2
 800e262:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e266:	781a      	ldrb	r2, [r3, #0]
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e26c:	7bfb      	ldrb	r3, [r7, #15]
 800e26e:	687a      	ldr	r2, [r7, #4]
 800e270:	211a      	movs	r1, #26
 800e272:	fb01 f303 	mul.w	r3, r1, r3
 800e276:	4413      	add	r3, r2
 800e278:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e27c:	881a      	ldrh	r2, [r3, #0]
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	835a      	strh	r2, [r3, #26]
 800e282:	e015      	b.n	800e2b0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e284:	7bfb      	ldrb	r3, [r7, #15]
 800e286:	687a      	ldr	r2, [r7, #4]
 800e288:	211a      	movs	r1, #26
 800e28a:	fb01 f303 	mul.w	r3, r1, r3
 800e28e:	4413      	add	r3, r2
 800e290:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e294:	781a      	ldrb	r2, [r3, #0]
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e29a:	7bfb      	ldrb	r3, [r7, #15]
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	211a      	movs	r1, #26
 800e2a0:	fb01 f303 	mul.w	r3, r1, r3
 800e2a4:	4413      	add	r3, r2
 800e2a6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e2aa:	881a      	ldrh	r2, [r3, #0]
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800e2b0:	7bfb      	ldrb	r3, [r7, #15]
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	211a      	movs	r1, #26
 800e2b6:	fb01 f303 	mul.w	r3, r1, r3
 800e2ba:	4413      	add	r3, r2
 800e2bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	b25b      	sxtb	r3, r3
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	da16      	bge.n	800e2f6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e2c8:	7bfb      	ldrb	r3, [r7, #15]
 800e2ca:	687a      	ldr	r2, [r7, #4]
 800e2cc:	211a      	movs	r1, #26
 800e2ce:	fb01 f303 	mul.w	r3, r1, r3
 800e2d2:	4413      	add	r3, r2
 800e2d4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e2d8:	781a      	ldrb	r2, [r3, #0]
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e2de:	7bfb      	ldrb	r3, [r7, #15]
 800e2e0:	687a      	ldr	r2, [r7, #4]
 800e2e2:	211a      	movs	r1, #26
 800e2e4:	fb01 f303 	mul.w	r3, r1, r3
 800e2e8:	4413      	add	r3, r2
 800e2ea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e2ee:	881a      	ldrh	r2, [r3, #0]
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	835a      	strh	r2, [r3, #26]
 800e2f4:	e015      	b.n	800e322 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e2f6:	7bfb      	ldrb	r3, [r7, #15]
 800e2f8:	687a      	ldr	r2, [r7, #4]
 800e2fa:	211a      	movs	r1, #26
 800e2fc:	fb01 f303 	mul.w	r3, r1, r3
 800e300:	4413      	add	r3, r2
 800e302:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e306:	781a      	ldrb	r2, [r3, #0]
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e30c:	7bfb      	ldrb	r3, [r7, #15]
 800e30e:	687a      	ldr	r2, [r7, #4]
 800e310:	211a      	movs	r1, #26
 800e312:	fb01 f303 	mul.w	r3, r1, r3
 800e316:	4413      	add	r3, r2
 800e318:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e31c:	881a      	ldrh	r2, [r3, #0]
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	7b9b      	ldrb	r3, [r3, #14]
 800e326:	4619      	mov	r1, r3
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f001 fdf0 	bl	800ff0e <USBH_AllocPipe>
 800e32e:	4603      	mov	r3, r0
 800e330:	461a      	mov	r2, r3
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	7bdb      	ldrb	r3, [r3, #15]
 800e33a:	4619      	mov	r1, r3
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f001 fde6 	bl	800ff0e <USBH_AllocPipe>
 800e342:	4603      	mov	r3, r0
 800e344:	461a      	mov	r2, r3
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	7b59      	ldrb	r1, [r3, #13]
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	7b98      	ldrb	r0, [r3, #14]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e35e:	68ba      	ldr	r2, [r7, #8]
 800e360:	8b12      	ldrh	r2, [r2, #24]
 800e362:	9202      	str	r2, [sp, #8]
 800e364:	2202      	movs	r2, #2
 800e366:	9201      	str	r2, [sp, #4]
 800e368:	9300      	str	r3, [sp, #0]
 800e36a:	4623      	mov	r3, r4
 800e36c:	4602      	mov	r2, r0
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f001 fd9e 	bl	800feb0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	7b19      	ldrb	r1, [r3, #12]
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	7bd8      	ldrb	r0, [r3, #15]
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e388:	68ba      	ldr	r2, [r7, #8]
 800e38a:	8b52      	ldrh	r2, [r2, #26]
 800e38c:	9202      	str	r2, [sp, #8]
 800e38e:	2202      	movs	r2, #2
 800e390:	9201      	str	r2, [sp, #4]
 800e392:	9300      	str	r3, [sp, #0]
 800e394:	4623      	mov	r3, r4
 800e396:	4602      	mov	r2, r0
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f001 fd89 	bl	800feb0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	7b5b      	ldrb	r3, [r3, #13]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f002 f974 	bl	801069c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	7b1b      	ldrb	r3, [r3, #12]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	4619      	mov	r1, r3
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f002 f96d 	bl	801069c <USBH_LL_SetToggle>

  return USBH_OK;
 800e3c2:	2300      	movs	r3, #0
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3714      	adds	r7, #20
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd90      	pop	{r4, r7, pc}

0800e3cc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b084      	sub	sp, #16
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e3da:	69db      	ldr	r3, [r3, #28]
 800e3dc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d00e      	beq.n	800e404 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	781b      	ldrb	r3, [r3, #0]
 800e3ea:	4619      	mov	r1, r3
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f001 fd7e 	bl	800feee <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	4619      	mov	r1, r3
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f001 fda9 	bl	800ff50 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2200      	movs	r2, #0
 800e402:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	7b1b      	ldrb	r3, [r3, #12]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d00e      	beq.n	800e42a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	7b1b      	ldrb	r3, [r3, #12]
 800e410:	4619      	mov	r1, r3
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f001 fd6b 	bl	800feee <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	7b1b      	ldrb	r3, [r3, #12]
 800e41c:	4619      	mov	r1, r3
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f001 fd96 	bl	800ff50 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2200      	movs	r2, #0
 800e428:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	7b5b      	ldrb	r3, [r3, #13]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d00e      	beq.n	800e450 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	7b5b      	ldrb	r3, [r3, #13]
 800e436:	4619      	mov	r1, r3
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f001 fd58 	bl	800feee <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	7b5b      	ldrb	r3, [r3, #13]
 800e442:	4619      	mov	r1, r3
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f001 fd83 	bl	800ff50 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	2200      	movs	r2, #0
 800e44e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e456:	69db      	ldr	r3, [r3, #28]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d00b      	beq.n	800e474 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e462:	69db      	ldr	r3, [r3, #28]
 800e464:	4618      	mov	r0, r3
 800e466:	f002 f9cf 	bl	8010808 <free>
    phost->pActiveClass->pData = 0U;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e470:	2200      	movs	r2, #0
 800e472:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e474:	2300      	movs	r3, #0
}
 800e476:	4618      	mov	r0, r3
 800e478:	3710      	adds	r7, #16
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}

0800e47e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800e47e:	b580      	push	{r7, lr}
 800e480:	b084      	sub	sp, #16
 800e482:	af00      	add	r7, sp, #0
 800e484:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e48c:	69db      	ldr	r3, [r3, #28]
 800e48e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	3340      	adds	r3, #64	; 0x40
 800e494:	4619      	mov	r1, r3
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f000 f8b1 	bl	800e5fe <GetLineCoding>
 800e49c:	4603      	mov	r3, r0
 800e49e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800e4a0:	7afb      	ldrb	r3, [r7, #11]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d105      	bne.n	800e4b2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e4ac:	2102      	movs	r1, #2
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800e4b2:	7afb      	ldrb	r3, [r7, #11]
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3710      	adds	r7, #16
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}

0800e4bc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b084      	sub	sp, #16
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e4d2:	69db      	ldr	r3, [r3, #28]
 800e4d4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e4dc:	2b04      	cmp	r3, #4
 800e4de:	d877      	bhi.n	800e5d0 <USBH_CDC_Process+0x114>
 800e4e0:	a201      	add	r2, pc, #4	; (adr r2, 800e4e8 <USBH_CDC_Process+0x2c>)
 800e4e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4e6:	bf00      	nop
 800e4e8:	0800e4fd 	.word	0x0800e4fd
 800e4ec:	0800e503 	.word	0x0800e503
 800e4f0:	0800e533 	.word	0x0800e533
 800e4f4:	0800e5a7 	.word	0x0800e5a7
 800e4f8:	0800e5b5 	.word	0x0800e5b5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	73fb      	strb	r3, [r7, #15]
      break;
 800e500:	e06d      	b.n	800e5de <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e506:	4619      	mov	r1, r3
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f000 f897 	bl	800e63c <SetLineCoding>
 800e50e:	4603      	mov	r3, r0
 800e510:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e512:	7bbb      	ldrb	r3, [r7, #14]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d104      	bne.n	800e522 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	2202      	movs	r2, #2
 800e51c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e520:	e058      	b.n	800e5d4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800e522:	7bbb      	ldrb	r3, [r7, #14]
 800e524:	2b01      	cmp	r3, #1
 800e526:	d055      	beq.n	800e5d4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	2204      	movs	r2, #4
 800e52c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e530:	e050      	b.n	800e5d4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	3340      	adds	r3, #64	; 0x40
 800e536:	4619      	mov	r1, r3
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f000 f860 	bl	800e5fe <GetLineCoding>
 800e53e:	4603      	mov	r3, r0
 800e540:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e542:	7bbb      	ldrb	r3, [r7, #14]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d126      	bne.n	800e596 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	2200      	movs	r2, #0
 800e54c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e55a:	791b      	ldrb	r3, [r3, #4]
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d13b      	bne.n	800e5d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e56a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d133      	bne.n	800e5d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e57a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d12b      	bne.n	800e5d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e588:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d124      	bne.n	800e5d8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f000 f9be 	bl	800e910 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e594:	e020      	b.n	800e5d8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800e596:	7bbb      	ldrb	r3, [r7, #14]
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d01d      	beq.n	800e5d8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	2204      	movs	r2, #4
 800e5a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e5a4:	e018      	b.n	800e5d8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 f8e1 	bl	800e76e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f000 f954 	bl	800e85a <CDC_ProcessReception>
      break;
 800e5b2:	e014      	b.n	800e5de <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800e5b4:	2100      	movs	r1, #0
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f001 f849 	bl	800f64e <USBH_ClrFeature>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e5c0:	7bbb      	ldrb	r3, [r7, #14]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d10a      	bne.n	800e5dc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800e5ce:	e005      	b.n	800e5dc <USBH_CDC_Process+0x120>

    default:
      break;
 800e5d0:	bf00      	nop
 800e5d2:	e004      	b.n	800e5de <USBH_CDC_Process+0x122>
      break;
 800e5d4:	bf00      	nop
 800e5d6:	e002      	b.n	800e5de <USBH_CDC_Process+0x122>
      break;
 800e5d8:	bf00      	nop
 800e5da:	e000      	b.n	800e5de <USBH_CDC_Process+0x122>
      break;
 800e5dc:	bf00      	nop

  }

  return status;
 800e5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3710      	adds	r7, #16
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}

0800e5e8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b083      	sub	sp, #12
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800e5f0:	2300      	movs	r3, #0
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	370c      	adds	r7, #12
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr

0800e5fe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800e5fe:	b580      	push	{r7, lr}
 800e600:	b082      	sub	sp, #8
 800e602:	af00      	add	r7, sp, #0
 800e604:	6078      	str	r0, [r7, #4]
 800e606:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	22a1      	movs	r2, #161	; 0xa1
 800e60c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2221      	movs	r2, #33	; 0x21
 800e612:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2200      	movs	r2, #0
 800e618:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2200      	movs	r2, #0
 800e61e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2207      	movs	r2, #7
 800e624:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	2207      	movs	r2, #7
 800e62a:	4619      	mov	r1, r3
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f001 f9ee 	bl	800fa0e <USBH_CtlReq>
 800e632:	4603      	mov	r3, r0
}
 800e634:	4618      	mov	r0, r3
 800e636:	3708      	adds	r7, #8
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2221      	movs	r2, #33	; 0x21
 800e64a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2220      	movs	r2, #32
 800e650:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2200      	movs	r2, #0
 800e656:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2200      	movs	r2, #0
 800e65c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2207      	movs	r2, #7
 800e662:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	2207      	movs	r2, #7
 800e668:	4619      	mov	r1, r3
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f001 f9cf 	bl	800fa0e <USBH_CtlReq>
 800e670:	4603      	mov	r3, r0
}
 800e672:	4618      	mov	r0, r3
 800e674:	3708      	adds	r7, #8
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}

0800e67a <USBH_CDC_GetLastReceivedDataSize>:
  * @brief  This function return last received data size
  * @param  None
  * @retval None
  */
uint16_t USBH_CDC_GetLastReceivedDataSize(USBH_HandleTypeDef *phost)
{
 800e67a:	b580      	push	{r7, lr}
 800e67c:	b084      	sub	sp, #16
 800e67e:	af00      	add	r7, sp, #0
 800e680:	6078      	str	r0, [r7, #4]
  uint32_t dataSize;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e688:	69db      	ldr	r3, [r3, #28]
 800e68a:	60bb      	str	r3, [r7, #8]

  if (phost->gState == HOST_CLASS)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	b2db      	uxtb	r3, r3
 800e692:	2b0b      	cmp	r3, #11
 800e694:	d107      	bne.n	800e6a6 <USBH_CDC_GetLastReceivedDataSize+0x2c>
  {
    dataSize = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	7b1b      	ldrb	r3, [r3, #12]
 800e69a:	4619      	mov	r1, r3
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f001 ff41 	bl	8010524 <USBH_LL_GetLastXferSize>
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	e001      	b.n	800e6aa <USBH_CDC_GetLastReceivedDataSize+0x30>
  }
  else
  {
    dataSize =  0U;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	60fb      	str	r3, [r7, #12]
  }

  return (uint16_t)dataSize;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	b29b      	uxth	r3, r3
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3710      	adds	r7, #16
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}

0800e6b6 <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800e6b6:	b480      	push	{r7}
 800e6b8:	b087      	sub	sp, #28
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	60f8      	str	r0, [r7, #12]
 800e6be:	60b9      	str	r1, [r7, #8]
 800e6c0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e6cc:	69db      	ldr	r3, [r3, #28]
 800e6ce:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d004      	beq.n	800e6e4 <USBH_CDC_Transmit+0x2e>
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e6e0:	2b03      	cmp	r3, #3
 800e6e2:	d10f      	bne.n	800e704 <USBH_CDC_Transmit+0x4e>
  {
    CDC_Handle->pTxData = pbuff;
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	68ba      	ldr	r2, [r7, #8]
 800e6e8:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	687a      	ldr	r2, [r7, #4]
 800e6ee:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	2203      	movs	r2, #3
 800e6f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 800e700:	2300      	movs	r3, #0
 800e702:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 800e704:	7dfb      	ldrb	r3, [r7, #23]
}
 800e706:	4618      	mov	r0, r3
 800e708:	371c      	adds	r7, #28
 800e70a:	46bd      	mov	sp, r7
 800e70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e710:	4770      	bx	lr

0800e712 <USBH_CDC_Receive>:
* @brief  This function prepares the state before issuing the class specific commands
* @param  None
* @retval None
*/
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800e712:	b480      	push	{r7}
 800e714:	b087      	sub	sp, #28
 800e716:	af00      	add	r7, sp, #0
 800e718:	60f8      	str	r0, [r7, #12]
 800e71a:	60b9      	str	r1, [r7, #8]
 800e71c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e71e:	2301      	movs	r3, #1
 800e720:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e728:	69db      	ldr	r3, [r3, #28]
 800e72a:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e732:	2b00      	cmp	r3, #0
 800e734:	d004      	beq.n	800e740 <USBH_CDC_Receive+0x2e>
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e73c:	2b03      	cmp	r3, #3
 800e73e:	d10f      	bne.n	800e760 <USBH_CDC_Receive+0x4e>
  {
    CDC_Handle->pRxData = pbuff;
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	68ba      	ldr	r2, [r7, #8]
 800e744:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	687a      	ldr	r2, [r7, #4]
 800e74a:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	2203      	movs	r2, #3
 800e750:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	2203      	movs	r2, #3
 800e758:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 800e75c:	2300      	movs	r3, #0
 800e75e:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 800e760:	7dfb      	ldrb	r3, [r7, #23]
}
 800e762:	4618      	mov	r0, r3
 800e764:	371c      	adds	r7, #28
 800e766:	46bd      	mov	sp, r7
 800e768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76c:	4770      	bx	lr

0800e76e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800e76e:	b580      	push	{r7, lr}
 800e770:	b086      	sub	sp, #24
 800e772:	af02      	add	r7, sp, #8
 800e774:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e77c:	69db      	ldr	r3, [r3, #28]
 800e77e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e780:	2300      	movs	r3, #0
 800e782:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e78a:	2b01      	cmp	r3, #1
 800e78c:	d002      	beq.n	800e794 <CDC_ProcessTransmission+0x26>
 800e78e:	2b02      	cmp	r3, #2
 800e790:	d023      	beq.n	800e7da <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800e792:	e05e      	b.n	800e852 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e798:	68fa      	ldr	r2, [r7, #12]
 800e79a:	8b12      	ldrh	r2, [r2, #24]
 800e79c:	4293      	cmp	r3, r2
 800e79e:	d90b      	bls.n	800e7b8 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	69d9      	ldr	r1, [r3, #28]
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	8b1a      	ldrh	r2, [r3, #24]
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	7b5b      	ldrb	r3, [r3, #13]
 800e7ac:	2001      	movs	r0, #1
 800e7ae:	9000      	str	r0, [sp, #0]
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f001 fb3a 	bl	800fe2a <USBH_BulkSendData>
 800e7b6:	e00b      	b.n	800e7d0 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800e7c0:	b29a      	uxth	r2, r3
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	7b5b      	ldrb	r3, [r3, #13]
 800e7c6:	2001      	movs	r0, #1
 800e7c8:	9000      	str	r0, [sp, #0]
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f001 fb2d 	bl	800fe2a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	2202      	movs	r2, #2
 800e7d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e7d8:	e03b      	b.n	800e852 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	7b5b      	ldrb	r3, [r3, #13]
 800e7de:	4619      	mov	r1, r3
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f001 ff31 	bl	8010648 <USBH_LL_GetURBState>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800e7ea:	7afb      	ldrb	r3, [r7, #11]
 800e7ec:	2b01      	cmp	r3, #1
 800e7ee:	d128      	bne.n	800e842 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7f4:	68fa      	ldr	r2, [r7, #12]
 800e7f6:	8b12      	ldrh	r2, [r2, #24]
 800e7f8:	4293      	cmp	r3, r2
 800e7fa:	d90e      	bls.n	800e81a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e800:	68fa      	ldr	r2, [r7, #12]
 800e802:	8b12      	ldrh	r2, [r2, #24]
 800e804:	1a9a      	subs	r2, r3, r2
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	69db      	ldr	r3, [r3, #28]
 800e80e:	68fa      	ldr	r2, [r7, #12]
 800e810:	8b12      	ldrh	r2, [r2, #24]
 800e812:	441a      	add	r2, r3
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	61da      	str	r2, [r3, #28]
 800e818:	e002      	b.n	800e820 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2200      	movs	r2, #0
 800e81e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e824:	2b00      	cmp	r3, #0
 800e826:	d004      	beq.n	800e832 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	2201      	movs	r2, #1
 800e82c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e830:	e00e      	b.n	800e850 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	2200      	movs	r2, #0
 800e836:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f001 fbca 	bl	800ffd4 <USBH_CDC_TransmitCallback>
      break;
 800e840:	e006      	b.n	800e850 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800e842:	7afb      	ldrb	r3, [r7, #11]
 800e844:	2b02      	cmp	r3, #2
 800e846:	d103      	bne.n	800e850 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2201      	movs	r2, #1
 800e84c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e850:	bf00      	nop
  }
}
 800e852:	bf00      	nop
 800e854:	3710      	adds	r7, #16
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}

0800e85a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800e85a:	b580      	push	{r7, lr}
 800e85c:	b086      	sub	sp, #24
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e868:	69db      	ldr	r3, [r3, #28]
 800e86a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e86c:	2300      	movs	r3, #0
 800e86e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e876:	2b03      	cmp	r3, #3
 800e878:	d002      	beq.n	800e880 <CDC_ProcessReception+0x26>
 800e87a:	2b04      	cmp	r3, #4
 800e87c:	d00e      	beq.n	800e89c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800e87e:	e043      	b.n	800e908 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	6a19      	ldr	r1, [r3, #32]
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	8b5a      	ldrh	r2, [r3, #26]
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	7b1b      	ldrb	r3, [r3, #12]
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f001 faf1 	bl	800fe74 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	2204      	movs	r2, #4
 800e896:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e89a:	e035      	b.n	800e908 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	7b1b      	ldrb	r3, [r3, #12]
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f001 fed0 	bl	8010648 <USBH_LL_GetURBState>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800e8ac:	7cfb      	ldrb	r3, [r7, #19]
 800e8ae:	2b01      	cmp	r3, #1
 800e8b0:	d129      	bne.n	800e906 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	7b1b      	ldrb	r3, [r3, #12]
 800e8b6:	4619      	mov	r1, r3
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f001 fe33 	bl	8010524 <USBH_LL_GetLastXferSize>
 800e8be:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8c4:	68fa      	ldr	r2, [r7, #12]
 800e8c6:	429a      	cmp	r2, r3
 800e8c8:	d016      	beq.n	800e8f8 <CDC_ProcessReception+0x9e>
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	8b5b      	ldrh	r3, [r3, #26]
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d910      	bls.n	800e8f8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	1ad2      	subs	r2, r2, r3
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	6a1a      	ldr	r2, [r3, #32]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	441a      	add	r2, r3
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	2203      	movs	r2, #3
 800e8f2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e8f6:	e006      	b.n	800e906 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f001 fb71 	bl	800ffe8 <USBH_CDC_ReceiveCallback>
      break;
 800e906:	bf00      	nop
  }
}
 800e908:	bf00      	nop
 800e90a:	3718      	adds	r7, #24
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}

0800e910 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e910:	b480      	push	{r7}
 800e912:	b083      	sub	sp, #12
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e918:	bf00      	nop
 800e91a:	370c      	adds	r7, #12
 800e91c:	46bd      	mov	sp, r7
 800e91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e922:	4770      	bx	lr

0800e924 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b084      	sub	sp, #16
 800e928:	af00      	add	r7, sp, #0
 800e92a:	60f8      	str	r0, [r7, #12]
 800e92c:	60b9      	str	r1, [r7, #8]
 800e92e:	4613      	mov	r3, r2
 800e930:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d101      	bne.n	800e93c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e938:	2302      	movs	r3, #2
 800e93a:	e029      	b.n	800e990 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	79fa      	ldrb	r2, [r7, #7]
 800e940:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2200      	movs	r2, #0
 800e948:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	2200      	movs	r2, #0
 800e950:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800e954:	68f8      	ldr	r0, [r7, #12]
 800e956:	f000 f81f 	bl	800e998 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	2200      	movs	r2, #0
 800e95e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2200      	movs	r2, #0
 800e966:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	2200      	movs	r2, #0
 800e96e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2200      	movs	r2, #0
 800e976:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d003      	beq.n	800e988 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	68ba      	ldr	r2, [r7, #8]
 800e984:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e988:	68f8      	ldr	r0, [r7, #12]
 800e98a:	f001 fd17 	bl	80103bc <USBH_LL_Init>

  return USBH_OK;
 800e98e:	2300      	movs	r3, #0
}
 800e990:	4618      	mov	r0, r3
 800e992:	3710      	adds	r7, #16
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}

0800e998 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e998:	b480      	push	{r7}
 800e99a:	b085      	sub	sp, #20
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	60fb      	str	r3, [r7, #12]
 800e9a8:	e009      	b.n	800e9be <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e9aa:	687a      	ldr	r2, [r7, #4]
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	33e0      	adds	r3, #224	; 0xe0
 800e9b0:	009b      	lsls	r3, r3, #2
 800e9b2:	4413      	add	r3, r2
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	60fb      	str	r3, [r7, #12]
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2b0e      	cmp	r3, #14
 800e9c2:	d9f2      	bls.n	800e9aa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	60fb      	str	r3, [r7, #12]
 800e9c8:	e009      	b.n	800e9de <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e9ca:	687a      	ldr	r2, [r7, #4]
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	4413      	add	r3, r2
 800e9d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	3301      	adds	r3, #1
 800e9dc:	60fb      	str	r3, [r7, #12]
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9e4:	d3f1      	bcc.n	800e9ca <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2201      	movs	r2, #1
 800ea04:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2240      	movs	r2, #64	; 0x40
 800ea0a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2200      	movs	r2, #0
 800ea16:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2200      	movs	r2, #0
 800ea26:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800ea32:	2300      	movs	r3, #0
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3714      	adds	r7, #20
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3e:	4770      	bx	lr

0800ea40 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ea40:	b480      	push	{r7}
 800ea42:	b085      	sub	sp, #20
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d016      	beq.n	800ea82 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d10e      	bne.n	800ea7c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ea64:	1c59      	adds	r1, r3, #1
 800ea66:	687a      	ldr	r2, [r7, #4]
 800ea68:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800ea6c:	687a      	ldr	r2, [r7, #4]
 800ea6e:	33de      	adds	r3, #222	; 0xde
 800ea70:	6839      	ldr	r1, [r7, #0]
 800ea72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ea76:	2300      	movs	r3, #0
 800ea78:	73fb      	strb	r3, [r7, #15]
 800ea7a:	e004      	b.n	800ea86 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ea7c:	2302      	movs	r3, #2
 800ea7e:	73fb      	strb	r3, [r7, #15]
 800ea80:	e001      	b.n	800ea86 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ea82:	2302      	movs	r3, #2
 800ea84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ea86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3714      	adds	r7, #20
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr

0800ea94 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b085      	sub	sp, #20
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800eaaa:	78fa      	ldrb	r2, [r7, #3]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d204      	bcs.n	800eaba <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	78fa      	ldrb	r2, [r7, #3]
 800eab4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800eab8:	e001      	b.n	800eabe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800eaba:	2302      	movs	r3, #2
 800eabc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800eabe:	7bfb      	ldrb	r3, [r7, #15]
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3714      	adds	r7, #20
 800eac4:	46bd      	mov	sp, r7
 800eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaca:	4770      	bx	lr

0800eacc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800eacc:	b480      	push	{r7}
 800eace:	b087      	sub	sp, #28
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	4608      	mov	r0, r1
 800ead6:	4611      	mov	r1, r2
 800ead8:	461a      	mov	r2, r3
 800eada:	4603      	mov	r3, r0
 800eadc:	70fb      	strb	r3, [r7, #3]
 800eade:	460b      	mov	r3, r1
 800eae0:	70bb      	strb	r3, [r7, #2]
 800eae2:	4613      	mov	r3, r2
 800eae4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800eae6:	2300      	movs	r3, #0
 800eae8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800eaea:	2300      	movs	r3, #0
 800eaec:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800eaf4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800eaf6:	e025      	b.n	800eb44 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800eaf8:	7dfb      	ldrb	r3, [r7, #23]
 800eafa:	221a      	movs	r2, #26
 800eafc:	fb02 f303 	mul.w	r3, r2, r3
 800eb00:	3308      	adds	r3, #8
 800eb02:	68fa      	ldr	r2, [r7, #12]
 800eb04:	4413      	add	r3, r2
 800eb06:	3302      	adds	r3, #2
 800eb08:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	795b      	ldrb	r3, [r3, #5]
 800eb0e:	78fa      	ldrb	r2, [r7, #3]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d002      	beq.n	800eb1a <USBH_FindInterface+0x4e>
 800eb14:	78fb      	ldrb	r3, [r7, #3]
 800eb16:	2bff      	cmp	r3, #255	; 0xff
 800eb18:	d111      	bne.n	800eb3e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800eb1e:	78ba      	ldrb	r2, [r7, #2]
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d002      	beq.n	800eb2a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800eb24:	78bb      	ldrb	r3, [r7, #2]
 800eb26:	2bff      	cmp	r3, #255	; 0xff
 800eb28:	d109      	bne.n	800eb3e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800eb2e:	787a      	ldrb	r2, [r7, #1]
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d002      	beq.n	800eb3a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800eb34:	787b      	ldrb	r3, [r7, #1]
 800eb36:	2bff      	cmp	r3, #255	; 0xff
 800eb38:	d101      	bne.n	800eb3e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800eb3a:	7dfb      	ldrb	r3, [r7, #23]
 800eb3c:	e006      	b.n	800eb4c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800eb3e:	7dfb      	ldrb	r3, [r7, #23]
 800eb40:	3301      	adds	r3, #1
 800eb42:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800eb44:	7dfb      	ldrb	r3, [r7, #23]
 800eb46:	2b01      	cmp	r3, #1
 800eb48:	d9d6      	bls.n	800eaf8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800eb4a:	23ff      	movs	r3, #255	; 0xff
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	371c      	adds	r7, #28
 800eb50:	46bd      	mov	sp, r7
 800eb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb56:	4770      	bx	lr

0800eb58 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b082      	sub	sp, #8
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f001 fc67 	bl	8010434 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800eb66:	2101      	movs	r1, #1
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f001 fd80 	bl	801066e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800eb6e:	2300      	movs	r3, #0
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3708      	adds	r7, #8
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b088      	sub	sp, #32
 800eb7c:	af04      	add	r7, sp, #16
 800eb7e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800eb80:	2302      	movs	r3, #2
 800eb82:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800eb84:	2300      	movs	r3, #0
 800eb86:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800eb8e:	b2db      	uxtb	r3, r3
 800eb90:	2b01      	cmp	r3, #1
 800eb92:	d102      	bne.n	800eb9a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2203      	movs	r2, #3
 800eb98:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	781b      	ldrb	r3, [r3, #0]
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	2b0b      	cmp	r3, #11
 800eba2:	f200 81b3 	bhi.w	800ef0c <USBH_Process+0x394>
 800eba6:	a201      	add	r2, pc, #4	; (adr r2, 800ebac <USBH_Process+0x34>)
 800eba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebac:	0800ebdd 	.word	0x0800ebdd
 800ebb0:	0800ec0f 	.word	0x0800ec0f
 800ebb4:	0800ec77 	.word	0x0800ec77
 800ebb8:	0800eea7 	.word	0x0800eea7
 800ebbc:	0800ef0d 	.word	0x0800ef0d
 800ebc0:	0800ed1b 	.word	0x0800ed1b
 800ebc4:	0800ee4d 	.word	0x0800ee4d
 800ebc8:	0800ed51 	.word	0x0800ed51
 800ebcc:	0800ed71 	.word	0x0800ed71
 800ebd0:	0800ed91 	.word	0x0800ed91
 800ebd4:	0800edbf 	.word	0x0800edbf
 800ebd8:	0800ee8f 	.word	0x0800ee8f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ebe2:	b2db      	uxtb	r3, r3
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	f000 8193 	beq.w	800ef10 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2201      	movs	r2, #1
 800ebee:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ebf0:	20c8      	movs	r0, #200	; 0xc8
 800ebf2:	f001 fd83 	bl	80106fc <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f001 fc79 	bl	80104ee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2200      	movs	r2, #0
 800ec08:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ec0c:	e180      	b.n	800ef10 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ec14:	2b01      	cmp	r3, #1
 800ec16:	d107      	bne.n	800ec28 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2202      	movs	r2, #2
 800ec24:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ec26:	e182      	b.n	800ef2e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ec2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ec32:	d914      	bls.n	800ec5e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ec3a:	3301      	adds	r3, #1
 800ec3c:	b2da      	uxtb	r2, r3
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ec4a:	2b03      	cmp	r3, #3
 800ec4c:	d903      	bls.n	800ec56 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	220d      	movs	r2, #13
 800ec52:	701a      	strb	r2, [r3, #0]
      break;
 800ec54:	e16b      	b.n	800ef2e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	701a      	strb	r2, [r3, #0]
      break;
 800ec5c:	e167      	b.n	800ef2e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ec64:	f103 020a 	add.w	r2, r3, #10
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ec6e:	200a      	movs	r0, #10
 800ec70:	f001 fd44 	bl	80106fc <USBH_Delay>
      break;
 800ec74:	e15b      	b.n	800ef2e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d005      	beq.n	800ec8c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ec86:	2104      	movs	r1, #4
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ec8c:	2064      	movs	r0, #100	; 0x64
 800ec8e:	f001 fd35 	bl	80106fc <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f001 fc04 	bl	80104a0 <USBH_LL_GetSpeed>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2205      	movs	r2, #5
 800eca6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800eca8:	2100      	movs	r1, #0
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f001 f92f 	bl	800ff0e <USBH_AllocPipe>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	461a      	mov	r2, r3
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ecb8:	2180      	movs	r1, #128	; 0x80
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f001 f927 	bl	800ff0e <USBH_AllocPipe>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	7919      	ldrb	r1, [r3, #4]
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ecd8:	687a      	ldr	r2, [r7, #4]
 800ecda:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ecdc:	b292      	uxth	r2, r2
 800ecde:	9202      	str	r2, [sp, #8]
 800ece0:	2200      	movs	r2, #0
 800ece2:	9201      	str	r2, [sp, #4]
 800ece4:	9300      	str	r3, [sp, #0]
 800ece6:	4603      	mov	r3, r0
 800ece8:	2280      	movs	r2, #128	; 0x80
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f001 f8e0 	bl	800feb0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	7959      	ldrb	r1, [r3, #5]
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ed00:	687a      	ldr	r2, [r7, #4]
 800ed02:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ed04:	b292      	uxth	r2, r2
 800ed06:	9202      	str	r2, [sp, #8]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	9201      	str	r2, [sp, #4]
 800ed0c:	9300      	str	r3, [sp, #0]
 800ed0e:	4603      	mov	r3, r0
 800ed10:	2200      	movs	r2, #0
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f001 f8cc 	bl	800feb0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ed18:	e109      	b.n	800ef2e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f000 f90c 	bl	800ef38 <USBH_HandleEnum>
 800ed20:	4603      	mov	r3, r0
 800ed22:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ed24:	7bbb      	ldrb	r3, [r7, #14]
 800ed26:	b2db      	uxtb	r3, r3
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	f040 80f3 	bne.w	800ef14 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2200      	movs	r2, #0
 800ed32:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ed3c:	2b01      	cmp	r3, #1
 800ed3e:	d103      	bne.n	800ed48 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2208      	movs	r2, #8
 800ed44:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ed46:	e0e5      	b.n	800ef14 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2207      	movs	r2, #7
 800ed4c:	701a      	strb	r2, [r3, #0]
      break;
 800ed4e:	e0e1      	b.n	800ef14 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	f000 80de 	beq.w	800ef18 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ed62:	2101      	movs	r1, #1
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2208      	movs	r2, #8
 800ed6c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ed6e:	e0d3      	b.n	800ef18 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	4619      	mov	r1, r3
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f000 fc20 	bl	800f5c0 <USBH_SetCfg>
 800ed80:	4603      	mov	r3, r0
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	f040 80ca 	bne.w	800ef1c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2209      	movs	r2, #9
 800ed8c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ed8e:	e0c5      	b.n	800ef1c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ed96:	f003 0320 	and.w	r3, r3, #32
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d00b      	beq.n	800edb6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ed9e:	2101      	movs	r1, #1
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f000 fc30 	bl	800f606 <USBH_SetFeature>
 800eda6:	4603      	mov	r3, r0
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	f040 80b9 	bne.w	800ef20 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	220a      	movs	r2, #10
 800edb2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800edb4:	e0b4      	b.n	800ef20 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	220a      	movs	r2, #10
 800edba:	701a      	strb	r2, [r3, #0]
      break;
 800edbc:	e0b0      	b.n	800ef20 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	f000 80ad 	beq.w	800ef24 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2200      	movs	r2, #0
 800edce:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800edd2:	2300      	movs	r3, #0
 800edd4:	73fb      	strb	r3, [r7, #15]
 800edd6:	e016      	b.n	800ee06 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800edd8:	7bfa      	ldrb	r2, [r7, #15]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	32de      	adds	r2, #222	; 0xde
 800edde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ede2:	791a      	ldrb	r2, [r3, #4]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800edea:	429a      	cmp	r2, r3
 800edec:	d108      	bne.n	800ee00 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800edee:	7bfa      	ldrb	r2, [r7, #15]
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	32de      	adds	r2, #222	; 0xde
 800edf4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800edfe:	e005      	b.n	800ee0c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ee00:	7bfb      	ldrb	r3, [r7, #15]
 800ee02:	3301      	adds	r3, #1
 800ee04:	73fb      	strb	r3, [r7, #15]
 800ee06:	7bfb      	ldrb	r3, [r7, #15]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d0e5      	beq.n	800edd8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d016      	beq.n	800ee44 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ee1c:	689b      	ldr	r3, [r3, #8]
 800ee1e:	6878      	ldr	r0, [r7, #4]
 800ee20:	4798      	blx	r3
 800ee22:	4603      	mov	r3, r0
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d109      	bne.n	800ee3c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2206      	movs	r2, #6
 800ee2c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ee34:	2103      	movs	r1, #3
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ee3a:	e073      	b.n	800ef24 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	220d      	movs	r2, #13
 800ee40:	701a      	strb	r2, [r3, #0]
      break;
 800ee42:	e06f      	b.n	800ef24 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	220d      	movs	r2, #13
 800ee48:	701a      	strb	r2, [r3, #0]
      break;
 800ee4a:	e06b      	b.n	800ef24 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d017      	beq.n	800ee86 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ee5c:	691b      	ldr	r3, [r3, #16]
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	4798      	blx	r3
 800ee62:	4603      	mov	r3, r0
 800ee64:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ee66:	7bbb      	ldrb	r3, [r7, #14]
 800ee68:	b2db      	uxtb	r3, r3
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d103      	bne.n	800ee76 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	220b      	movs	r2, #11
 800ee72:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ee74:	e058      	b.n	800ef28 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800ee76:	7bbb      	ldrb	r3, [r7, #14]
 800ee78:	b2db      	uxtb	r3, r3
 800ee7a:	2b02      	cmp	r3, #2
 800ee7c:	d154      	bne.n	800ef28 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	220d      	movs	r2, #13
 800ee82:	701a      	strb	r2, [r3, #0]
      break;
 800ee84:	e050      	b.n	800ef28 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	220d      	movs	r2, #13
 800ee8a:	701a      	strb	r2, [r3, #0]
      break;
 800ee8c:	e04c      	b.n	800ef28 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d049      	beq.n	800ef2c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ee9e:	695b      	ldr	r3, [r3, #20]
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	4798      	blx	r3
      }
      break;
 800eea4:	e042      	b.n	800ef2c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2200      	movs	r2, #0
 800eeaa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f7ff fd72 	bl	800e998 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d009      	beq.n	800eed2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eec4:	68db      	ldr	r3, [r3, #12]
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2200      	movs	r2, #0
 800eece:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d005      	beq.n	800eee8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eee2:	2105      	movs	r1, #5
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800eeee:	b2db      	uxtb	r3, r3
 800eef0:	2b01      	cmp	r3, #1
 800eef2:	d107      	bne.n	800ef04 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2200      	movs	r2, #0
 800eef8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f7ff fe2b 	bl	800eb58 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ef02:	e014      	b.n	800ef2e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f001 fa95 	bl	8010434 <USBH_LL_Start>
      break;
 800ef0a:	e010      	b.n	800ef2e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800ef0c:	bf00      	nop
 800ef0e:	e00e      	b.n	800ef2e <USBH_Process+0x3b6>
      break;
 800ef10:	bf00      	nop
 800ef12:	e00c      	b.n	800ef2e <USBH_Process+0x3b6>
      break;
 800ef14:	bf00      	nop
 800ef16:	e00a      	b.n	800ef2e <USBH_Process+0x3b6>
    break;
 800ef18:	bf00      	nop
 800ef1a:	e008      	b.n	800ef2e <USBH_Process+0x3b6>
      break;
 800ef1c:	bf00      	nop
 800ef1e:	e006      	b.n	800ef2e <USBH_Process+0x3b6>
      break;
 800ef20:	bf00      	nop
 800ef22:	e004      	b.n	800ef2e <USBH_Process+0x3b6>
      break;
 800ef24:	bf00      	nop
 800ef26:	e002      	b.n	800ef2e <USBH_Process+0x3b6>
      break;
 800ef28:	bf00      	nop
 800ef2a:	e000      	b.n	800ef2e <USBH_Process+0x3b6>
      break;
 800ef2c:	bf00      	nop
  }
  return USBH_OK;
 800ef2e:	2300      	movs	r3, #0
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3710      	adds	r7, #16
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b088      	sub	sp, #32
 800ef3c:	af04      	add	r7, sp, #16
 800ef3e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ef40:	2301      	movs	r3, #1
 800ef42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ef44:	2301      	movs	r3, #1
 800ef46:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	785b      	ldrb	r3, [r3, #1]
 800ef4c:	2b07      	cmp	r3, #7
 800ef4e:	f200 81c1 	bhi.w	800f2d4 <USBH_HandleEnum+0x39c>
 800ef52:	a201      	add	r2, pc, #4	; (adr r2, 800ef58 <USBH_HandleEnum+0x20>)
 800ef54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef58:	0800ef79 	.word	0x0800ef79
 800ef5c:	0800f037 	.word	0x0800f037
 800ef60:	0800f0a1 	.word	0x0800f0a1
 800ef64:	0800f12f 	.word	0x0800f12f
 800ef68:	0800f199 	.word	0x0800f199
 800ef6c:	0800f209 	.word	0x0800f209
 800ef70:	0800f24f 	.word	0x0800f24f
 800ef74:	0800f295 	.word	0x0800f295
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ef78:	2108      	movs	r1, #8
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f000 fa50 	bl	800f420 <USBH_Get_DevDesc>
 800ef80:	4603      	mov	r3, r0
 800ef82:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ef84:	7bbb      	ldrb	r3, [r7, #14]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d130      	bne.n	800efec <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2201      	movs	r2, #1
 800ef98:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	7919      	ldrb	r1, [r3, #4]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800efaa:	687a      	ldr	r2, [r7, #4]
 800efac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800efae:	b292      	uxth	r2, r2
 800efb0:	9202      	str	r2, [sp, #8]
 800efb2:	2200      	movs	r2, #0
 800efb4:	9201      	str	r2, [sp, #4]
 800efb6:	9300      	str	r3, [sp, #0]
 800efb8:	4603      	mov	r3, r0
 800efba:	2280      	movs	r2, #128	; 0x80
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f000 ff77 	bl	800feb0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	7959      	ldrb	r1, [r3, #5]
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800efd6:	b292      	uxth	r2, r2
 800efd8:	9202      	str	r2, [sp, #8]
 800efda:	2200      	movs	r2, #0
 800efdc:	9201      	str	r2, [sp, #4]
 800efde:	9300      	str	r3, [sp, #0]
 800efe0:	4603      	mov	r3, r0
 800efe2:	2200      	movs	r2, #0
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f000 ff63 	bl	800feb0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800efea:	e175      	b.n	800f2d8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800efec:	7bbb      	ldrb	r3, [r7, #14]
 800efee:	2b03      	cmp	r3, #3
 800eff0:	f040 8172 	bne.w	800f2d8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800effa:	3301      	adds	r3, #1
 800effc:	b2da      	uxtb	r2, r3
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f00a:	2b03      	cmp	r3, #3
 800f00c:	d903      	bls.n	800f016 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	220d      	movs	r2, #13
 800f012:	701a      	strb	r2, [r3, #0]
      break;
 800f014:	e160      	b.n	800f2d8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	795b      	ldrb	r3, [r3, #5]
 800f01a:	4619      	mov	r1, r3
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f000 ff97 	bl	800ff50 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	791b      	ldrb	r3, [r3, #4]
 800f026:	4619      	mov	r1, r3
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f000 ff91 	bl	800ff50 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2200      	movs	r2, #0
 800f032:	701a      	strb	r2, [r3, #0]
      break;
 800f034:	e150      	b.n	800f2d8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800f036:	2112      	movs	r1, #18
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f000 f9f1 	bl	800f420 <USBH_Get_DevDesc>
 800f03e:	4603      	mov	r3, r0
 800f040:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f042:	7bbb      	ldrb	r3, [r7, #14]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d103      	bne.n	800f050 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2202      	movs	r2, #2
 800f04c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f04e:	e145      	b.n	800f2dc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f050:	7bbb      	ldrb	r3, [r7, #14]
 800f052:	2b03      	cmp	r3, #3
 800f054:	f040 8142 	bne.w	800f2dc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f05e:	3301      	adds	r3, #1
 800f060:	b2da      	uxtb	r2, r3
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f06e:	2b03      	cmp	r3, #3
 800f070:	d903      	bls.n	800f07a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	220d      	movs	r2, #13
 800f076:	701a      	strb	r2, [r3, #0]
      break;
 800f078:	e130      	b.n	800f2dc <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	795b      	ldrb	r3, [r3, #5]
 800f07e:	4619      	mov	r1, r3
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f000 ff65 	bl	800ff50 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	791b      	ldrb	r3, [r3, #4]
 800f08a:	4619      	mov	r1, r3
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f000 ff5f 	bl	800ff50 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2200      	movs	r2, #0
 800f096:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2200      	movs	r2, #0
 800f09c:	701a      	strb	r2, [r3, #0]
      break;
 800f09e:	e11d      	b.n	800f2dc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800f0a0:	2101      	movs	r1, #1
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	f000 fa68 	bl	800f578 <USBH_SetAddress>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f0ac:	7bbb      	ldrb	r3, [r7, #14]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d132      	bne.n	800f118 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800f0b2:	2002      	movs	r0, #2
 800f0b4:	f001 fb22 	bl	80106fc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2203      	movs	r2, #3
 800f0c4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	7919      	ldrb	r1, [r3, #4]
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f0d6:	687a      	ldr	r2, [r7, #4]
 800f0d8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f0da:	b292      	uxth	r2, r2
 800f0dc:	9202      	str	r2, [sp, #8]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	9201      	str	r2, [sp, #4]
 800f0e2:	9300      	str	r3, [sp, #0]
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	2280      	movs	r2, #128	; 0x80
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f000 fee1 	bl	800feb0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	7959      	ldrb	r1, [r3, #5]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f0fe:	687a      	ldr	r2, [r7, #4]
 800f100:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f102:	b292      	uxth	r2, r2
 800f104:	9202      	str	r2, [sp, #8]
 800f106:	2200      	movs	r2, #0
 800f108:	9201      	str	r2, [sp, #4]
 800f10a:	9300      	str	r3, [sp, #0]
 800f10c:	4603      	mov	r3, r0
 800f10e:	2200      	movs	r2, #0
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f000 fecd 	bl	800feb0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f116:	e0e3      	b.n	800f2e0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f118:	7bbb      	ldrb	r3, [r7, #14]
 800f11a:	2b03      	cmp	r3, #3
 800f11c:	f040 80e0 	bne.w	800f2e0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	220d      	movs	r2, #13
 800f124:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2200      	movs	r2, #0
 800f12a:	705a      	strb	r2, [r3, #1]
      break;
 800f12c:	e0d8      	b.n	800f2e0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f12e:	2109      	movs	r1, #9
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f000 f99d 	bl	800f470 <USBH_Get_CfgDesc>
 800f136:	4603      	mov	r3, r0
 800f138:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f13a:	7bbb      	ldrb	r3, [r7, #14]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d103      	bne.n	800f148 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2204      	movs	r2, #4
 800f144:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f146:	e0cd      	b.n	800f2e4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f148:	7bbb      	ldrb	r3, [r7, #14]
 800f14a:	2b03      	cmp	r3, #3
 800f14c:	f040 80ca 	bne.w	800f2e4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f156:	3301      	adds	r3, #1
 800f158:	b2da      	uxtb	r2, r3
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f166:	2b03      	cmp	r3, #3
 800f168:	d903      	bls.n	800f172 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	220d      	movs	r2, #13
 800f16e:	701a      	strb	r2, [r3, #0]
      break;
 800f170:	e0b8      	b.n	800f2e4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	795b      	ldrb	r3, [r3, #5]
 800f176:	4619      	mov	r1, r3
 800f178:	6878      	ldr	r0, [r7, #4]
 800f17a:	f000 fee9 	bl	800ff50 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	791b      	ldrb	r3, [r3, #4]
 800f182:	4619      	mov	r1, r3
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f000 fee3 	bl	800ff50 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2200      	movs	r2, #0
 800f18e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2200      	movs	r2, #0
 800f194:	701a      	strb	r2, [r3, #0]
      break;
 800f196:	e0a5      	b.n	800f2e4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800f19e:	4619      	mov	r1, r3
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f000 f965 	bl	800f470 <USBH_Get_CfgDesc>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f1aa:	7bbb      	ldrb	r3, [r7, #14]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d103      	bne.n	800f1b8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2205      	movs	r2, #5
 800f1b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f1b6:	e097      	b.n	800f2e8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f1b8:	7bbb      	ldrb	r3, [r7, #14]
 800f1ba:	2b03      	cmp	r3, #3
 800f1bc:	f040 8094 	bne.w	800f2e8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f1c6:	3301      	adds	r3, #1
 800f1c8:	b2da      	uxtb	r2, r3
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f1d6:	2b03      	cmp	r3, #3
 800f1d8:	d903      	bls.n	800f1e2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	220d      	movs	r2, #13
 800f1de:	701a      	strb	r2, [r3, #0]
      break;
 800f1e0:	e082      	b.n	800f2e8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	795b      	ldrb	r3, [r3, #5]
 800f1e6:	4619      	mov	r1, r3
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f000 feb1 	bl	800ff50 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	791b      	ldrb	r3, [r3, #4]
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f000 feab 	bl	800ff50 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2200      	movs	r2, #0
 800f204:	701a      	strb	r2, [r3, #0]
      break;
 800f206:	e06f      	b.n	800f2e8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d019      	beq.n	800f246 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f21e:	23ff      	movs	r3, #255	; 0xff
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f000 f949 	bl	800f4b8 <USBH_Get_StringDesc>
 800f226:	4603      	mov	r3, r0
 800f228:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f22a:	7bbb      	ldrb	r3, [r7, #14]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d103      	bne.n	800f238 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2206      	movs	r2, #6
 800f234:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f236:	e059      	b.n	800f2ec <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f238:	7bbb      	ldrb	r3, [r7, #14]
 800f23a:	2b03      	cmp	r3, #3
 800f23c:	d156      	bne.n	800f2ec <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2206      	movs	r2, #6
 800f242:	705a      	strb	r2, [r3, #1]
      break;
 800f244:	e052      	b.n	800f2ec <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2206      	movs	r2, #6
 800f24a:	705a      	strb	r2, [r3, #1]
      break;
 800f24c:	e04e      	b.n	800f2ec <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800f254:	2b00      	cmp	r3, #0
 800f256:	d019      	beq.n	800f28c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f264:	23ff      	movs	r3, #255	; 0xff
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f000 f926 	bl	800f4b8 <USBH_Get_StringDesc>
 800f26c:	4603      	mov	r3, r0
 800f26e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f270:	7bbb      	ldrb	r3, [r7, #14]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d103      	bne.n	800f27e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2207      	movs	r2, #7
 800f27a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f27c:	e038      	b.n	800f2f0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f27e:	7bbb      	ldrb	r3, [r7, #14]
 800f280:	2b03      	cmp	r3, #3
 800f282:	d135      	bne.n	800f2f0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2207      	movs	r2, #7
 800f288:	705a      	strb	r2, [r3, #1]
      break;
 800f28a:	e031      	b.n	800f2f0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2207      	movs	r2, #7
 800f290:	705a      	strb	r2, [r3, #1]
      break;
 800f292:	e02d      	b.n	800f2f0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d017      	beq.n	800f2ce <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f2aa:	23ff      	movs	r3, #255	; 0xff
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f000 f903 	bl	800f4b8 <USBH_Get_StringDesc>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f2b6:	7bbb      	ldrb	r3, [r7, #14]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d102      	bne.n	800f2c2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800f2c0:	e018      	b.n	800f2f4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f2c2:	7bbb      	ldrb	r3, [r7, #14]
 800f2c4:	2b03      	cmp	r3, #3
 800f2c6:	d115      	bne.n	800f2f4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	73fb      	strb	r3, [r7, #15]
      break;
 800f2cc:	e012      	b.n	800f2f4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	73fb      	strb	r3, [r7, #15]
      break;
 800f2d2:	e00f      	b.n	800f2f4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800f2d4:	bf00      	nop
 800f2d6:	e00e      	b.n	800f2f6 <USBH_HandleEnum+0x3be>
      break;
 800f2d8:	bf00      	nop
 800f2da:	e00c      	b.n	800f2f6 <USBH_HandleEnum+0x3be>
      break;
 800f2dc:	bf00      	nop
 800f2de:	e00a      	b.n	800f2f6 <USBH_HandleEnum+0x3be>
      break;
 800f2e0:	bf00      	nop
 800f2e2:	e008      	b.n	800f2f6 <USBH_HandleEnum+0x3be>
      break;
 800f2e4:	bf00      	nop
 800f2e6:	e006      	b.n	800f2f6 <USBH_HandleEnum+0x3be>
      break;
 800f2e8:	bf00      	nop
 800f2ea:	e004      	b.n	800f2f6 <USBH_HandleEnum+0x3be>
      break;
 800f2ec:	bf00      	nop
 800f2ee:	e002      	b.n	800f2f6 <USBH_HandleEnum+0x3be>
      break;
 800f2f0:	bf00      	nop
 800f2f2:	e000      	b.n	800f2f6 <USBH_HandleEnum+0x3be>
      break;
 800f2f4:	bf00      	nop
  }
  return Status;
 800f2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3710      	adds	r7, #16
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}

0800f300 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800f300:	b480      	push	{r7}
 800f302:	b083      	sub	sp, #12
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
 800f308:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	683a      	ldr	r2, [r7, #0]
 800f30e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800f312:	bf00      	nop
 800f314:	370c      	adds	r7, #12
 800f316:	46bd      	mov	sp, r7
 800f318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31c:	4770      	bx	lr

0800f31e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f31e:	b580      	push	{r7, lr}
 800f320:	b082      	sub	sp, #8
 800f322:	af00      	add	r7, sp, #0
 800f324:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f32c:	1c5a      	adds	r2, r3, #1
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f000 f804 	bl	800f342 <USBH_HandleSof>
}
 800f33a:	bf00      	nop
 800f33c:	3708      	adds	r7, #8
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}

0800f342 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f342:	b580      	push	{r7, lr}
 800f344:	b082      	sub	sp, #8
 800f346:	af00      	add	r7, sp, #0
 800f348:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	781b      	ldrb	r3, [r3, #0]
 800f34e:	b2db      	uxtb	r3, r3
 800f350:	2b0b      	cmp	r3, #11
 800f352:	d10a      	bne.n	800f36a <USBH_HandleSof+0x28>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d005      	beq.n	800f36a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f364:	699b      	ldr	r3, [r3, #24]
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	4798      	blx	r3
  }
}
 800f36a:	bf00      	nop
 800f36c:	3708      	adds	r7, #8
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}

0800f372 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f372:	b480      	push	{r7}
 800f374:	b083      	sub	sp, #12
 800f376:	af00      	add	r7, sp, #0
 800f378:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2201      	movs	r2, #1
 800f37e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800f382:	bf00      	nop
}
 800f384:	370c      	adds	r7, #12
 800f386:	46bd      	mov	sp, r7
 800f388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38c:	4770      	bx	lr

0800f38e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f38e:	b480      	push	{r7}
 800f390:	b083      	sub	sp, #12
 800f392:	af00      	add	r7, sp, #0
 800f394:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2200      	movs	r2, #0
 800f39a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800f39e:	bf00      	nop
}
 800f3a0:	370c      	adds	r7, #12
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a8:	4770      	bx	lr

0800f3aa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f3aa:	b480      	push	{r7}
 800f3ac:	b083      	sub	sp, #12
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2201      	movs	r2, #1
 800f3b6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f3ca:	2300      	movs	r3, #0
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	370c      	adds	r7, #12
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d6:	4770      	bx	lr

0800f3d8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b082      	sub	sp, #8
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2201      	movs	r2, #1
 800f3e4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f001 f836 	bl	801046a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	791b      	ldrb	r3, [r3, #4]
 800f402:	4619      	mov	r1, r3
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f000 fda3 	bl	800ff50 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	795b      	ldrb	r3, [r3, #5]
 800f40e:	4619      	mov	r1, r3
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f000 fd9d 	bl	800ff50 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f416:	2300      	movs	r3, #0
}
 800f418:	4618      	mov	r0, r3
 800f41a:	3708      	adds	r7, #8
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b086      	sub	sp, #24
 800f424:	af02      	add	r7, sp, #8
 800f426:	6078      	str	r0, [r7, #4]
 800f428:	460b      	mov	r3, r1
 800f42a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f432:	78fb      	ldrb	r3, [r7, #3]
 800f434:	b29b      	uxth	r3, r3
 800f436:	9300      	str	r3, [sp, #0]
 800f438:	4613      	mov	r3, r2
 800f43a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f43e:	2100      	movs	r1, #0
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f000 f864 	bl	800f50e <USBH_GetDescriptor>
 800f446:	4603      	mov	r3, r0
 800f448:	73fb      	strb	r3, [r7, #15]
 800f44a:	7bfb      	ldrb	r3, [r7, #15]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d10a      	bne.n	800f466 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f203 3026 	addw	r0, r3, #806	; 0x326
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f45c:	78fa      	ldrb	r2, [r7, #3]
 800f45e:	b292      	uxth	r2, r2
 800f460:	4619      	mov	r1, r3
 800f462:	f000 f918 	bl	800f696 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f466:	7bfb      	ldrb	r3, [r7, #15]
}
 800f468:	4618      	mov	r0, r3
 800f46a:	3710      	adds	r7, #16
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}

0800f470 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f470:	b580      	push	{r7, lr}
 800f472:	b086      	sub	sp, #24
 800f474:	af02      	add	r7, sp, #8
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	460b      	mov	r3, r1
 800f47a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	331c      	adds	r3, #28
 800f480:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f482:	887b      	ldrh	r3, [r7, #2]
 800f484:	9300      	str	r3, [sp, #0]
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f48c:	2100      	movs	r1, #0
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f000 f83d 	bl	800f50e <USBH_GetDescriptor>
 800f494:	4603      	mov	r3, r0
 800f496:	72fb      	strb	r3, [r7, #11]
 800f498:	7afb      	ldrb	r3, [r7, #11]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d107      	bne.n	800f4ae <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f4a4:	887a      	ldrh	r2, [r7, #2]
 800f4a6:	68f9      	ldr	r1, [r7, #12]
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f000 f964 	bl	800f776 <USBH_ParseCfgDesc>
  }

  return status;
 800f4ae:	7afb      	ldrb	r3, [r7, #11]
}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3710      	adds	r7, #16
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}

0800f4b8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b088      	sub	sp, #32
 800f4bc:	af02      	add	r7, sp, #8
 800f4be:	60f8      	str	r0, [r7, #12]
 800f4c0:	607a      	str	r2, [r7, #4]
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	460b      	mov	r3, r1
 800f4c6:	72fb      	strb	r3, [r7, #11]
 800f4c8:	4613      	mov	r3, r2
 800f4ca:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800f4cc:	7afb      	ldrb	r3, [r7, #11]
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f4d4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f4dc:	893b      	ldrh	r3, [r7, #8]
 800f4de:	9300      	str	r3, [sp, #0]
 800f4e0:	460b      	mov	r3, r1
 800f4e2:	2100      	movs	r1, #0
 800f4e4:	68f8      	ldr	r0, [r7, #12]
 800f4e6:	f000 f812 	bl	800f50e <USBH_GetDescriptor>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	75fb      	strb	r3, [r7, #23]
 800f4ee:	7dfb      	ldrb	r3, [r7, #23]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d107      	bne.n	800f504 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f4fa:	893a      	ldrh	r2, [r7, #8]
 800f4fc:	6879      	ldr	r1, [r7, #4]
 800f4fe:	4618      	mov	r0, r3
 800f500:	f000 fa37 	bl	800f972 <USBH_ParseStringDesc>
  }

  return status;
 800f504:	7dfb      	ldrb	r3, [r7, #23]
}
 800f506:	4618      	mov	r0, r3
 800f508:	3718      	adds	r7, #24
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}

0800f50e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f50e:	b580      	push	{r7, lr}
 800f510:	b084      	sub	sp, #16
 800f512:	af00      	add	r7, sp, #0
 800f514:	60f8      	str	r0, [r7, #12]
 800f516:	607b      	str	r3, [r7, #4]
 800f518:	460b      	mov	r3, r1
 800f51a:	72fb      	strb	r3, [r7, #11]
 800f51c:	4613      	mov	r3, r2
 800f51e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	789b      	ldrb	r3, [r3, #2]
 800f524:	2b01      	cmp	r3, #1
 800f526:	d11c      	bne.n	800f562 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f528:	7afb      	ldrb	r3, [r7, #11]
 800f52a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f52e:	b2da      	uxtb	r2, r3
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	2206      	movs	r2, #6
 800f538:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	893a      	ldrh	r2, [r7, #8]
 800f53e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f540:	893b      	ldrh	r3, [r7, #8]
 800f542:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f546:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f54a:	d104      	bne.n	800f556 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	f240 4209 	movw	r2, #1033	; 0x409
 800f552:	829a      	strh	r2, [r3, #20]
 800f554:	e002      	b.n	800f55c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	2200      	movs	r2, #0
 800f55a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	8b3a      	ldrh	r2, [r7, #24]
 800f560:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f562:	8b3b      	ldrh	r3, [r7, #24]
 800f564:	461a      	mov	r2, r3
 800f566:	6879      	ldr	r1, [r7, #4]
 800f568:	68f8      	ldr	r0, [r7, #12]
 800f56a:	f000 fa50 	bl	800fa0e <USBH_CtlReq>
 800f56e:	4603      	mov	r3, r0
}
 800f570:	4618      	mov	r0, r3
 800f572:	3710      	adds	r7, #16
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}

0800f578 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
 800f580:	460b      	mov	r3, r1
 800f582:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	789b      	ldrb	r3, [r3, #2]
 800f588:	2b01      	cmp	r3, #1
 800f58a:	d10f      	bne.n	800f5ac <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2200      	movs	r2, #0
 800f590:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2205      	movs	r2, #5
 800f596:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f598:	78fb      	ldrb	r3, [r7, #3]
 800f59a:	b29a      	uxth	r2, r3
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	2100      	movs	r1, #0
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f000 fa2c 	bl	800fa0e <USBH_CtlReq>
 800f5b6:	4603      	mov	r3, r0
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3708      	adds	r7, #8
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}

0800f5c0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b082      	sub	sp, #8
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	460b      	mov	r3, r1
 800f5ca:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	789b      	ldrb	r3, [r3, #2]
 800f5d0:	2b01      	cmp	r3, #1
 800f5d2:	d10e      	bne.n	800f5f2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2209      	movs	r2, #9
 800f5de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	887a      	ldrh	r2, [r7, #2]
 800f5e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	2100      	movs	r1, #0
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f000 fa09 	bl	800fa0e <USBH_CtlReq>
 800f5fc:	4603      	mov	r3, r0
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3708      	adds	r7, #8
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}

0800f606 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f606:	b580      	push	{r7, lr}
 800f608:	b082      	sub	sp, #8
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	6078      	str	r0, [r7, #4]
 800f60e:	460b      	mov	r3, r1
 800f610:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	789b      	ldrb	r3, [r3, #2]
 800f616:	2b01      	cmp	r3, #1
 800f618:	d10f      	bne.n	800f63a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2200      	movs	r2, #0
 800f61e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2203      	movs	r2, #3
 800f624:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f626:	78fb      	ldrb	r3, [r7, #3]
 800f628:	b29a      	uxth	r2, r3
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2200      	movs	r2, #0
 800f632:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2200      	movs	r2, #0
 800f638:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f63a:	2200      	movs	r2, #0
 800f63c:	2100      	movs	r1, #0
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f000 f9e5 	bl	800fa0e <USBH_CtlReq>
 800f644:	4603      	mov	r3, r0
}
 800f646:	4618      	mov	r0, r3
 800f648:	3708      	adds	r7, #8
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}

0800f64e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f64e:	b580      	push	{r7, lr}
 800f650:	b082      	sub	sp, #8
 800f652:	af00      	add	r7, sp, #0
 800f654:	6078      	str	r0, [r7, #4]
 800f656:	460b      	mov	r3, r1
 800f658:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	789b      	ldrb	r3, [r3, #2]
 800f65e:	2b01      	cmp	r3, #1
 800f660:	d10f      	bne.n	800f682 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2202      	movs	r2, #2
 800f666:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2201      	movs	r2, #1
 800f66c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2200      	movs	r2, #0
 800f672:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f674:	78fb      	ldrb	r3, [r7, #3]
 800f676:	b29a      	uxth	r2, r3
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2200      	movs	r2, #0
 800f680:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800f682:	2200      	movs	r2, #0
 800f684:	2100      	movs	r1, #0
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f000 f9c1 	bl	800fa0e <USBH_CtlReq>
 800f68c:	4603      	mov	r3, r0
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3708      	adds	r7, #8
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}

0800f696 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800f696:	b480      	push	{r7}
 800f698:	b085      	sub	sp, #20
 800f69a:	af00      	add	r7, sp, #0
 800f69c:	60f8      	str	r0, [r7, #12]
 800f69e:	60b9      	str	r1, [r7, #8]
 800f6a0:	4613      	mov	r3, r2
 800f6a2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	781a      	ldrb	r2, [r3, #0]
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	785a      	ldrb	r2, [r3, #1]
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	3302      	adds	r3, #2
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	b29a      	uxth	r2, r3
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	3303      	adds	r3, #3
 800f6c0:	781b      	ldrb	r3, [r3, #0]
 800f6c2:	b29b      	uxth	r3, r3
 800f6c4:	021b      	lsls	r3, r3, #8
 800f6c6:	b29b      	uxth	r3, r3
 800f6c8:	4313      	orrs	r3, r2
 800f6ca:	b29a      	uxth	r2, r3
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	791a      	ldrb	r2, [r3, #4]
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	795a      	ldrb	r2, [r3, #5]
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	799a      	ldrb	r2, [r3, #6]
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	79da      	ldrb	r2, [r3, #7]
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800f6f0:	88fb      	ldrh	r3, [r7, #6]
 800f6f2:	2b08      	cmp	r3, #8
 800f6f4:	d939      	bls.n	800f76a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	3308      	adds	r3, #8
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	b29a      	uxth	r2, r3
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	3309      	adds	r3, #9
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	b29b      	uxth	r3, r3
 800f706:	021b      	lsls	r3, r3, #8
 800f708:	b29b      	uxth	r3, r3
 800f70a:	4313      	orrs	r3, r2
 800f70c:	b29a      	uxth	r2, r3
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	330a      	adds	r3, #10
 800f716:	781b      	ldrb	r3, [r3, #0]
 800f718:	b29a      	uxth	r2, r3
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	330b      	adds	r3, #11
 800f71e:	781b      	ldrb	r3, [r3, #0]
 800f720:	b29b      	uxth	r3, r3
 800f722:	021b      	lsls	r3, r3, #8
 800f724:	b29b      	uxth	r3, r3
 800f726:	4313      	orrs	r3, r2
 800f728:	b29a      	uxth	r2, r3
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	330c      	adds	r3, #12
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	b29a      	uxth	r2, r3
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	330d      	adds	r3, #13
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	021b      	lsls	r3, r3, #8
 800f740:	b29b      	uxth	r3, r3
 800f742:	4313      	orrs	r3, r2
 800f744:	b29a      	uxth	r2, r3
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	7b9a      	ldrb	r2, [r3, #14]
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800f752:	68bb      	ldr	r3, [r7, #8]
 800f754:	7bda      	ldrb	r2, [r3, #15]
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	7c1a      	ldrb	r2, [r3, #16]
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800f762:	68bb      	ldr	r3, [r7, #8]
 800f764:	7c5a      	ldrb	r2, [r3, #17]
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	745a      	strb	r2, [r3, #17]
  }
}
 800f76a:	bf00      	nop
 800f76c:	3714      	adds	r7, #20
 800f76e:	46bd      	mov	sp, r7
 800f770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f774:	4770      	bx	lr

0800f776 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800f776:	b580      	push	{r7, lr}
 800f778:	b08a      	sub	sp, #40	; 0x28
 800f77a:	af00      	add	r7, sp, #0
 800f77c:	60f8      	str	r0, [r7, #12]
 800f77e:	60b9      	str	r1, [r7, #8]
 800f780:	4613      	mov	r3, r2
 800f782:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800f788:	2300      	movs	r3, #0
 800f78a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800f78e:	2300      	movs	r3, #0
 800f790:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	781a      	ldrb	r2, [r3, #0]
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	785a      	ldrb	r2, [r3, #1]
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	3302      	adds	r3, #2
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	b29a      	uxth	r2, r3
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	3303      	adds	r3, #3
 800f7b4:	781b      	ldrb	r3, [r3, #0]
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	021b      	lsls	r3, r3, #8
 800f7ba:	b29b      	uxth	r3, r3
 800f7bc:	4313      	orrs	r3, r2
 800f7be:	b29a      	uxth	r2, r3
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	791a      	ldrb	r2, [r3, #4]
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	795a      	ldrb	r2, [r3, #5]
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	799a      	ldrb	r2, [r3, #6]
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	79da      	ldrb	r2, [r3, #7]
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	7a1a      	ldrb	r2, [r3, #8]
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f7ec:	88fb      	ldrh	r3, [r7, #6]
 800f7ee:	2b09      	cmp	r3, #9
 800f7f0:	d95f      	bls.n	800f8b2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800f7f2:	2309      	movs	r3, #9
 800f7f4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f7fa:	e051      	b.n	800f8a0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f7fc:	f107 0316 	add.w	r3, r7, #22
 800f800:	4619      	mov	r1, r3
 800f802:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f804:	f000 f8e8 	bl	800f9d8 <USBH_GetNextDesc>
 800f808:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800f80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f80c:	785b      	ldrb	r3, [r3, #1]
 800f80e:	2b04      	cmp	r3, #4
 800f810:	d146      	bne.n	800f8a0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800f812:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f816:	221a      	movs	r2, #26
 800f818:	fb02 f303 	mul.w	r3, r2, r3
 800f81c:	3308      	adds	r3, #8
 800f81e:	68fa      	ldr	r2, [r7, #12]
 800f820:	4413      	add	r3, r2
 800f822:	3302      	adds	r3, #2
 800f824:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800f826:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f828:	69f8      	ldr	r0, [r7, #28]
 800f82a:	f000 f846 	bl	800f8ba <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800f82e:	2300      	movs	r3, #0
 800f830:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800f834:	2300      	movs	r3, #0
 800f836:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f838:	e022      	b.n	800f880 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f83a:	f107 0316 	add.w	r3, r7, #22
 800f83e:	4619      	mov	r1, r3
 800f840:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f842:	f000 f8c9 	bl	800f9d8 <USBH_GetNextDesc>
 800f846:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800f848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f84a:	785b      	ldrb	r3, [r3, #1]
 800f84c:	2b05      	cmp	r3, #5
 800f84e:	d117      	bne.n	800f880 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f850:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f854:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f858:	3201      	adds	r2, #1
 800f85a:	00d2      	lsls	r2, r2, #3
 800f85c:	211a      	movs	r1, #26
 800f85e:	fb01 f303 	mul.w	r3, r1, r3
 800f862:	4413      	add	r3, r2
 800f864:	3308      	adds	r3, #8
 800f866:	68fa      	ldr	r2, [r7, #12]
 800f868:	4413      	add	r3, r2
 800f86a:	3304      	adds	r3, #4
 800f86c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800f86e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f870:	69b8      	ldr	r0, [r7, #24]
 800f872:	f000 f851 	bl	800f918 <USBH_ParseEPDesc>
            ep_ix++;
 800f876:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f87a:	3301      	adds	r3, #1
 800f87c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f880:	69fb      	ldr	r3, [r7, #28]
 800f882:	791b      	ldrb	r3, [r3, #4]
 800f884:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f888:	429a      	cmp	r2, r3
 800f88a:	d204      	bcs.n	800f896 <USBH_ParseCfgDesc+0x120>
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	885a      	ldrh	r2, [r3, #2]
 800f890:	8afb      	ldrh	r3, [r7, #22]
 800f892:	429a      	cmp	r2, r3
 800f894:	d8d1      	bhi.n	800f83a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800f896:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f89a:	3301      	adds	r3, #1
 800f89c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f8a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f8a4:	2b01      	cmp	r3, #1
 800f8a6:	d804      	bhi.n	800f8b2 <USBH_ParseCfgDesc+0x13c>
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	885a      	ldrh	r2, [r3, #2]
 800f8ac:	8afb      	ldrh	r3, [r7, #22]
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d8a4      	bhi.n	800f7fc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800f8b2:	bf00      	nop
 800f8b4:	3728      	adds	r7, #40	; 0x28
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}

0800f8ba <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800f8ba:	b480      	push	{r7}
 800f8bc:	b083      	sub	sp, #12
 800f8be:	af00      	add	r7, sp, #0
 800f8c0:	6078      	str	r0, [r7, #4]
 800f8c2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	781a      	ldrb	r2, [r3, #0]
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	785a      	ldrb	r2, [r3, #1]
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	789a      	ldrb	r2, [r3, #2]
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	78da      	ldrb	r2, [r3, #3]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	791a      	ldrb	r2, [r3, #4]
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	795a      	ldrb	r2, [r3, #5]
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	799a      	ldrb	r2, [r3, #6]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	79da      	ldrb	r2, [r3, #7]
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	7a1a      	ldrb	r2, [r3, #8]
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	721a      	strb	r2, [r3, #8]
}
 800f90c:	bf00      	nop
 800f90e:	370c      	adds	r7, #12
 800f910:	46bd      	mov	sp, r7
 800f912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f916:	4770      	bx	lr

0800f918 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800f918:	b480      	push	{r7}
 800f91a:	b083      	sub	sp, #12
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
 800f920:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	781a      	ldrb	r2, [r3, #0]
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	785a      	ldrb	r2, [r3, #1]
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	789a      	ldrb	r2, [r3, #2]
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	78da      	ldrb	r2, [r3, #3]
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	3304      	adds	r3, #4
 800f946:	781b      	ldrb	r3, [r3, #0]
 800f948:	b29a      	uxth	r2, r3
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	3305      	adds	r3, #5
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	b29b      	uxth	r3, r3
 800f952:	021b      	lsls	r3, r3, #8
 800f954:	b29b      	uxth	r3, r3
 800f956:	4313      	orrs	r3, r2
 800f958:	b29a      	uxth	r2, r3
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	799a      	ldrb	r2, [r3, #6]
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	719a      	strb	r2, [r3, #6]
}
 800f966:	bf00      	nop
 800f968:	370c      	adds	r7, #12
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr

0800f972 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f972:	b480      	push	{r7}
 800f974:	b087      	sub	sp, #28
 800f976:	af00      	add	r7, sp, #0
 800f978:	60f8      	str	r0, [r7, #12]
 800f97a:	60b9      	str	r1, [r7, #8]
 800f97c:	4613      	mov	r3, r2
 800f97e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	3301      	adds	r3, #1
 800f984:	781b      	ldrb	r3, [r3, #0]
 800f986:	2b03      	cmp	r3, #3
 800f988:	d120      	bne.n	800f9cc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	781b      	ldrb	r3, [r3, #0]
 800f98e:	1e9a      	subs	r2, r3, #2
 800f990:	88fb      	ldrh	r3, [r7, #6]
 800f992:	4293      	cmp	r3, r2
 800f994:	bf28      	it	cs
 800f996:	4613      	movcs	r3, r2
 800f998:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	3302      	adds	r3, #2
 800f99e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	82fb      	strh	r3, [r7, #22]
 800f9a4:	e00b      	b.n	800f9be <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f9a6:	8afb      	ldrh	r3, [r7, #22]
 800f9a8:	68fa      	ldr	r2, [r7, #12]
 800f9aa:	4413      	add	r3, r2
 800f9ac:	781a      	ldrb	r2, [r3, #0]
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	3301      	adds	r3, #1
 800f9b6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f9b8:	8afb      	ldrh	r3, [r7, #22]
 800f9ba:	3302      	adds	r3, #2
 800f9bc:	82fb      	strh	r3, [r7, #22]
 800f9be:	8afa      	ldrh	r2, [r7, #22]
 800f9c0:	8abb      	ldrh	r3, [r7, #20]
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	d3ef      	bcc.n	800f9a6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	701a      	strb	r2, [r3, #0]
  }
}
 800f9cc:	bf00      	nop
 800f9ce:	371c      	adds	r7, #28
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d6:	4770      	bx	lr

0800f9d8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800f9d8:	b480      	push	{r7}
 800f9da:	b085      	sub	sp, #20
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
 800f9e0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	881a      	ldrh	r2, [r3, #0]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	b29b      	uxth	r3, r3
 800f9ec:	4413      	add	r3, r2
 800f9ee:	b29a      	uxth	r2, r3
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	4413      	add	r3, r2
 800f9fe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fa00:	68fb      	ldr	r3, [r7, #12]
}
 800fa02:	4618      	mov	r0, r3
 800fa04:	3714      	adds	r7, #20
 800fa06:	46bd      	mov	sp, r7
 800fa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0c:	4770      	bx	lr

0800fa0e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800fa0e:	b580      	push	{r7, lr}
 800fa10:	b086      	sub	sp, #24
 800fa12:	af00      	add	r7, sp, #0
 800fa14:	60f8      	str	r0, [r7, #12]
 800fa16:	60b9      	str	r1, [r7, #8]
 800fa18:	4613      	mov	r3, r2
 800fa1a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	789b      	ldrb	r3, [r3, #2]
 800fa24:	2b01      	cmp	r3, #1
 800fa26:	d002      	beq.n	800fa2e <USBH_CtlReq+0x20>
 800fa28:	2b02      	cmp	r3, #2
 800fa2a:	d00f      	beq.n	800fa4c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800fa2c:	e027      	b.n	800fa7e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	68ba      	ldr	r2, [r7, #8]
 800fa32:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	88fa      	ldrh	r2, [r7, #6]
 800fa38:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	2201      	movs	r2, #1
 800fa3e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	2202      	movs	r2, #2
 800fa44:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800fa46:	2301      	movs	r3, #1
 800fa48:	75fb      	strb	r3, [r7, #23]
      break;
 800fa4a:	e018      	b.n	800fa7e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800fa4c:	68f8      	ldr	r0, [r7, #12]
 800fa4e:	f000 f81b 	bl	800fa88 <USBH_HandleControl>
 800fa52:	4603      	mov	r3, r0
 800fa54:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800fa56:	7dfb      	ldrb	r3, [r7, #23]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d002      	beq.n	800fa62 <USBH_CtlReq+0x54>
 800fa5c:	7dfb      	ldrb	r3, [r7, #23]
 800fa5e:	2b03      	cmp	r3, #3
 800fa60:	d106      	bne.n	800fa70 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	2201      	movs	r2, #1
 800fa66:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	761a      	strb	r2, [r3, #24]
      break;
 800fa6e:	e005      	b.n	800fa7c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800fa70:	7dfb      	ldrb	r3, [r7, #23]
 800fa72:	2b02      	cmp	r3, #2
 800fa74:	d102      	bne.n	800fa7c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	2201      	movs	r2, #1
 800fa7a:	709a      	strb	r2, [r3, #2]
      break;
 800fa7c:	bf00      	nop
  }
  return status;
 800fa7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa80:	4618      	mov	r0, r3
 800fa82:	3718      	adds	r7, #24
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}

0800fa88 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b086      	sub	sp, #24
 800fa8c:	af02      	add	r7, sp, #8
 800fa8e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800fa90:	2301      	movs	r3, #1
 800fa92:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fa94:	2300      	movs	r3, #0
 800fa96:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	7e1b      	ldrb	r3, [r3, #24]
 800fa9c:	3b01      	subs	r3, #1
 800fa9e:	2b0a      	cmp	r3, #10
 800faa0:	f200 8156 	bhi.w	800fd50 <USBH_HandleControl+0x2c8>
 800faa4:	a201      	add	r2, pc, #4	; (adr r2, 800faac <USBH_HandleControl+0x24>)
 800faa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faaa:	bf00      	nop
 800faac:	0800fad9 	.word	0x0800fad9
 800fab0:	0800faf3 	.word	0x0800faf3
 800fab4:	0800fb5d 	.word	0x0800fb5d
 800fab8:	0800fb83 	.word	0x0800fb83
 800fabc:	0800fbbb 	.word	0x0800fbbb
 800fac0:	0800fbe5 	.word	0x0800fbe5
 800fac4:	0800fc37 	.word	0x0800fc37
 800fac8:	0800fc59 	.word	0x0800fc59
 800facc:	0800fc95 	.word	0x0800fc95
 800fad0:	0800fcbb 	.word	0x0800fcbb
 800fad4:	0800fcf9 	.word	0x0800fcf9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f103 0110 	add.w	r1, r3, #16
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	795b      	ldrb	r3, [r3, #5]
 800fae2:	461a      	mov	r2, r3
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f000 f943 	bl	800fd70 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2202      	movs	r2, #2
 800faee:	761a      	strb	r2, [r3, #24]
      break;
 800faf0:	e139      	b.n	800fd66 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	795b      	ldrb	r3, [r3, #5]
 800faf6:	4619      	mov	r1, r3
 800faf8:	6878      	ldr	r0, [r7, #4]
 800fafa:	f000 fda5 	bl	8010648 <USBH_LL_GetURBState>
 800fafe:	4603      	mov	r3, r0
 800fb00:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800fb02:	7bbb      	ldrb	r3, [r7, #14]
 800fb04:	2b01      	cmp	r3, #1
 800fb06:	d11e      	bne.n	800fb46 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	7c1b      	ldrb	r3, [r3, #16]
 800fb0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fb10:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	8adb      	ldrh	r3, [r3, #22]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d00a      	beq.n	800fb30 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800fb1a:	7b7b      	ldrb	r3, [r7, #13]
 800fb1c:	2b80      	cmp	r3, #128	; 0x80
 800fb1e:	d103      	bne.n	800fb28 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2203      	movs	r2, #3
 800fb24:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fb26:	e115      	b.n	800fd54 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2205      	movs	r2, #5
 800fb2c:	761a      	strb	r2, [r3, #24]
      break;
 800fb2e:	e111      	b.n	800fd54 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800fb30:	7b7b      	ldrb	r3, [r7, #13]
 800fb32:	2b80      	cmp	r3, #128	; 0x80
 800fb34:	d103      	bne.n	800fb3e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2209      	movs	r2, #9
 800fb3a:	761a      	strb	r2, [r3, #24]
      break;
 800fb3c:	e10a      	b.n	800fd54 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2207      	movs	r2, #7
 800fb42:	761a      	strb	r2, [r3, #24]
      break;
 800fb44:	e106      	b.n	800fd54 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800fb46:	7bbb      	ldrb	r3, [r7, #14]
 800fb48:	2b04      	cmp	r3, #4
 800fb4a:	d003      	beq.n	800fb54 <USBH_HandleControl+0xcc>
 800fb4c:	7bbb      	ldrb	r3, [r7, #14]
 800fb4e:	2b02      	cmp	r3, #2
 800fb50:	f040 8100 	bne.w	800fd54 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	220b      	movs	r2, #11
 800fb58:	761a      	strb	r2, [r3, #24]
      break;
 800fb5a:	e0fb      	b.n	800fd54 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fb62:	b29a      	uxth	r2, r3
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6899      	ldr	r1, [r3, #8]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	899a      	ldrh	r2, [r3, #12]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	791b      	ldrb	r3, [r3, #4]
 800fb74:	6878      	ldr	r0, [r7, #4]
 800fb76:	f000 f93a 	bl	800fdee <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	2204      	movs	r2, #4
 800fb7e:	761a      	strb	r2, [r3, #24]
      break;
 800fb80:	e0f1      	b.n	800fd66 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	791b      	ldrb	r3, [r3, #4]
 800fb86:	4619      	mov	r1, r3
 800fb88:	6878      	ldr	r0, [r7, #4]
 800fb8a:	f000 fd5d 	bl	8010648 <USBH_LL_GetURBState>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800fb92:	7bbb      	ldrb	r3, [r7, #14]
 800fb94:	2b01      	cmp	r3, #1
 800fb96:	d102      	bne.n	800fb9e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2209      	movs	r2, #9
 800fb9c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800fb9e:	7bbb      	ldrb	r3, [r7, #14]
 800fba0:	2b05      	cmp	r3, #5
 800fba2:	d102      	bne.n	800fbaa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800fba4:	2303      	movs	r3, #3
 800fba6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fba8:	e0d6      	b.n	800fd58 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800fbaa:	7bbb      	ldrb	r3, [r7, #14]
 800fbac:	2b04      	cmp	r3, #4
 800fbae:	f040 80d3 	bne.w	800fd58 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	220b      	movs	r2, #11
 800fbb6:	761a      	strb	r2, [r3, #24]
      break;
 800fbb8:	e0ce      	b.n	800fd58 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6899      	ldr	r1, [r3, #8]
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	899a      	ldrh	r2, [r3, #12]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	795b      	ldrb	r3, [r3, #5]
 800fbc6:	2001      	movs	r0, #1
 800fbc8:	9000      	str	r0, [sp, #0]
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f000 f8ea 	bl	800fda4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fbd6:	b29a      	uxth	r2, r3
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2206      	movs	r2, #6
 800fbe0:	761a      	strb	r2, [r3, #24]
      break;
 800fbe2:	e0c0      	b.n	800fd66 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	795b      	ldrb	r3, [r3, #5]
 800fbe8:	4619      	mov	r1, r3
 800fbea:	6878      	ldr	r0, [r7, #4]
 800fbec:	f000 fd2c 	bl	8010648 <USBH_LL_GetURBState>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800fbf4:	7bbb      	ldrb	r3, [r7, #14]
 800fbf6:	2b01      	cmp	r3, #1
 800fbf8:	d103      	bne.n	800fc02 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2207      	movs	r2, #7
 800fbfe:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fc00:	e0ac      	b.n	800fd5c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800fc02:	7bbb      	ldrb	r3, [r7, #14]
 800fc04:	2b05      	cmp	r3, #5
 800fc06:	d105      	bne.n	800fc14 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	220c      	movs	r2, #12
 800fc0c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800fc0e:	2303      	movs	r3, #3
 800fc10:	73fb      	strb	r3, [r7, #15]
      break;
 800fc12:	e0a3      	b.n	800fd5c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fc14:	7bbb      	ldrb	r3, [r7, #14]
 800fc16:	2b02      	cmp	r3, #2
 800fc18:	d103      	bne.n	800fc22 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2205      	movs	r2, #5
 800fc1e:	761a      	strb	r2, [r3, #24]
      break;
 800fc20:	e09c      	b.n	800fd5c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800fc22:	7bbb      	ldrb	r3, [r7, #14]
 800fc24:	2b04      	cmp	r3, #4
 800fc26:	f040 8099 	bne.w	800fd5c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	220b      	movs	r2, #11
 800fc2e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800fc30:	2302      	movs	r3, #2
 800fc32:	73fb      	strb	r3, [r7, #15]
      break;
 800fc34:	e092      	b.n	800fd5c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	791b      	ldrb	r3, [r3, #4]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	2100      	movs	r1, #0
 800fc3e:	6878      	ldr	r0, [r7, #4]
 800fc40:	f000 f8d5 	bl	800fdee <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fc4a:	b29a      	uxth	r2, r3
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2208      	movs	r2, #8
 800fc54:	761a      	strb	r2, [r3, #24]

      break;
 800fc56:	e086      	b.n	800fd66 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	791b      	ldrb	r3, [r3, #4]
 800fc5c:	4619      	mov	r1, r3
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f000 fcf2 	bl	8010648 <USBH_LL_GetURBState>
 800fc64:	4603      	mov	r3, r0
 800fc66:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800fc68:	7bbb      	ldrb	r3, [r7, #14]
 800fc6a:	2b01      	cmp	r3, #1
 800fc6c:	d105      	bne.n	800fc7a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	220d      	movs	r2, #13
 800fc72:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800fc74:	2300      	movs	r3, #0
 800fc76:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fc78:	e072      	b.n	800fd60 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800fc7a:	7bbb      	ldrb	r3, [r7, #14]
 800fc7c:	2b04      	cmp	r3, #4
 800fc7e:	d103      	bne.n	800fc88 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	220b      	movs	r2, #11
 800fc84:	761a      	strb	r2, [r3, #24]
      break;
 800fc86:	e06b      	b.n	800fd60 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800fc88:	7bbb      	ldrb	r3, [r7, #14]
 800fc8a:	2b05      	cmp	r3, #5
 800fc8c:	d168      	bne.n	800fd60 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800fc8e:	2303      	movs	r3, #3
 800fc90:	73fb      	strb	r3, [r7, #15]
      break;
 800fc92:	e065      	b.n	800fd60 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	795b      	ldrb	r3, [r3, #5]
 800fc98:	2201      	movs	r2, #1
 800fc9a:	9200      	str	r2, [sp, #0]
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	2100      	movs	r1, #0
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f000 f87f 	bl	800fda4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fcac:	b29a      	uxth	r2, r3
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	220a      	movs	r2, #10
 800fcb6:	761a      	strb	r2, [r3, #24]
      break;
 800fcb8:	e055      	b.n	800fd66 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	795b      	ldrb	r3, [r3, #5]
 800fcbe:	4619      	mov	r1, r3
 800fcc0:	6878      	ldr	r0, [r7, #4]
 800fcc2:	f000 fcc1 	bl	8010648 <USBH_LL_GetURBState>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800fcca:	7bbb      	ldrb	r3, [r7, #14]
 800fccc:	2b01      	cmp	r3, #1
 800fcce:	d105      	bne.n	800fcdc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	220d      	movs	r2, #13
 800fcd8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fcda:	e043      	b.n	800fd64 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fcdc:	7bbb      	ldrb	r3, [r7, #14]
 800fcde:	2b02      	cmp	r3, #2
 800fce0:	d103      	bne.n	800fcea <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	2209      	movs	r2, #9
 800fce6:	761a      	strb	r2, [r3, #24]
      break;
 800fce8:	e03c      	b.n	800fd64 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800fcea:	7bbb      	ldrb	r3, [r7, #14]
 800fcec:	2b04      	cmp	r3, #4
 800fcee:	d139      	bne.n	800fd64 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	220b      	movs	r2, #11
 800fcf4:	761a      	strb	r2, [r3, #24]
      break;
 800fcf6:	e035      	b.n	800fd64 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	7e5b      	ldrb	r3, [r3, #25]
 800fcfc:	3301      	adds	r3, #1
 800fcfe:	b2da      	uxtb	r2, r3
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	765a      	strb	r2, [r3, #25]
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	7e5b      	ldrb	r3, [r3, #25]
 800fd08:	2b02      	cmp	r3, #2
 800fd0a:	d806      	bhi.n	800fd1a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2201      	movs	r2, #1
 800fd10:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2201      	movs	r2, #1
 800fd16:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800fd18:	e025      	b.n	800fd66 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fd20:	2106      	movs	r1, #6
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	2200      	movs	r2, #0
 800fd2a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	795b      	ldrb	r3, [r3, #5]
 800fd30:	4619      	mov	r1, r3
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	f000 f90c 	bl	800ff50 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	791b      	ldrb	r3, [r3, #4]
 800fd3c:	4619      	mov	r1, r3
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f000 f906 	bl	800ff50 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2200      	movs	r2, #0
 800fd48:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800fd4a:	2302      	movs	r3, #2
 800fd4c:	73fb      	strb	r3, [r7, #15]
      break;
 800fd4e:	e00a      	b.n	800fd66 <USBH_HandleControl+0x2de>

    default:
      break;
 800fd50:	bf00      	nop
 800fd52:	e008      	b.n	800fd66 <USBH_HandleControl+0x2de>
      break;
 800fd54:	bf00      	nop
 800fd56:	e006      	b.n	800fd66 <USBH_HandleControl+0x2de>
      break;
 800fd58:	bf00      	nop
 800fd5a:	e004      	b.n	800fd66 <USBH_HandleControl+0x2de>
      break;
 800fd5c:	bf00      	nop
 800fd5e:	e002      	b.n	800fd66 <USBH_HandleControl+0x2de>
      break;
 800fd60:	bf00      	nop
 800fd62:	e000      	b.n	800fd66 <USBH_HandleControl+0x2de>
      break;
 800fd64:	bf00      	nop
  }

  return status;
 800fd66:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3710      	adds	r7, #16
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b088      	sub	sp, #32
 800fd74:	af04      	add	r7, sp, #16
 800fd76:	60f8      	str	r0, [r7, #12]
 800fd78:	60b9      	str	r1, [r7, #8]
 800fd7a:	4613      	mov	r3, r2
 800fd7c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fd7e:	79f9      	ldrb	r1, [r7, #7]
 800fd80:	2300      	movs	r3, #0
 800fd82:	9303      	str	r3, [sp, #12]
 800fd84:	2308      	movs	r3, #8
 800fd86:	9302      	str	r3, [sp, #8]
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	9301      	str	r3, [sp, #4]
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	9300      	str	r3, [sp, #0]
 800fd90:	2300      	movs	r3, #0
 800fd92:	2200      	movs	r2, #0
 800fd94:	68f8      	ldr	r0, [r7, #12]
 800fd96:	f000 fc26 	bl	80105e6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800fd9a:	2300      	movs	r3, #0
}
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	3710      	adds	r7, #16
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}

0800fda4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b088      	sub	sp, #32
 800fda8:	af04      	add	r7, sp, #16
 800fdaa:	60f8      	str	r0, [r7, #12]
 800fdac:	60b9      	str	r1, [r7, #8]
 800fdae:	4611      	mov	r1, r2
 800fdb0:	461a      	mov	r2, r3
 800fdb2:	460b      	mov	r3, r1
 800fdb4:	80fb      	strh	r3, [r7, #6]
 800fdb6:	4613      	mov	r3, r2
 800fdb8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d001      	beq.n	800fdc8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fdc8:	7979      	ldrb	r1, [r7, #5]
 800fdca:	7e3b      	ldrb	r3, [r7, #24]
 800fdcc:	9303      	str	r3, [sp, #12]
 800fdce:	88fb      	ldrh	r3, [r7, #6]
 800fdd0:	9302      	str	r3, [sp, #8]
 800fdd2:	68bb      	ldr	r3, [r7, #8]
 800fdd4:	9301      	str	r3, [sp, #4]
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	9300      	str	r3, [sp, #0]
 800fdda:	2300      	movs	r3, #0
 800fddc:	2200      	movs	r2, #0
 800fdde:	68f8      	ldr	r0, [r7, #12]
 800fde0:	f000 fc01 	bl	80105e6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800fde4:	2300      	movs	r3, #0
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	3710      	adds	r7, #16
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}

0800fdee <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800fdee:	b580      	push	{r7, lr}
 800fdf0:	b088      	sub	sp, #32
 800fdf2:	af04      	add	r7, sp, #16
 800fdf4:	60f8      	str	r0, [r7, #12]
 800fdf6:	60b9      	str	r1, [r7, #8]
 800fdf8:	4611      	mov	r1, r2
 800fdfa:	461a      	mov	r2, r3
 800fdfc:	460b      	mov	r3, r1
 800fdfe:	80fb      	strh	r3, [r7, #6]
 800fe00:	4613      	mov	r3, r2
 800fe02:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fe04:	7979      	ldrb	r1, [r7, #5]
 800fe06:	2300      	movs	r3, #0
 800fe08:	9303      	str	r3, [sp, #12]
 800fe0a:	88fb      	ldrh	r3, [r7, #6]
 800fe0c:	9302      	str	r3, [sp, #8]
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	9301      	str	r3, [sp, #4]
 800fe12:	2301      	movs	r3, #1
 800fe14:	9300      	str	r3, [sp, #0]
 800fe16:	2300      	movs	r3, #0
 800fe18:	2201      	movs	r2, #1
 800fe1a:	68f8      	ldr	r0, [r7, #12]
 800fe1c:	f000 fbe3 	bl	80105e6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800fe20:	2300      	movs	r3, #0

}
 800fe22:	4618      	mov	r0, r3
 800fe24:	3710      	adds	r7, #16
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}

0800fe2a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800fe2a:	b580      	push	{r7, lr}
 800fe2c:	b088      	sub	sp, #32
 800fe2e:	af04      	add	r7, sp, #16
 800fe30:	60f8      	str	r0, [r7, #12]
 800fe32:	60b9      	str	r1, [r7, #8]
 800fe34:	4611      	mov	r1, r2
 800fe36:	461a      	mov	r2, r3
 800fe38:	460b      	mov	r3, r1
 800fe3a:	80fb      	strh	r3, [r7, #6]
 800fe3c:	4613      	mov	r3, r2
 800fe3e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d001      	beq.n	800fe4e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fe4e:	7979      	ldrb	r1, [r7, #5]
 800fe50:	7e3b      	ldrb	r3, [r7, #24]
 800fe52:	9303      	str	r3, [sp, #12]
 800fe54:	88fb      	ldrh	r3, [r7, #6]
 800fe56:	9302      	str	r3, [sp, #8]
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	9301      	str	r3, [sp, #4]
 800fe5c:	2301      	movs	r3, #1
 800fe5e:	9300      	str	r3, [sp, #0]
 800fe60:	2302      	movs	r3, #2
 800fe62:	2200      	movs	r2, #0
 800fe64:	68f8      	ldr	r0, [r7, #12]
 800fe66:	f000 fbbe 	bl	80105e6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800fe6a:	2300      	movs	r3, #0
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3710      	adds	r7, #16
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b088      	sub	sp, #32
 800fe78:	af04      	add	r7, sp, #16
 800fe7a:	60f8      	str	r0, [r7, #12]
 800fe7c:	60b9      	str	r1, [r7, #8]
 800fe7e:	4611      	mov	r1, r2
 800fe80:	461a      	mov	r2, r3
 800fe82:	460b      	mov	r3, r1
 800fe84:	80fb      	strh	r3, [r7, #6]
 800fe86:	4613      	mov	r3, r2
 800fe88:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fe8a:	7979      	ldrb	r1, [r7, #5]
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	9303      	str	r3, [sp, #12]
 800fe90:	88fb      	ldrh	r3, [r7, #6]
 800fe92:	9302      	str	r3, [sp, #8]
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	9301      	str	r3, [sp, #4]
 800fe98:	2301      	movs	r3, #1
 800fe9a:	9300      	str	r3, [sp, #0]
 800fe9c:	2302      	movs	r3, #2
 800fe9e:	2201      	movs	r2, #1
 800fea0:	68f8      	ldr	r0, [r7, #12]
 800fea2:	f000 fba0 	bl	80105e6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800fea6:	2300      	movs	r3, #0
}
 800fea8:	4618      	mov	r0, r3
 800feaa:	3710      	adds	r7, #16
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}

0800feb0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b086      	sub	sp, #24
 800feb4:	af04      	add	r7, sp, #16
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	4608      	mov	r0, r1
 800feba:	4611      	mov	r1, r2
 800febc:	461a      	mov	r2, r3
 800febe:	4603      	mov	r3, r0
 800fec0:	70fb      	strb	r3, [r7, #3]
 800fec2:	460b      	mov	r3, r1
 800fec4:	70bb      	strb	r3, [r7, #2]
 800fec6:	4613      	mov	r3, r2
 800fec8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800feca:	7878      	ldrb	r0, [r7, #1]
 800fecc:	78ba      	ldrb	r2, [r7, #2]
 800fece:	78f9      	ldrb	r1, [r7, #3]
 800fed0:	8b3b      	ldrh	r3, [r7, #24]
 800fed2:	9302      	str	r3, [sp, #8]
 800fed4:	7d3b      	ldrb	r3, [r7, #20]
 800fed6:	9301      	str	r3, [sp, #4]
 800fed8:	7c3b      	ldrb	r3, [r7, #16]
 800feda:	9300      	str	r3, [sp, #0]
 800fedc:	4603      	mov	r3, r0
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f000 fb33 	bl	801054a <USBH_LL_OpenPipe>

  return USBH_OK;
 800fee4:	2300      	movs	r3, #0
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	3708      	adds	r7, #8
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}

0800feee <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800feee:	b580      	push	{r7, lr}
 800fef0:	b082      	sub	sp, #8
 800fef2:	af00      	add	r7, sp, #0
 800fef4:	6078      	str	r0, [r7, #4]
 800fef6:	460b      	mov	r3, r1
 800fef8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800fefa:	78fb      	ldrb	r3, [r7, #3]
 800fefc:	4619      	mov	r1, r3
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f000 fb52 	bl	80105a8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ff04:	2300      	movs	r3, #0
}
 800ff06:	4618      	mov	r0, r3
 800ff08:	3708      	adds	r7, #8
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}

0800ff0e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ff0e:	b580      	push	{r7, lr}
 800ff10:	b084      	sub	sp, #16
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	6078      	str	r0, [r7, #4]
 800ff16:	460b      	mov	r3, r1
 800ff18:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f000 f836 	bl	800ff8c <USBH_GetFreePipe>
 800ff20:	4603      	mov	r3, r0
 800ff22:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ff24:	89fb      	ldrh	r3, [r7, #14]
 800ff26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff2a:	4293      	cmp	r3, r2
 800ff2c:	d00a      	beq.n	800ff44 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800ff2e:	78fa      	ldrb	r2, [r7, #3]
 800ff30:	89fb      	ldrh	r3, [r7, #14]
 800ff32:	f003 030f 	and.w	r3, r3, #15
 800ff36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ff3a:	6879      	ldr	r1, [r7, #4]
 800ff3c:	33e0      	adds	r3, #224	; 0xe0
 800ff3e:	009b      	lsls	r3, r3, #2
 800ff40:	440b      	add	r3, r1
 800ff42:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ff44:	89fb      	ldrh	r3, [r7, #14]
 800ff46:	b2db      	uxtb	r3, r3
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3710      	adds	r7, #16
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ff50:	b480      	push	{r7}
 800ff52:	b083      	sub	sp, #12
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	460b      	mov	r3, r1
 800ff5a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800ff5c:	78fb      	ldrb	r3, [r7, #3]
 800ff5e:	2b0a      	cmp	r3, #10
 800ff60:	d80d      	bhi.n	800ff7e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ff62:	78fb      	ldrb	r3, [r7, #3]
 800ff64:	687a      	ldr	r2, [r7, #4]
 800ff66:	33e0      	adds	r3, #224	; 0xe0
 800ff68:	009b      	lsls	r3, r3, #2
 800ff6a:	4413      	add	r3, r2
 800ff6c:	685a      	ldr	r2, [r3, #4]
 800ff6e:	78fb      	ldrb	r3, [r7, #3]
 800ff70:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ff74:	6879      	ldr	r1, [r7, #4]
 800ff76:	33e0      	adds	r3, #224	; 0xe0
 800ff78:	009b      	lsls	r3, r3, #2
 800ff7a:	440b      	add	r3, r1
 800ff7c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ff7e:	2300      	movs	r3, #0
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	370c      	adds	r7, #12
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr

0800ff8c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	b085      	sub	sp, #20
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ff94:	2300      	movs	r3, #0
 800ff96:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800ff98:	2300      	movs	r3, #0
 800ff9a:	73fb      	strb	r3, [r7, #15]
 800ff9c:	e00f      	b.n	800ffbe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ff9e:	7bfb      	ldrb	r3, [r7, #15]
 800ffa0:	687a      	ldr	r2, [r7, #4]
 800ffa2:	33e0      	adds	r3, #224	; 0xe0
 800ffa4:	009b      	lsls	r3, r3, #2
 800ffa6:	4413      	add	r3, r2
 800ffa8:	685b      	ldr	r3, [r3, #4]
 800ffaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d102      	bne.n	800ffb8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ffb2:	7bfb      	ldrb	r3, [r7, #15]
 800ffb4:	b29b      	uxth	r3, r3
 800ffb6:	e007      	b.n	800ffc8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800ffb8:	7bfb      	ldrb	r3, [r7, #15]
 800ffba:	3301      	adds	r3, #1
 800ffbc:	73fb      	strb	r3, [r7, #15]
 800ffbe:	7bfb      	ldrb	r3, [r7, #15]
 800ffc0:	2b0a      	cmp	r3, #10
 800ffc2:	d9ec      	bls.n	800ff9e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ffc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3714      	adds	r7, #20
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd2:	4770      	bx	lr

0800ffd4 <USBH_CDC_TransmitCallback>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ffd4:	b480      	push	{r7}
 800ffd6:	b083      	sub	sp, #12
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
  	if(phost == &hUsbHostFS)
  	{

  	}
}
 800ffdc:	bf00      	nop
 800ffde:	370c      	adds	r7, #12
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe6:	4770      	bx	lr

0800ffe8 <USBH_CDC_ReceiveCallback>:

void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b082      	sub	sp, #8
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
  	if(phost == &hUsbHostFS)
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	4a14      	ldr	r2, [pc, #80]	; (8010044 <USBH_CDC_ReceiveCallback+0x5c>)
 800fff4:	4293      	cmp	r3, r2
 800fff6:	d120      	bne.n	801003a <USBH_CDC_ReceiveCallback+0x52>
  	{
  		// Handles the data recived from the USB CDC host, here just printing it out to UART
  		rx_size = USBH_CDC_GetLastReceivedDataSize(phost);
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f7fe fb3e 	bl	800e67a <USBH_CDC_GetLastReceivedDataSize>
 800fffe:	4603      	mov	r3, r0
 8010000:	461a      	mov	r2, r3
 8010002:	4b11      	ldr	r3, [pc, #68]	; (8010048 <USBH_CDC_ReceiveCallback+0x60>)
 8010004:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, CDC_RX_Buffer, rx_size, HAL_MAX_DELAY);
 8010006:	4b10      	ldr	r3, [pc, #64]	; (8010048 <USBH_CDC_ReceiveCallback+0x60>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	b29a      	uxth	r2, r3
 801000c:	f04f 33ff 	mov.w	r3, #4294967295
 8010010:	490e      	ldr	r1, [pc, #56]	; (801004c <USBH_CDC_ReceiveCallback+0x64>)
 8010012:	480f      	ldr	r0, [pc, #60]	; (8010050 <USBH_CDC_ReceiveCallback+0x68>)
 8010014:	f7fb f938 	bl	800b288 <HAL_UART_Transmit>

		// Copy buffer to external dongle_response buffer
		strcpy((char *)dongle_response, (char *)CDC_RX_Buffer);
 8010018:	490c      	ldr	r1, [pc, #48]	; (801004c <USBH_CDC_ReceiveCallback+0x64>)
 801001a:	480e      	ldr	r0, [pc, #56]	; (8010054 <USBH_CDC_ReceiveCallback+0x6c>)
 801001c:	f000 fcde 	bl	80109dc <strcpy>

		memset(CDC_RX_Buffer,0,RX_BUFF_SIZE);
 8010020:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010024:	2100      	movs	r1, #0
 8010026:	4809      	ldr	r0, [pc, #36]	; (801004c <USBH_CDC_ReceiveCallback+0x64>)
 8010028:	f000 fbf6 	bl	8010818 <memset>
		USBH_CDC_Receive(phost, CDC_RX_Buffer, RX_BUFF_SIZE);
 801002c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010030:	4906      	ldr	r1, [pc, #24]	; (801004c <USBH_CDC_ReceiveCallback+0x64>)
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f7fe fb6d 	bl	800e712 <USBH_CDC_Receive>
  	}

  	return;
 8010038:	bf00      	nop
 801003a:	bf00      	nop
}
 801003c:	3708      	adds	r7, #8
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}
 8010042:	bf00      	nop
 8010044:	240007d4 	.word	0x240007d4
 8010048:	24000280 	.word	0x24000280
 801004c:	24000bac 	.word	0x24000bac
 8010050:	24000420 	.word	0x24000420
 8010054:	2400030c 	.word	0x2400030c

08010058 <writeToDongle>:
/**
  * @brief Simple function that takes a string and transmit it to the dongle
  * @retval None
  */
void writeToDongle(uint8_t * cmd)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b082      	sub	sp, #8
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
	USBH_CDC_Transmit(&hUsbHostFS, cmd, strlen((char *)cmd));
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f7f0 f93d 	bl	80002e0 <strlen>
 8010066:	4603      	mov	r3, r0
 8010068:	461a      	mov	r2, r3
 801006a:	6879      	ldr	r1, [r7, #4]
 801006c:	4803      	ldr	r0, [pc, #12]	; (801007c <writeToDongle+0x24>)
 801006e:	f7fe fb22 	bl	800e6b6 <USBH_CDC_Transmit>
}
 8010072:	bf00      	nop
 8010074:	3708      	adds	r7, #8
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}
 801007a:	bf00      	nop
 801007c:	240007d4 	.word	0x240007d4

08010080 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010084:	2201      	movs	r2, #1
 8010086:	490e      	ldr	r1, [pc, #56]	; (80100c0 <MX_USB_HOST_Init+0x40>)
 8010088:	480e      	ldr	r0, [pc, #56]	; (80100c4 <MX_USB_HOST_Init+0x44>)
 801008a:	f7fe fc4b 	bl	800e924 <USBH_Init>
 801008e:	4603      	mov	r3, r0
 8010090:	2b00      	cmp	r3, #0
 8010092:	d001      	beq.n	8010098 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010094:	f7f1 faea 	bl	800166c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8010098:	490b      	ldr	r1, [pc, #44]	; (80100c8 <MX_USB_HOST_Init+0x48>)
 801009a:	480a      	ldr	r0, [pc, #40]	; (80100c4 <MX_USB_HOST_Init+0x44>)
 801009c:	f7fe fcd0 	bl	800ea40 <USBH_RegisterClass>
 80100a0:	4603      	mov	r3, r0
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d001      	beq.n	80100aa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80100a6:	f7f1 fae1 	bl	800166c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80100aa:	4806      	ldr	r0, [pc, #24]	; (80100c4 <MX_USB_HOST_Init+0x44>)
 80100ac:	f7fe fd54 	bl	800eb58 <USBH_Start>
 80100b0:	4603      	mov	r3, r0
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d001      	beq.n	80100ba <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80100b6:	f7f1 fad9 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80100ba:	bf00      	nop
 80100bc:	bd80      	pop	{r7, pc}
 80100be:	bf00      	nop
 80100c0:	080100e1 	.word	0x080100e1
 80100c4:	240007d4 	.word	0x240007d4
 80100c8:	24000010 	.word	0x24000010

080100cc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80100d0:	4802      	ldr	r0, [pc, #8]	; (80100dc <MX_USB_HOST_Process+0x10>)
 80100d2:	f7fe fd51 	bl	800eb78 <USBH_Process>
}
 80100d6:	bf00      	nop
 80100d8:	bd80      	pop	{r7, pc}
 80100da:	bf00      	nop
 80100dc:	240007d4 	.word	0x240007d4

080100e0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b082      	sub	sp, #8
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
 80100e8:	460b      	mov	r3, r1
 80100ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80100ec:	78fb      	ldrb	r3, [r7, #3]
 80100ee:	3b01      	subs	r3, #1
 80100f0:	2b04      	cmp	r3, #4
 80100f2:	d866      	bhi.n	80101c2 <USBH_UserProcess+0xe2>
 80100f4:	a201      	add	r2, pc, #4	; (adr r2, 80100fc <USBH_UserProcess+0x1c>)
 80100f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100fa:	bf00      	nop
 80100fc:	080101c3 	.word	0x080101c3
 8010100:	0801013f 	.word	0x0801013f
 8010104:	080101c3 	.word	0x080101c3
 8010108:	08010195 	.word	0x08010195
 801010c:	08010111 	.word	0x08010111
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010110:	4b2f      	ldr	r3, [pc, #188]	; (80101d0 <USBH_UserProcess+0xf0>)
 8010112:	2203      	movs	r2, #3
 8010114:	701a      	strb	r2, [r3, #0]
  isBleuIOReady = false;
 8010116:	4b2f      	ldr	r3, [pc, #188]	; (80101d4 <USBH_UserProcess+0xf4>)
 8010118:	2200      	movs	r2, #0
 801011a:	701a      	strb	r2, [r3, #0]

  // Turn on Red LED, turn off Green and Yellow LED
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 801011c:	2200      	movs	r2, #0
 801011e:	2101      	movs	r1, #1
 8010120:	482d      	ldr	r0, [pc, #180]	; (80101d8 <USBH_UserProcess+0xf8>)
 8010122:	f7f5 fbbd 	bl	80058a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8010126:	2200      	movs	r2, #0
 8010128:	2102      	movs	r1, #2
 801012a:	482c      	ldr	r0, [pc, #176]	; (80101dc <USBH_UserProcess+0xfc>)
 801012c:	f7f5 fbb8 	bl	80058a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8010130:	2201      	movs	r2, #1
 8010132:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010136:	4828      	ldr	r0, [pc, #160]	; (80101d8 <USBH_UserProcess+0xf8>)
 8010138:	f7f5 fbb2 	bl	80058a0 <HAL_GPIO_WritePin>
  break;
 801013c:	e044      	b.n	80101c8 <USBH_UserProcess+0xe8>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801013e:	4b24      	ldr	r3, [pc, #144]	; (80101d0 <USBH_UserProcess+0xf0>)
 8010140:	2202      	movs	r2, #2
 8010142:	701a      	strb	r2, [r3, #0]
  // Check if BleuIO firmware is running
  // (idProduct:0x6001 = bootloader, idProduct:0x6002 = bleuio fw)
  if(phost->device.DevDesc.idProduct == 0x6002)
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 801014a:	f246 0202 	movw	r2, #24578	; 0x6002
 801014e:	4293      	cmp	r3, r2
 8010150:	d139      	bne.n	80101c6 <USBH_UserProcess+0xe6>
  {
	  isBleuIOReady = true;
 8010152:	4b20      	ldr	r3, [pc, #128]	; (80101d4 <USBH_UserProcess+0xf4>)
 8010154:	2201      	movs	r2, #1
 8010156:	701a      	strb	r2, [r3, #0]
	  // Sends message to uart that BleuIO is connected and ready
	  HAL_UART_Transmit(&huart3, (uint8_t*)BLEUIO_READY, strlen(BLEUIO_READY), HAL_MAX_DELAY);
 8010158:	f04f 33ff 	mov.w	r3, #4294967295
 801015c:	2219      	movs	r2, #25
 801015e:	4920      	ldr	r1, [pc, #128]	; (80101e0 <USBH_UserProcess+0x100>)
 8010160:	4820      	ldr	r0, [pc, #128]	; (80101e4 <USBH_UserProcess+0x104>)
 8010162:	f7fb f891 	bl	800b288 <HAL_UART_Transmit>

	  // Turn on Green LED, turn off Yellow and Red LED
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8010166:	2201      	movs	r2, #1
 8010168:	2101      	movs	r1, #1
 801016a:	481b      	ldr	r0, [pc, #108]	; (80101d8 <USBH_UserProcess+0xf8>)
 801016c:	f7f5 fb98 	bl	80058a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8010170:	2200      	movs	r2, #0
 8010172:	2102      	movs	r1, #2
 8010174:	4819      	ldr	r0, [pc, #100]	; (80101dc <USBH_UserProcess+0xfc>)
 8010176:	f7f5 fb93 	bl	80058a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 801017a:	2200      	movs	r2, #0
 801017c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010180:	4815      	ldr	r0, [pc, #84]	; (80101d8 <USBH_UserProcess+0xf8>)
 8010182:	f7f5 fb8d 	bl	80058a0 <HAL_GPIO_WritePin>

	  // Start receiving from usb
	  USBH_CDC_Receive(&hUsbHostFS, CDC_RX_Buffer, RX_BUFF_SIZE);
 8010186:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801018a:	4917      	ldr	r1, [pc, #92]	; (80101e8 <USBH_UserProcess+0x108>)
 801018c:	4817      	ldr	r0, [pc, #92]	; (80101ec <USBH_UserProcess+0x10c>)
 801018e:	f7fe fac0 	bl	800e712 <USBH_CDC_Receive>
  }
  break;
 8010192:	e018      	b.n	80101c6 <USBH_UserProcess+0xe6>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010194:	4b0e      	ldr	r3, [pc, #56]	; (80101d0 <USBH_UserProcess+0xf0>)
 8010196:	2201      	movs	r2, #1
 8010198:	701a      	strb	r2, [r3, #0]
  isBleuIOReady = false;
 801019a:	4b0e      	ldr	r3, [pc, #56]	; (80101d4 <USBH_UserProcess+0xf4>)
 801019c:	2200      	movs	r2, #0
 801019e:	701a      	strb	r2, [r3, #0]
  // Turn on Yellow LED, turn off Green and Red LED
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80101a0:	2200      	movs	r2, #0
 80101a2:	2101      	movs	r1, #1
 80101a4:	480c      	ldr	r0, [pc, #48]	; (80101d8 <USBH_UserProcess+0xf8>)
 80101a6:	f7f5 fb7b 	bl	80058a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 80101aa:	2201      	movs	r2, #1
 80101ac:	2102      	movs	r1, #2
 80101ae:	480b      	ldr	r0, [pc, #44]	; (80101dc <USBH_UserProcess+0xfc>)
 80101b0:	f7f5 fb76 	bl	80058a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80101b4:	2200      	movs	r2, #0
 80101b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80101ba:	4807      	ldr	r0, [pc, #28]	; (80101d8 <USBH_UserProcess+0xf8>)
 80101bc:	f7f5 fb70 	bl	80058a0 <HAL_GPIO_WritePin>
  break;
 80101c0:	e002      	b.n	80101c8 <USBH_UserProcess+0xe8>

  default:
  break;
 80101c2:	bf00      	nop
 80101c4:	e000      	b.n	80101c8 <USBH_UserProcess+0xe8>
  break;
 80101c6:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80101c8:	bf00      	nop
 80101ca:	3708      	adds	r7, #8
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}
 80101d0:	24000284 	.word	0x24000284
 80101d4:	240004b4 	.word	0x240004b4
 80101d8:	58020400 	.word	0x58020400
 80101dc:	58021000 	.word	0x58021000
 80101e0:	08011f30 	.word	0x08011f30
 80101e4:	24000420 	.word	0x24000420
 80101e8:	24000bac 	.word	0x24000bac
 80101ec:	240007d4 	.word	0x240007d4

080101f0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b0b8      	sub	sp, #224	; 0xe0
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80101f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80101fc:	2200      	movs	r2, #0
 80101fe:	601a      	str	r2, [r3, #0]
 8010200:	605a      	str	r2, [r3, #4]
 8010202:	609a      	str	r2, [r3, #8]
 8010204:	60da      	str	r2, [r3, #12]
 8010206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010208:	f107 0310 	add.w	r3, r7, #16
 801020c:	22bc      	movs	r2, #188	; 0xbc
 801020e:	2100      	movs	r1, #0
 8010210:	4618      	mov	r0, r3
 8010212:	f000 fb01 	bl	8010818 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	4a3b      	ldr	r2, [pc, #236]	; (8010308 <HAL_HCD_MspInit+0x118>)
 801021c:	4293      	cmp	r3, r2
 801021e:	d16e      	bne.n	80102fe <HAL_HCD_MspInit+0x10e>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010220:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010224:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8010226:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801022a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801022e:	f107 0310 	add.w	r3, r7, #16
 8010232:	4618      	mov	r0, r3
 8010234:	f7f8 f898 	bl	8008368 <HAL_RCCEx_PeriphCLKConfig>
 8010238:	4603      	mov	r3, r0
 801023a:	2b00      	cmp	r3, #0
 801023c:	d001      	beq.n	8010242 <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 801023e:	f7f1 fa15 	bl	800166c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8010242:	f7f7 f8e5 	bl	8007410 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010246:	4b31      	ldr	r3, [pc, #196]	; (801030c <HAL_HCD_MspInit+0x11c>)
 8010248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801024c:	4a2f      	ldr	r2, [pc, #188]	; (801030c <HAL_HCD_MspInit+0x11c>)
 801024e:	f043 0301 	orr.w	r3, r3, #1
 8010252:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010256:	4b2d      	ldr	r3, [pc, #180]	; (801030c <HAL_HCD_MspInit+0x11c>)
 8010258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801025c:	f003 0301 	and.w	r3, r3, #1
 8010260:	60fb      	str	r3, [r7, #12]
 8010262:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8010264:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8010268:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801026c:	2302      	movs	r3, #2
 801026e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010272:	2300      	movs	r3, #0
 8010274:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010278:	2300      	movs	r3, #0
 801027a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801027e:	230a      	movs	r3, #10
 8010280:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010284:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8010288:	4619      	mov	r1, r3
 801028a:	4821      	ldr	r0, [pc, #132]	; (8010310 <HAL_HCD_MspInit+0x120>)
 801028c:	f7f5 f958 	bl	8005540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8010290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010294:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010298:	2300      	movs	r3, #0
 801029a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801029e:	2300      	movs	r3, #0
 80102a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80102a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80102a8:	4619      	mov	r1, r3
 80102aa:	4819      	ldr	r0, [pc, #100]	; (8010310 <HAL_HCD_MspInit+0x120>)
 80102ac:	f7f5 f948 	bl	8005540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80102b0:	4b16      	ldr	r3, [pc, #88]	; (801030c <HAL_HCD_MspInit+0x11c>)
 80102b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80102b6:	4a15      	ldr	r2, [pc, #84]	; (801030c <HAL_HCD_MspInit+0x11c>)
 80102b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80102bc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80102c0:	4b12      	ldr	r3, [pc, #72]	; (801030c <HAL_HCD_MspInit+0x11c>)
 80102c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80102c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80102ca:	60bb      	str	r3, [r7, #8]
 80102cc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 80102ce:	2200      	movs	r2, #0
 80102d0:	2100      	movs	r1, #0
 80102d2:	2062      	movs	r0, #98	; 0x62
 80102d4:	f7f1 feaf 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 80102d8:	2062      	movs	r0, #98	; 0x62
 80102da:	f7f1 fec6 	bl	800206a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 80102de:	2200      	movs	r2, #0
 80102e0:	2100      	movs	r1, #0
 80102e2:	2063      	movs	r0, #99	; 0x63
 80102e4:	f7f1 fea7 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 80102e8:	2063      	movs	r0, #99	; 0x63
 80102ea:	f7f1 febe 	bl	800206a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80102ee:	2200      	movs	r2, #0
 80102f0:	2100      	movs	r1, #0
 80102f2:	2065      	movs	r0, #101	; 0x65
 80102f4:	f7f1 fe9f 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80102f8:	2065      	movs	r0, #101	; 0x65
 80102fa:	f7f1 feb6 	bl	800206a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80102fe:	bf00      	nop
 8010300:	37e0      	adds	r7, #224	; 0xe0
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}
 8010306:	bf00      	nop
 8010308:	40080000 	.word	0x40080000
 801030c:	58024400 	.word	0x58024400
 8010310:	58020000 	.word	0x58020000

08010314 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b082      	sub	sp, #8
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010322:	4618      	mov	r0, r3
 8010324:	f7fe fffb 	bl	800f31e <USBH_LL_IncTimer>
}
 8010328:	bf00      	nop
 801032a:	3708      	adds	r7, #8
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}

08010330 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b082      	sub	sp, #8
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801033e:	4618      	mov	r0, r3
 8010340:	f7ff f833 	bl	800f3aa <USBH_LL_Connect>
}
 8010344:	bf00      	nop
 8010346:	3708      	adds	r7, #8
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}

0801034c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b082      	sub	sp, #8
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801035a:	4618      	mov	r0, r3
 801035c:	f7ff f83c 	bl	800f3d8 <USBH_LL_Disconnect>
}
 8010360:	bf00      	nop
 8010362:	3708      	adds	r7, #8
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}

08010368 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010368:	b480      	push	{r7}
 801036a:	b083      	sub	sp, #12
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
 8010370:	460b      	mov	r3, r1
 8010372:	70fb      	strb	r3, [r7, #3]
 8010374:	4613      	mov	r3, r2
 8010376:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010378:	bf00      	nop
 801037a:	370c      	adds	r7, #12
 801037c:	46bd      	mov	sp, r7
 801037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010382:	4770      	bx	lr

08010384 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b082      	sub	sp, #8
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010392:	4618      	mov	r0, r3
 8010394:	f7fe ffed 	bl	800f372 <USBH_LL_PortEnabled>
}
 8010398:	bf00      	nop
 801039a:	3708      	adds	r7, #8
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}

080103a0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b082      	sub	sp, #8
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7fe ffed 	bl	800f38e <USBH_LL_PortDisabled>
}
 80103b4:	bf00      	nop
 80103b6:	3708      	adds	r7, #8
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}

080103bc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80103ca:	2b01      	cmp	r3, #1
 80103cc:	d129      	bne.n	8010422 <USBH_LL_Init+0x66>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80103ce:	4a17      	ldr	r2, [pc, #92]	; (801042c <USBH_LL_Init+0x70>)
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	4a14      	ldr	r2, [pc, #80]	; (801042c <USBH_LL_Init+0x70>)
 80103da:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80103de:	4b13      	ldr	r3, [pc, #76]	; (801042c <USBH_LL_Init+0x70>)
 80103e0:	4a13      	ldr	r2, [pc, #76]	; (8010430 <USBH_LL_Init+0x74>)
 80103e2:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 80103e4:	4b11      	ldr	r3, [pc, #68]	; (801042c <USBH_LL_Init+0x70>)
 80103e6:	2210      	movs	r2, #16
 80103e8:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80103ea:	4b10      	ldr	r3, [pc, #64]	; (801042c <USBH_LL_Init+0x70>)
 80103ec:	2201      	movs	r2, #1
 80103ee:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80103f0:	4b0e      	ldr	r3, [pc, #56]	; (801042c <USBH_LL_Init+0x70>)
 80103f2:	2200      	movs	r2, #0
 80103f4:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80103f6:	4b0d      	ldr	r3, [pc, #52]	; (801042c <USBH_LL_Init+0x70>)
 80103f8:	2202      	movs	r2, #2
 80103fa:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80103fc:	4b0b      	ldr	r3, [pc, #44]	; (801042c <USBH_LL_Init+0x70>)
 80103fe:	2200      	movs	r2, #0
 8010400:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010402:	480a      	ldr	r0, [pc, #40]	; (801042c <USBH_LL_Init+0x70>)
 8010404:	f7f5 fa65 	bl	80058d2 <HAL_HCD_Init>
 8010408:	4603      	mov	r3, r0
 801040a:	2b00      	cmp	r3, #0
 801040c:	d001      	beq.n	8010412 <USBH_LL_Init+0x56>
  {
    Error_Handler( );
 801040e:	f7f1 f92d 	bl	800166c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010412:	4806      	ldr	r0, [pc, #24]	; (801042c <USBH_LL_Init+0x70>)
 8010414:	f7f5 fe42 	bl	800609c <HAL_HCD_GetCurrentFrame>
 8010418:	4603      	mov	r3, r0
 801041a:	4619      	mov	r1, r3
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f7fe ff6f 	bl	800f300 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010422:	2300      	movs	r3, #0
}
 8010424:	4618      	mov	r0, r3
 8010426:	3708      	adds	r7, #8
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}
 801042c:	24000fac 	.word	0x24000fac
 8010430:	40080000 	.word	0x40080000

08010434 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b084      	sub	sp, #16
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801043c:	2300      	movs	r3, #0
 801043e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010440:	2300      	movs	r3, #0
 8010442:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801044a:	4618      	mov	r0, r3
 801044c:	f7f5 fdb0 	bl	8005fb0 <HAL_HCD_Start>
 8010450:	4603      	mov	r3, r0
 8010452:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010454:	7bfb      	ldrb	r3, [r7, #15]
 8010456:	4618      	mov	r0, r3
 8010458:	f000 f95c 	bl	8010714 <USBH_Get_USB_Status>
 801045c:	4603      	mov	r3, r0
 801045e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010460:	7bbb      	ldrb	r3, [r7, #14]
}
 8010462:	4618      	mov	r0, r3
 8010464:	3710      	adds	r7, #16
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}

0801046a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801046a:	b580      	push	{r7, lr}
 801046c:	b084      	sub	sp, #16
 801046e:	af00      	add	r7, sp, #0
 8010470:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010472:	2300      	movs	r3, #0
 8010474:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010476:	2300      	movs	r3, #0
 8010478:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010480:	4618      	mov	r0, r3
 8010482:	f7f5 fdb8 	bl	8005ff6 <HAL_HCD_Stop>
 8010486:	4603      	mov	r3, r0
 8010488:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801048a:	7bfb      	ldrb	r3, [r7, #15]
 801048c:	4618      	mov	r0, r3
 801048e:	f000 f941 	bl	8010714 <USBH_Get_USB_Status>
 8010492:	4603      	mov	r3, r0
 8010494:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010496:	7bbb      	ldrb	r3, [r7, #14]
}
 8010498:	4618      	mov	r0, r3
 801049a:	3710      	adds	r7, #16
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}

080104a0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b084      	sub	sp, #16
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80104a8:	2301      	movs	r3, #1
 80104aa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7f5 fe00 	bl	80060b8 <HAL_HCD_GetCurrentSpeed>
 80104b8:	4603      	mov	r3, r0
 80104ba:	2b02      	cmp	r3, #2
 80104bc:	d00c      	beq.n	80104d8 <USBH_LL_GetSpeed+0x38>
 80104be:	2b02      	cmp	r3, #2
 80104c0:	d80d      	bhi.n	80104de <USBH_LL_GetSpeed+0x3e>
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d002      	beq.n	80104cc <USBH_LL_GetSpeed+0x2c>
 80104c6:	2b01      	cmp	r3, #1
 80104c8:	d003      	beq.n	80104d2 <USBH_LL_GetSpeed+0x32>
 80104ca:	e008      	b.n	80104de <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80104cc:	2300      	movs	r3, #0
 80104ce:	73fb      	strb	r3, [r7, #15]
    break;
 80104d0:	e008      	b.n	80104e4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80104d2:	2301      	movs	r3, #1
 80104d4:	73fb      	strb	r3, [r7, #15]
    break;
 80104d6:	e005      	b.n	80104e4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80104d8:	2302      	movs	r3, #2
 80104da:	73fb      	strb	r3, [r7, #15]
    break;
 80104dc:	e002      	b.n	80104e4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80104de:	2301      	movs	r3, #1
 80104e0:	73fb      	strb	r3, [r7, #15]
    break;
 80104e2:	bf00      	nop
  }
  return  speed;
 80104e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80104e6:	4618      	mov	r0, r3
 80104e8:	3710      	adds	r7, #16
 80104ea:	46bd      	mov	sp, r7
 80104ec:	bd80      	pop	{r7, pc}

080104ee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80104ee:	b580      	push	{r7, lr}
 80104f0:	b084      	sub	sp, #16
 80104f2:	af00      	add	r7, sp, #0
 80104f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104f6:	2300      	movs	r3, #0
 80104f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80104fa:	2300      	movs	r3, #0
 80104fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010504:	4618      	mov	r0, r3
 8010506:	f7f5 fd93 	bl	8006030 <HAL_HCD_ResetPort>
 801050a:	4603      	mov	r3, r0
 801050c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801050e:	7bfb      	ldrb	r3, [r7, #15]
 8010510:	4618      	mov	r0, r3
 8010512:	f000 f8ff 	bl	8010714 <USBH_Get_USB_Status>
 8010516:	4603      	mov	r3, r0
 8010518:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801051a:	7bbb      	ldrb	r3, [r7, #14]
}
 801051c:	4618      	mov	r0, r3
 801051e:	3710      	adds	r7, #16
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}

08010524 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b082      	sub	sp, #8
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	460b      	mov	r3, r1
 801052e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010536:	78fa      	ldrb	r2, [r7, #3]
 8010538:	4611      	mov	r1, r2
 801053a:	4618      	mov	r0, r3
 801053c:	f7f5 fd9a 	bl	8006074 <HAL_HCD_HC_GetXferCount>
 8010540:	4603      	mov	r3, r0
}
 8010542:	4618      	mov	r0, r3
 8010544:	3708      	adds	r7, #8
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}

0801054a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801054a:	b590      	push	{r4, r7, lr}
 801054c:	b089      	sub	sp, #36	; 0x24
 801054e:	af04      	add	r7, sp, #16
 8010550:	6078      	str	r0, [r7, #4]
 8010552:	4608      	mov	r0, r1
 8010554:	4611      	mov	r1, r2
 8010556:	461a      	mov	r2, r3
 8010558:	4603      	mov	r3, r0
 801055a:	70fb      	strb	r3, [r7, #3]
 801055c:	460b      	mov	r3, r1
 801055e:	70bb      	strb	r3, [r7, #2]
 8010560:	4613      	mov	r3, r2
 8010562:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010564:	2300      	movs	r3, #0
 8010566:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010568:	2300      	movs	r3, #0
 801056a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010572:	787c      	ldrb	r4, [r7, #1]
 8010574:	78ba      	ldrb	r2, [r7, #2]
 8010576:	78f9      	ldrb	r1, [r7, #3]
 8010578:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801057a:	9302      	str	r3, [sp, #8]
 801057c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010580:	9301      	str	r3, [sp, #4]
 8010582:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010586:	9300      	str	r3, [sp, #0]
 8010588:	4623      	mov	r3, r4
 801058a:	f7f5 fa04 	bl	8005996 <HAL_HCD_HC_Init>
 801058e:	4603      	mov	r3, r0
 8010590:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010592:	7bfb      	ldrb	r3, [r7, #15]
 8010594:	4618      	mov	r0, r3
 8010596:	f000 f8bd 	bl	8010714 <USBH_Get_USB_Status>
 801059a:	4603      	mov	r3, r0
 801059c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801059e:	7bbb      	ldrb	r3, [r7, #14]
}
 80105a0:	4618      	mov	r0, r3
 80105a2:	3714      	adds	r7, #20
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd90      	pop	{r4, r7, pc}

080105a8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b084      	sub	sp, #16
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
 80105b0:	460b      	mov	r3, r1
 80105b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105b4:	2300      	movs	r3, #0
 80105b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80105b8:	2300      	movs	r3, #0
 80105ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80105c2:	78fa      	ldrb	r2, [r7, #3]
 80105c4:	4611      	mov	r1, r2
 80105c6:	4618      	mov	r0, r3
 80105c8:	f7f5 fa74 	bl	8005ab4 <HAL_HCD_HC_Halt>
 80105cc:	4603      	mov	r3, r0
 80105ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80105d0:	7bfb      	ldrb	r3, [r7, #15]
 80105d2:	4618      	mov	r0, r3
 80105d4:	f000 f89e 	bl	8010714 <USBH_Get_USB_Status>
 80105d8:	4603      	mov	r3, r0
 80105da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80105de:	4618      	mov	r0, r3
 80105e0:	3710      	adds	r7, #16
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd80      	pop	{r7, pc}

080105e6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80105e6:	b590      	push	{r4, r7, lr}
 80105e8:	b089      	sub	sp, #36	; 0x24
 80105ea:	af04      	add	r7, sp, #16
 80105ec:	6078      	str	r0, [r7, #4]
 80105ee:	4608      	mov	r0, r1
 80105f0:	4611      	mov	r1, r2
 80105f2:	461a      	mov	r2, r3
 80105f4:	4603      	mov	r3, r0
 80105f6:	70fb      	strb	r3, [r7, #3]
 80105f8:	460b      	mov	r3, r1
 80105fa:	70bb      	strb	r3, [r7, #2]
 80105fc:	4613      	mov	r3, r2
 80105fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010600:	2300      	movs	r3, #0
 8010602:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010604:	2300      	movs	r3, #0
 8010606:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801060e:	787c      	ldrb	r4, [r7, #1]
 8010610:	78ba      	ldrb	r2, [r7, #2]
 8010612:	78f9      	ldrb	r1, [r7, #3]
 8010614:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010618:	9303      	str	r3, [sp, #12]
 801061a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801061c:	9302      	str	r3, [sp, #8]
 801061e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010620:	9301      	str	r3, [sp, #4]
 8010622:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010626:	9300      	str	r3, [sp, #0]
 8010628:	4623      	mov	r3, r4
 801062a:	f7f5 fa67 	bl	8005afc <HAL_HCD_HC_SubmitRequest>
 801062e:	4603      	mov	r3, r0
 8010630:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010632:	7bfb      	ldrb	r3, [r7, #15]
 8010634:	4618      	mov	r0, r3
 8010636:	f000 f86d 	bl	8010714 <USBH_Get_USB_Status>
 801063a:	4603      	mov	r3, r0
 801063c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801063e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010640:	4618      	mov	r0, r3
 8010642:	3714      	adds	r7, #20
 8010644:	46bd      	mov	sp, r7
 8010646:	bd90      	pop	{r4, r7, pc}

08010648 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b082      	sub	sp, #8
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	460b      	mov	r3, r1
 8010652:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801065a:	78fa      	ldrb	r2, [r7, #3]
 801065c:	4611      	mov	r1, r2
 801065e:	4618      	mov	r0, r3
 8010660:	f7f5 fcf4 	bl	800604c <HAL_HCD_HC_GetURBState>
 8010664:	4603      	mov	r3, r0
}
 8010666:	4618      	mov	r0, r3
 8010668:	3708      	adds	r7, #8
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}

0801066e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801066e:	b580      	push	{r7, lr}
 8010670:	b082      	sub	sp, #8
 8010672:	af00      	add	r7, sp, #0
 8010674:	6078      	str	r0, [r7, #4]
 8010676:	460b      	mov	r3, r1
 8010678:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010680:	2b01      	cmp	r3, #1
 8010682:	d103      	bne.n	801068c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010684:	78fb      	ldrb	r3, [r7, #3]
 8010686:	4618      	mov	r0, r3
 8010688:	f000 f870 	bl	801076c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801068c:	20c8      	movs	r0, #200	; 0xc8
 801068e:	f7f1 fbb3 	bl	8001df8 <HAL_Delay>
  return USBH_OK;
 8010692:	2300      	movs	r3, #0
}
 8010694:	4618      	mov	r0, r3
 8010696:	3708      	adds	r7, #8
 8010698:	46bd      	mov	sp, r7
 801069a:	bd80      	pop	{r7, pc}

0801069c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801069c:	b480      	push	{r7}
 801069e:	b085      	sub	sp, #20
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	460b      	mov	r3, r1
 80106a6:	70fb      	strb	r3, [r7, #3]
 80106a8:	4613      	mov	r3, r2
 80106aa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80106b2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80106b4:	78fb      	ldrb	r3, [r7, #3]
 80106b6:	68fa      	ldr	r2, [r7, #12]
 80106b8:	212c      	movs	r1, #44	; 0x2c
 80106ba:	fb01 f303 	mul.w	r3, r1, r3
 80106be:	4413      	add	r3, r2
 80106c0:	333b      	adds	r3, #59	; 0x3b
 80106c2:	781b      	ldrb	r3, [r3, #0]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d009      	beq.n	80106dc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80106c8:	78fb      	ldrb	r3, [r7, #3]
 80106ca:	68fa      	ldr	r2, [r7, #12]
 80106cc:	212c      	movs	r1, #44	; 0x2c
 80106ce:	fb01 f303 	mul.w	r3, r1, r3
 80106d2:	4413      	add	r3, r2
 80106d4:	3354      	adds	r3, #84	; 0x54
 80106d6:	78ba      	ldrb	r2, [r7, #2]
 80106d8:	701a      	strb	r2, [r3, #0]
 80106da:	e008      	b.n	80106ee <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80106dc:	78fb      	ldrb	r3, [r7, #3]
 80106de:	68fa      	ldr	r2, [r7, #12]
 80106e0:	212c      	movs	r1, #44	; 0x2c
 80106e2:	fb01 f303 	mul.w	r3, r1, r3
 80106e6:	4413      	add	r3, r2
 80106e8:	3355      	adds	r3, #85	; 0x55
 80106ea:	78ba      	ldrb	r2, [r7, #2]
 80106ec:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80106ee:	2300      	movs	r3, #0
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	3714      	adds	r7, #20
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr

080106fc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f7f1 fb77 	bl	8001df8 <HAL_Delay>
}
 801070a:	bf00      	nop
 801070c:	3708      	adds	r7, #8
 801070e:	46bd      	mov	sp, r7
 8010710:	bd80      	pop	{r7, pc}
	...

08010714 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010714:	b480      	push	{r7}
 8010716:	b085      	sub	sp, #20
 8010718:	af00      	add	r7, sp, #0
 801071a:	4603      	mov	r3, r0
 801071c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801071e:	2300      	movs	r3, #0
 8010720:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010722:	79fb      	ldrb	r3, [r7, #7]
 8010724:	2b03      	cmp	r3, #3
 8010726:	d817      	bhi.n	8010758 <USBH_Get_USB_Status+0x44>
 8010728:	a201      	add	r2, pc, #4	; (adr r2, 8010730 <USBH_Get_USB_Status+0x1c>)
 801072a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801072e:	bf00      	nop
 8010730:	08010741 	.word	0x08010741
 8010734:	08010747 	.word	0x08010747
 8010738:	0801074d 	.word	0x0801074d
 801073c:	08010753 	.word	0x08010753
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010740:	2300      	movs	r3, #0
 8010742:	73fb      	strb	r3, [r7, #15]
    break;
 8010744:	e00b      	b.n	801075e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010746:	2302      	movs	r3, #2
 8010748:	73fb      	strb	r3, [r7, #15]
    break;
 801074a:	e008      	b.n	801075e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801074c:	2301      	movs	r3, #1
 801074e:	73fb      	strb	r3, [r7, #15]
    break;
 8010750:	e005      	b.n	801075e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010752:	2302      	movs	r3, #2
 8010754:	73fb      	strb	r3, [r7, #15]
    break;
 8010756:	e002      	b.n	801075e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010758:	2302      	movs	r3, #2
 801075a:	73fb      	strb	r3, [r7, #15]
    break;
 801075c:	bf00      	nop
  }
  return usb_status;
 801075e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010760:	4618      	mov	r0, r3
 8010762:	3714      	adds	r7, #20
 8010764:	46bd      	mov	sp, r7
 8010766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076a:	4770      	bx	lr

0801076c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b084      	sub	sp, #16
 8010770:	af00      	add	r7, sp, #0
 8010772:	4603      	mov	r3, r0
 8010774:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010776:	79fb      	ldrb	r3, [r7, #7]
 8010778:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801077a:	79fb      	ldrb	r3, [r7, #7]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d102      	bne.n	8010786 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010780:	2301      	movs	r3, #1
 8010782:	73fb      	strb	r3, [r7, #15]
 8010784:	e001      	b.n	801078a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8010786:	2300      	movs	r3, #0
 8010788:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,(GPIO_PinState)data);
 801078a:	7bfb      	ldrb	r3, [r7, #15]
 801078c:	461a      	mov	r2, r3
 801078e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010792:	4803      	ldr	r0, [pc, #12]	; (80107a0 <MX_DriverVbusFS+0x34>)
 8010794:	f7f5 f884 	bl	80058a0 <HAL_GPIO_WritePin>
}
 8010798:	bf00      	nop
 801079a:	3710      	adds	r7, #16
 801079c:	46bd      	mov	sp, r7
 801079e:	bd80      	pop	{r7, pc}
 80107a0:	58020c00 	.word	0x58020c00

080107a4 <__errno>:
 80107a4:	4b01      	ldr	r3, [pc, #4]	; (80107ac <__errno+0x8>)
 80107a6:	6818      	ldr	r0, [r3, #0]
 80107a8:	4770      	bx	lr
 80107aa:	bf00      	nop
 80107ac:	24000030 	.word	0x24000030

080107b0 <__libc_init_array>:
 80107b0:	b570      	push	{r4, r5, r6, lr}
 80107b2:	4d0d      	ldr	r5, [pc, #52]	; (80107e8 <__libc_init_array+0x38>)
 80107b4:	4c0d      	ldr	r4, [pc, #52]	; (80107ec <__libc_init_array+0x3c>)
 80107b6:	1b64      	subs	r4, r4, r5
 80107b8:	10a4      	asrs	r4, r4, #2
 80107ba:	2600      	movs	r6, #0
 80107bc:	42a6      	cmp	r6, r4
 80107be:	d109      	bne.n	80107d4 <__libc_init_array+0x24>
 80107c0:	4d0b      	ldr	r5, [pc, #44]	; (80107f0 <__libc_init_array+0x40>)
 80107c2:	4c0c      	ldr	r4, [pc, #48]	; (80107f4 <__libc_init_array+0x44>)
 80107c4:	f001 fa92 	bl	8011cec <_init>
 80107c8:	1b64      	subs	r4, r4, r5
 80107ca:	10a4      	asrs	r4, r4, #2
 80107cc:	2600      	movs	r6, #0
 80107ce:	42a6      	cmp	r6, r4
 80107d0:	d105      	bne.n	80107de <__libc_init_array+0x2e>
 80107d2:	bd70      	pop	{r4, r5, r6, pc}
 80107d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80107d8:	4798      	blx	r3
 80107da:	3601      	adds	r6, #1
 80107dc:	e7ee      	b.n	80107bc <__libc_init_array+0xc>
 80107de:	f855 3b04 	ldr.w	r3, [r5], #4
 80107e2:	4798      	blx	r3
 80107e4:	3601      	adds	r6, #1
 80107e6:	e7f2      	b.n	80107ce <__libc_init_array+0x1e>
 80107e8:	080121a0 	.word	0x080121a0
 80107ec:	080121a0 	.word	0x080121a0
 80107f0:	080121a0 	.word	0x080121a0
 80107f4:	080121a4 	.word	0x080121a4

080107f8 <malloc>:
 80107f8:	4b02      	ldr	r3, [pc, #8]	; (8010804 <malloc+0xc>)
 80107fa:	4601      	mov	r1, r0
 80107fc:	6818      	ldr	r0, [r3, #0]
 80107fe:	f000 b863 	b.w	80108c8 <_malloc_r>
 8010802:	bf00      	nop
 8010804:	24000030 	.word	0x24000030

08010808 <free>:
 8010808:	4b02      	ldr	r3, [pc, #8]	; (8010814 <free+0xc>)
 801080a:	4601      	mov	r1, r0
 801080c:	6818      	ldr	r0, [r3, #0]
 801080e:	f000 b80b 	b.w	8010828 <_free_r>
 8010812:	bf00      	nop
 8010814:	24000030 	.word	0x24000030

08010818 <memset>:
 8010818:	4402      	add	r2, r0
 801081a:	4603      	mov	r3, r0
 801081c:	4293      	cmp	r3, r2
 801081e:	d100      	bne.n	8010822 <memset+0xa>
 8010820:	4770      	bx	lr
 8010822:	f803 1b01 	strb.w	r1, [r3], #1
 8010826:	e7f9      	b.n	801081c <memset+0x4>

08010828 <_free_r>:
 8010828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801082a:	2900      	cmp	r1, #0
 801082c:	d048      	beq.n	80108c0 <_free_r+0x98>
 801082e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010832:	9001      	str	r0, [sp, #4]
 8010834:	2b00      	cmp	r3, #0
 8010836:	f1a1 0404 	sub.w	r4, r1, #4
 801083a:	bfb8      	it	lt
 801083c:	18e4      	addlt	r4, r4, r3
 801083e:	f000 f8ed 	bl	8010a1c <__malloc_lock>
 8010842:	4a20      	ldr	r2, [pc, #128]	; (80108c4 <_free_r+0x9c>)
 8010844:	9801      	ldr	r0, [sp, #4]
 8010846:	6813      	ldr	r3, [r2, #0]
 8010848:	4615      	mov	r5, r2
 801084a:	b933      	cbnz	r3, 801085a <_free_r+0x32>
 801084c:	6063      	str	r3, [r4, #4]
 801084e:	6014      	str	r4, [r2, #0]
 8010850:	b003      	add	sp, #12
 8010852:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010856:	f000 b8e7 	b.w	8010a28 <__malloc_unlock>
 801085a:	42a3      	cmp	r3, r4
 801085c:	d90b      	bls.n	8010876 <_free_r+0x4e>
 801085e:	6821      	ldr	r1, [r4, #0]
 8010860:	1862      	adds	r2, r4, r1
 8010862:	4293      	cmp	r3, r2
 8010864:	bf04      	itt	eq
 8010866:	681a      	ldreq	r2, [r3, #0]
 8010868:	685b      	ldreq	r3, [r3, #4]
 801086a:	6063      	str	r3, [r4, #4]
 801086c:	bf04      	itt	eq
 801086e:	1852      	addeq	r2, r2, r1
 8010870:	6022      	streq	r2, [r4, #0]
 8010872:	602c      	str	r4, [r5, #0]
 8010874:	e7ec      	b.n	8010850 <_free_r+0x28>
 8010876:	461a      	mov	r2, r3
 8010878:	685b      	ldr	r3, [r3, #4]
 801087a:	b10b      	cbz	r3, 8010880 <_free_r+0x58>
 801087c:	42a3      	cmp	r3, r4
 801087e:	d9fa      	bls.n	8010876 <_free_r+0x4e>
 8010880:	6811      	ldr	r1, [r2, #0]
 8010882:	1855      	adds	r5, r2, r1
 8010884:	42a5      	cmp	r5, r4
 8010886:	d10b      	bne.n	80108a0 <_free_r+0x78>
 8010888:	6824      	ldr	r4, [r4, #0]
 801088a:	4421      	add	r1, r4
 801088c:	1854      	adds	r4, r2, r1
 801088e:	42a3      	cmp	r3, r4
 8010890:	6011      	str	r1, [r2, #0]
 8010892:	d1dd      	bne.n	8010850 <_free_r+0x28>
 8010894:	681c      	ldr	r4, [r3, #0]
 8010896:	685b      	ldr	r3, [r3, #4]
 8010898:	6053      	str	r3, [r2, #4]
 801089a:	4421      	add	r1, r4
 801089c:	6011      	str	r1, [r2, #0]
 801089e:	e7d7      	b.n	8010850 <_free_r+0x28>
 80108a0:	d902      	bls.n	80108a8 <_free_r+0x80>
 80108a2:	230c      	movs	r3, #12
 80108a4:	6003      	str	r3, [r0, #0]
 80108a6:	e7d3      	b.n	8010850 <_free_r+0x28>
 80108a8:	6825      	ldr	r5, [r4, #0]
 80108aa:	1961      	adds	r1, r4, r5
 80108ac:	428b      	cmp	r3, r1
 80108ae:	bf04      	itt	eq
 80108b0:	6819      	ldreq	r1, [r3, #0]
 80108b2:	685b      	ldreq	r3, [r3, #4]
 80108b4:	6063      	str	r3, [r4, #4]
 80108b6:	bf04      	itt	eq
 80108b8:	1949      	addeq	r1, r1, r5
 80108ba:	6021      	streq	r1, [r4, #0]
 80108bc:	6054      	str	r4, [r2, #4]
 80108be:	e7c7      	b.n	8010850 <_free_r+0x28>
 80108c0:	b003      	add	sp, #12
 80108c2:	bd30      	pop	{r4, r5, pc}
 80108c4:	24000288 	.word	0x24000288

080108c8 <_malloc_r>:
 80108c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108ca:	1ccd      	adds	r5, r1, #3
 80108cc:	f025 0503 	bic.w	r5, r5, #3
 80108d0:	3508      	adds	r5, #8
 80108d2:	2d0c      	cmp	r5, #12
 80108d4:	bf38      	it	cc
 80108d6:	250c      	movcc	r5, #12
 80108d8:	2d00      	cmp	r5, #0
 80108da:	4606      	mov	r6, r0
 80108dc:	db01      	blt.n	80108e2 <_malloc_r+0x1a>
 80108de:	42a9      	cmp	r1, r5
 80108e0:	d903      	bls.n	80108ea <_malloc_r+0x22>
 80108e2:	230c      	movs	r3, #12
 80108e4:	6033      	str	r3, [r6, #0]
 80108e6:	2000      	movs	r0, #0
 80108e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108ea:	f000 f897 	bl	8010a1c <__malloc_lock>
 80108ee:	4921      	ldr	r1, [pc, #132]	; (8010974 <_malloc_r+0xac>)
 80108f0:	680a      	ldr	r2, [r1, #0]
 80108f2:	4614      	mov	r4, r2
 80108f4:	b99c      	cbnz	r4, 801091e <_malloc_r+0x56>
 80108f6:	4f20      	ldr	r7, [pc, #128]	; (8010978 <_malloc_r+0xb0>)
 80108f8:	683b      	ldr	r3, [r7, #0]
 80108fa:	b923      	cbnz	r3, 8010906 <_malloc_r+0x3e>
 80108fc:	4621      	mov	r1, r4
 80108fe:	4630      	mov	r0, r6
 8010900:	f000 f83c 	bl	801097c <_sbrk_r>
 8010904:	6038      	str	r0, [r7, #0]
 8010906:	4629      	mov	r1, r5
 8010908:	4630      	mov	r0, r6
 801090a:	f000 f837 	bl	801097c <_sbrk_r>
 801090e:	1c43      	adds	r3, r0, #1
 8010910:	d123      	bne.n	801095a <_malloc_r+0x92>
 8010912:	230c      	movs	r3, #12
 8010914:	6033      	str	r3, [r6, #0]
 8010916:	4630      	mov	r0, r6
 8010918:	f000 f886 	bl	8010a28 <__malloc_unlock>
 801091c:	e7e3      	b.n	80108e6 <_malloc_r+0x1e>
 801091e:	6823      	ldr	r3, [r4, #0]
 8010920:	1b5b      	subs	r3, r3, r5
 8010922:	d417      	bmi.n	8010954 <_malloc_r+0x8c>
 8010924:	2b0b      	cmp	r3, #11
 8010926:	d903      	bls.n	8010930 <_malloc_r+0x68>
 8010928:	6023      	str	r3, [r4, #0]
 801092a:	441c      	add	r4, r3
 801092c:	6025      	str	r5, [r4, #0]
 801092e:	e004      	b.n	801093a <_malloc_r+0x72>
 8010930:	6863      	ldr	r3, [r4, #4]
 8010932:	42a2      	cmp	r2, r4
 8010934:	bf0c      	ite	eq
 8010936:	600b      	streq	r3, [r1, #0]
 8010938:	6053      	strne	r3, [r2, #4]
 801093a:	4630      	mov	r0, r6
 801093c:	f000 f874 	bl	8010a28 <__malloc_unlock>
 8010940:	f104 000b 	add.w	r0, r4, #11
 8010944:	1d23      	adds	r3, r4, #4
 8010946:	f020 0007 	bic.w	r0, r0, #7
 801094a:	1ac2      	subs	r2, r0, r3
 801094c:	d0cc      	beq.n	80108e8 <_malloc_r+0x20>
 801094e:	1a1b      	subs	r3, r3, r0
 8010950:	50a3      	str	r3, [r4, r2]
 8010952:	e7c9      	b.n	80108e8 <_malloc_r+0x20>
 8010954:	4622      	mov	r2, r4
 8010956:	6864      	ldr	r4, [r4, #4]
 8010958:	e7cc      	b.n	80108f4 <_malloc_r+0x2c>
 801095a:	1cc4      	adds	r4, r0, #3
 801095c:	f024 0403 	bic.w	r4, r4, #3
 8010960:	42a0      	cmp	r0, r4
 8010962:	d0e3      	beq.n	801092c <_malloc_r+0x64>
 8010964:	1a21      	subs	r1, r4, r0
 8010966:	4630      	mov	r0, r6
 8010968:	f000 f808 	bl	801097c <_sbrk_r>
 801096c:	3001      	adds	r0, #1
 801096e:	d1dd      	bne.n	801092c <_malloc_r+0x64>
 8010970:	e7cf      	b.n	8010912 <_malloc_r+0x4a>
 8010972:	bf00      	nop
 8010974:	24000288 	.word	0x24000288
 8010978:	2400028c 	.word	0x2400028c

0801097c <_sbrk_r>:
 801097c:	b538      	push	{r3, r4, r5, lr}
 801097e:	4d06      	ldr	r5, [pc, #24]	; (8010998 <_sbrk_r+0x1c>)
 8010980:	2300      	movs	r3, #0
 8010982:	4604      	mov	r4, r0
 8010984:	4608      	mov	r0, r1
 8010986:	602b      	str	r3, [r5, #0]
 8010988:	f7f1 f8b8 	bl	8001afc <_sbrk>
 801098c:	1c43      	adds	r3, r0, #1
 801098e:	d102      	bne.n	8010996 <_sbrk_r+0x1a>
 8010990:	682b      	ldr	r3, [r5, #0]
 8010992:	b103      	cbz	r3, 8010996 <_sbrk_r+0x1a>
 8010994:	6023      	str	r3, [r4, #0]
 8010996:	bd38      	pop	{r3, r4, r5, pc}
 8010998:	240012b0 	.word	0x240012b0

0801099c <siprintf>:
 801099c:	b40e      	push	{r1, r2, r3}
 801099e:	b500      	push	{lr}
 80109a0:	b09c      	sub	sp, #112	; 0x70
 80109a2:	ab1d      	add	r3, sp, #116	; 0x74
 80109a4:	9002      	str	r0, [sp, #8]
 80109a6:	9006      	str	r0, [sp, #24]
 80109a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80109ac:	4809      	ldr	r0, [pc, #36]	; (80109d4 <siprintf+0x38>)
 80109ae:	9107      	str	r1, [sp, #28]
 80109b0:	9104      	str	r1, [sp, #16]
 80109b2:	4909      	ldr	r1, [pc, #36]	; (80109d8 <siprintf+0x3c>)
 80109b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80109b8:	9105      	str	r1, [sp, #20]
 80109ba:	6800      	ldr	r0, [r0, #0]
 80109bc:	9301      	str	r3, [sp, #4]
 80109be:	a902      	add	r1, sp, #8
 80109c0:	f000 f894 	bl	8010aec <_svfiprintf_r>
 80109c4:	9b02      	ldr	r3, [sp, #8]
 80109c6:	2200      	movs	r2, #0
 80109c8:	701a      	strb	r2, [r3, #0]
 80109ca:	b01c      	add	sp, #112	; 0x70
 80109cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80109d0:	b003      	add	sp, #12
 80109d2:	4770      	bx	lr
 80109d4:	24000030 	.word	0x24000030
 80109d8:	ffff0208 	.word	0xffff0208

080109dc <strcpy>:
 80109dc:	4603      	mov	r3, r0
 80109de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80109e2:	f803 2b01 	strb.w	r2, [r3], #1
 80109e6:	2a00      	cmp	r2, #0
 80109e8:	d1f9      	bne.n	80109de <strcpy+0x2>
 80109ea:	4770      	bx	lr

080109ec <strstr>:
 80109ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109ee:	780c      	ldrb	r4, [r1, #0]
 80109f0:	b164      	cbz	r4, 8010a0c <strstr+0x20>
 80109f2:	4603      	mov	r3, r0
 80109f4:	781a      	ldrb	r2, [r3, #0]
 80109f6:	4618      	mov	r0, r3
 80109f8:	1c5e      	adds	r6, r3, #1
 80109fa:	b90a      	cbnz	r2, 8010a00 <strstr+0x14>
 80109fc:	4610      	mov	r0, r2
 80109fe:	e005      	b.n	8010a0c <strstr+0x20>
 8010a00:	4294      	cmp	r4, r2
 8010a02:	d108      	bne.n	8010a16 <strstr+0x2a>
 8010a04:	460d      	mov	r5, r1
 8010a06:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8010a0a:	b902      	cbnz	r2, 8010a0e <strstr+0x22>
 8010a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a0e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8010a12:	4297      	cmp	r7, r2
 8010a14:	d0f7      	beq.n	8010a06 <strstr+0x1a>
 8010a16:	4633      	mov	r3, r6
 8010a18:	e7ec      	b.n	80109f4 <strstr+0x8>
	...

08010a1c <__malloc_lock>:
 8010a1c:	4801      	ldr	r0, [pc, #4]	; (8010a24 <__malloc_lock+0x8>)
 8010a1e:	f000 baf9 	b.w	8011014 <__retarget_lock_acquire_recursive>
 8010a22:	bf00      	nop
 8010a24:	240012b8 	.word	0x240012b8

08010a28 <__malloc_unlock>:
 8010a28:	4801      	ldr	r0, [pc, #4]	; (8010a30 <__malloc_unlock+0x8>)
 8010a2a:	f000 baf4 	b.w	8011016 <__retarget_lock_release_recursive>
 8010a2e:	bf00      	nop
 8010a30:	240012b8 	.word	0x240012b8

08010a34 <__ssputs_r>:
 8010a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a38:	688e      	ldr	r6, [r1, #8]
 8010a3a:	429e      	cmp	r6, r3
 8010a3c:	4682      	mov	sl, r0
 8010a3e:	460c      	mov	r4, r1
 8010a40:	4690      	mov	r8, r2
 8010a42:	461f      	mov	r7, r3
 8010a44:	d838      	bhi.n	8010ab8 <__ssputs_r+0x84>
 8010a46:	898a      	ldrh	r2, [r1, #12]
 8010a48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010a4c:	d032      	beq.n	8010ab4 <__ssputs_r+0x80>
 8010a4e:	6825      	ldr	r5, [r4, #0]
 8010a50:	6909      	ldr	r1, [r1, #16]
 8010a52:	eba5 0901 	sub.w	r9, r5, r1
 8010a56:	6965      	ldr	r5, [r4, #20]
 8010a58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a60:	3301      	adds	r3, #1
 8010a62:	444b      	add	r3, r9
 8010a64:	106d      	asrs	r5, r5, #1
 8010a66:	429d      	cmp	r5, r3
 8010a68:	bf38      	it	cc
 8010a6a:	461d      	movcc	r5, r3
 8010a6c:	0553      	lsls	r3, r2, #21
 8010a6e:	d531      	bpl.n	8010ad4 <__ssputs_r+0xa0>
 8010a70:	4629      	mov	r1, r5
 8010a72:	f7ff ff29 	bl	80108c8 <_malloc_r>
 8010a76:	4606      	mov	r6, r0
 8010a78:	b950      	cbnz	r0, 8010a90 <__ssputs_r+0x5c>
 8010a7a:	230c      	movs	r3, #12
 8010a7c:	f8ca 3000 	str.w	r3, [sl]
 8010a80:	89a3      	ldrh	r3, [r4, #12]
 8010a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a86:	81a3      	strh	r3, [r4, #12]
 8010a88:	f04f 30ff 	mov.w	r0, #4294967295
 8010a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a90:	6921      	ldr	r1, [r4, #16]
 8010a92:	464a      	mov	r2, r9
 8010a94:	f000 fac0 	bl	8011018 <memcpy>
 8010a98:	89a3      	ldrh	r3, [r4, #12]
 8010a9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010aa2:	81a3      	strh	r3, [r4, #12]
 8010aa4:	6126      	str	r6, [r4, #16]
 8010aa6:	6165      	str	r5, [r4, #20]
 8010aa8:	444e      	add	r6, r9
 8010aaa:	eba5 0509 	sub.w	r5, r5, r9
 8010aae:	6026      	str	r6, [r4, #0]
 8010ab0:	60a5      	str	r5, [r4, #8]
 8010ab2:	463e      	mov	r6, r7
 8010ab4:	42be      	cmp	r6, r7
 8010ab6:	d900      	bls.n	8010aba <__ssputs_r+0x86>
 8010ab8:	463e      	mov	r6, r7
 8010aba:	4632      	mov	r2, r6
 8010abc:	6820      	ldr	r0, [r4, #0]
 8010abe:	4641      	mov	r1, r8
 8010ac0:	f000 fab8 	bl	8011034 <memmove>
 8010ac4:	68a3      	ldr	r3, [r4, #8]
 8010ac6:	6822      	ldr	r2, [r4, #0]
 8010ac8:	1b9b      	subs	r3, r3, r6
 8010aca:	4432      	add	r2, r6
 8010acc:	60a3      	str	r3, [r4, #8]
 8010ace:	6022      	str	r2, [r4, #0]
 8010ad0:	2000      	movs	r0, #0
 8010ad2:	e7db      	b.n	8010a8c <__ssputs_r+0x58>
 8010ad4:	462a      	mov	r2, r5
 8010ad6:	f000 fac7 	bl	8011068 <_realloc_r>
 8010ada:	4606      	mov	r6, r0
 8010adc:	2800      	cmp	r0, #0
 8010ade:	d1e1      	bne.n	8010aa4 <__ssputs_r+0x70>
 8010ae0:	6921      	ldr	r1, [r4, #16]
 8010ae2:	4650      	mov	r0, sl
 8010ae4:	f7ff fea0 	bl	8010828 <_free_r>
 8010ae8:	e7c7      	b.n	8010a7a <__ssputs_r+0x46>
	...

08010aec <_svfiprintf_r>:
 8010aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010af0:	4698      	mov	r8, r3
 8010af2:	898b      	ldrh	r3, [r1, #12]
 8010af4:	061b      	lsls	r3, r3, #24
 8010af6:	b09d      	sub	sp, #116	; 0x74
 8010af8:	4607      	mov	r7, r0
 8010afa:	460d      	mov	r5, r1
 8010afc:	4614      	mov	r4, r2
 8010afe:	d50e      	bpl.n	8010b1e <_svfiprintf_r+0x32>
 8010b00:	690b      	ldr	r3, [r1, #16]
 8010b02:	b963      	cbnz	r3, 8010b1e <_svfiprintf_r+0x32>
 8010b04:	2140      	movs	r1, #64	; 0x40
 8010b06:	f7ff fedf 	bl	80108c8 <_malloc_r>
 8010b0a:	6028      	str	r0, [r5, #0]
 8010b0c:	6128      	str	r0, [r5, #16]
 8010b0e:	b920      	cbnz	r0, 8010b1a <_svfiprintf_r+0x2e>
 8010b10:	230c      	movs	r3, #12
 8010b12:	603b      	str	r3, [r7, #0]
 8010b14:	f04f 30ff 	mov.w	r0, #4294967295
 8010b18:	e0d1      	b.n	8010cbe <_svfiprintf_r+0x1d2>
 8010b1a:	2340      	movs	r3, #64	; 0x40
 8010b1c:	616b      	str	r3, [r5, #20]
 8010b1e:	2300      	movs	r3, #0
 8010b20:	9309      	str	r3, [sp, #36]	; 0x24
 8010b22:	2320      	movs	r3, #32
 8010b24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010b28:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b2c:	2330      	movs	r3, #48	; 0x30
 8010b2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010cd8 <_svfiprintf_r+0x1ec>
 8010b32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010b36:	f04f 0901 	mov.w	r9, #1
 8010b3a:	4623      	mov	r3, r4
 8010b3c:	469a      	mov	sl, r3
 8010b3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b42:	b10a      	cbz	r2, 8010b48 <_svfiprintf_r+0x5c>
 8010b44:	2a25      	cmp	r2, #37	; 0x25
 8010b46:	d1f9      	bne.n	8010b3c <_svfiprintf_r+0x50>
 8010b48:	ebba 0b04 	subs.w	fp, sl, r4
 8010b4c:	d00b      	beq.n	8010b66 <_svfiprintf_r+0x7a>
 8010b4e:	465b      	mov	r3, fp
 8010b50:	4622      	mov	r2, r4
 8010b52:	4629      	mov	r1, r5
 8010b54:	4638      	mov	r0, r7
 8010b56:	f7ff ff6d 	bl	8010a34 <__ssputs_r>
 8010b5a:	3001      	adds	r0, #1
 8010b5c:	f000 80aa 	beq.w	8010cb4 <_svfiprintf_r+0x1c8>
 8010b60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b62:	445a      	add	r2, fp
 8010b64:	9209      	str	r2, [sp, #36]	; 0x24
 8010b66:	f89a 3000 	ldrb.w	r3, [sl]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	f000 80a2 	beq.w	8010cb4 <_svfiprintf_r+0x1c8>
 8010b70:	2300      	movs	r3, #0
 8010b72:	f04f 32ff 	mov.w	r2, #4294967295
 8010b76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b7a:	f10a 0a01 	add.w	sl, sl, #1
 8010b7e:	9304      	str	r3, [sp, #16]
 8010b80:	9307      	str	r3, [sp, #28]
 8010b82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b86:	931a      	str	r3, [sp, #104]	; 0x68
 8010b88:	4654      	mov	r4, sl
 8010b8a:	2205      	movs	r2, #5
 8010b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b90:	4851      	ldr	r0, [pc, #324]	; (8010cd8 <_svfiprintf_r+0x1ec>)
 8010b92:	f7ef fbad 	bl	80002f0 <memchr>
 8010b96:	9a04      	ldr	r2, [sp, #16]
 8010b98:	b9d8      	cbnz	r0, 8010bd2 <_svfiprintf_r+0xe6>
 8010b9a:	06d0      	lsls	r0, r2, #27
 8010b9c:	bf44      	itt	mi
 8010b9e:	2320      	movmi	r3, #32
 8010ba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ba4:	0711      	lsls	r1, r2, #28
 8010ba6:	bf44      	itt	mi
 8010ba8:	232b      	movmi	r3, #43	; 0x2b
 8010baa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010bae:	f89a 3000 	ldrb.w	r3, [sl]
 8010bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8010bb4:	d015      	beq.n	8010be2 <_svfiprintf_r+0xf6>
 8010bb6:	9a07      	ldr	r2, [sp, #28]
 8010bb8:	4654      	mov	r4, sl
 8010bba:	2000      	movs	r0, #0
 8010bbc:	f04f 0c0a 	mov.w	ip, #10
 8010bc0:	4621      	mov	r1, r4
 8010bc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010bc6:	3b30      	subs	r3, #48	; 0x30
 8010bc8:	2b09      	cmp	r3, #9
 8010bca:	d94e      	bls.n	8010c6a <_svfiprintf_r+0x17e>
 8010bcc:	b1b0      	cbz	r0, 8010bfc <_svfiprintf_r+0x110>
 8010bce:	9207      	str	r2, [sp, #28]
 8010bd0:	e014      	b.n	8010bfc <_svfiprintf_r+0x110>
 8010bd2:	eba0 0308 	sub.w	r3, r0, r8
 8010bd6:	fa09 f303 	lsl.w	r3, r9, r3
 8010bda:	4313      	orrs	r3, r2
 8010bdc:	9304      	str	r3, [sp, #16]
 8010bde:	46a2      	mov	sl, r4
 8010be0:	e7d2      	b.n	8010b88 <_svfiprintf_r+0x9c>
 8010be2:	9b03      	ldr	r3, [sp, #12]
 8010be4:	1d19      	adds	r1, r3, #4
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	9103      	str	r1, [sp, #12]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	bfbb      	ittet	lt
 8010bee:	425b      	neglt	r3, r3
 8010bf0:	f042 0202 	orrlt.w	r2, r2, #2
 8010bf4:	9307      	strge	r3, [sp, #28]
 8010bf6:	9307      	strlt	r3, [sp, #28]
 8010bf8:	bfb8      	it	lt
 8010bfa:	9204      	strlt	r2, [sp, #16]
 8010bfc:	7823      	ldrb	r3, [r4, #0]
 8010bfe:	2b2e      	cmp	r3, #46	; 0x2e
 8010c00:	d10c      	bne.n	8010c1c <_svfiprintf_r+0x130>
 8010c02:	7863      	ldrb	r3, [r4, #1]
 8010c04:	2b2a      	cmp	r3, #42	; 0x2a
 8010c06:	d135      	bne.n	8010c74 <_svfiprintf_r+0x188>
 8010c08:	9b03      	ldr	r3, [sp, #12]
 8010c0a:	1d1a      	adds	r2, r3, #4
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	9203      	str	r2, [sp, #12]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	bfb8      	it	lt
 8010c14:	f04f 33ff 	movlt.w	r3, #4294967295
 8010c18:	3402      	adds	r4, #2
 8010c1a:	9305      	str	r3, [sp, #20]
 8010c1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010ce8 <_svfiprintf_r+0x1fc>
 8010c20:	7821      	ldrb	r1, [r4, #0]
 8010c22:	2203      	movs	r2, #3
 8010c24:	4650      	mov	r0, sl
 8010c26:	f7ef fb63 	bl	80002f0 <memchr>
 8010c2a:	b140      	cbz	r0, 8010c3e <_svfiprintf_r+0x152>
 8010c2c:	2340      	movs	r3, #64	; 0x40
 8010c2e:	eba0 000a 	sub.w	r0, r0, sl
 8010c32:	fa03 f000 	lsl.w	r0, r3, r0
 8010c36:	9b04      	ldr	r3, [sp, #16]
 8010c38:	4303      	orrs	r3, r0
 8010c3a:	3401      	adds	r4, #1
 8010c3c:	9304      	str	r3, [sp, #16]
 8010c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c42:	4826      	ldr	r0, [pc, #152]	; (8010cdc <_svfiprintf_r+0x1f0>)
 8010c44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c48:	2206      	movs	r2, #6
 8010c4a:	f7ef fb51 	bl	80002f0 <memchr>
 8010c4e:	2800      	cmp	r0, #0
 8010c50:	d038      	beq.n	8010cc4 <_svfiprintf_r+0x1d8>
 8010c52:	4b23      	ldr	r3, [pc, #140]	; (8010ce0 <_svfiprintf_r+0x1f4>)
 8010c54:	bb1b      	cbnz	r3, 8010c9e <_svfiprintf_r+0x1b2>
 8010c56:	9b03      	ldr	r3, [sp, #12]
 8010c58:	3307      	adds	r3, #7
 8010c5a:	f023 0307 	bic.w	r3, r3, #7
 8010c5e:	3308      	adds	r3, #8
 8010c60:	9303      	str	r3, [sp, #12]
 8010c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c64:	4433      	add	r3, r6
 8010c66:	9309      	str	r3, [sp, #36]	; 0x24
 8010c68:	e767      	b.n	8010b3a <_svfiprintf_r+0x4e>
 8010c6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c6e:	460c      	mov	r4, r1
 8010c70:	2001      	movs	r0, #1
 8010c72:	e7a5      	b.n	8010bc0 <_svfiprintf_r+0xd4>
 8010c74:	2300      	movs	r3, #0
 8010c76:	3401      	adds	r4, #1
 8010c78:	9305      	str	r3, [sp, #20]
 8010c7a:	4619      	mov	r1, r3
 8010c7c:	f04f 0c0a 	mov.w	ip, #10
 8010c80:	4620      	mov	r0, r4
 8010c82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c86:	3a30      	subs	r2, #48	; 0x30
 8010c88:	2a09      	cmp	r2, #9
 8010c8a:	d903      	bls.n	8010c94 <_svfiprintf_r+0x1a8>
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d0c5      	beq.n	8010c1c <_svfiprintf_r+0x130>
 8010c90:	9105      	str	r1, [sp, #20]
 8010c92:	e7c3      	b.n	8010c1c <_svfiprintf_r+0x130>
 8010c94:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c98:	4604      	mov	r4, r0
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	e7f0      	b.n	8010c80 <_svfiprintf_r+0x194>
 8010c9e:	ab03      	add	r3, sp, #12
 8010ca0:	9300      	str	r3, [sp, #0]
 8010ca2:	462a      	mov	r2, r5
 8010ca4:	4b0f      	ldr	r3, [pc, #60]	; (8010ce4 <_svfiprintf_r+0x1f8>)
 8010ca6:	a904      	add	r1, sp, #16
 8010ca8:	4638      	mov	r0, r7
 8010caa:	f3af 8000 	nop.w
 8010cae:	1c42      	adds	r2, r0, #1
 8010cb0:	4606      	mov	r6, r0
 8010cb2:	d1d6      	bne.n	8010c62 <_svfiprintf_r+0x176>
 8010cb4:	89ab      	ldrh	r3, [r5, #12]
 8010cb6:	065b      	lsls	r3, r3, #25
 8010cb8:	f53f af2c 	bmi.w	8010b14 <_svfiprintf_r+0x28>
 8010cbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010cbe:	b01d      	add	sp, #116	; 0x74
 8010cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cc4:	ab03      	add	r3, sp, #12
 8010cc6:	9300      	str	r3, [sp, #0]
 8010cc8:	462a      	mov	r2, r5
 8010cca:	4b06      	ldr	r3, [pc, #24]	; (8010ce4 <_svfiprintf_r+0x1f8>)
 8010ccc:	a904      	add	r1, sp, #16
 8010cce:	4638      	mov	r0, r7
 8010cd0:	f000 f87a 	bl	8010dc8 <_printf_i>
 8010cd4:	e7eb      	b.n	8010cae <_svfiprintf_r+0x1c2>
 8010cd6:	bf00      	nop
 8010cd8:	08011f8c 	.word	0x08011f8c
 8010cdc:	08011f96 	.word	0x08011f96
 8010ce0:	00000000 	.word	0x00000000
 8010ce4:	08010a35 	.word	0x08010a35
 8010ce8:	08011f92 	.word	0x08011f92

08010cec <_printf_common>:
 8010cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cf0:	4616      	mov	r6, r2
 8010cf2:	4699      	mov	r9, r3
 8010cf4:	688a      	ldr	r2, [r1, #8]
 8010cf6:	690b      	ldr	r3, [r1, #16]
 8010cf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010cfc:	4293      	cmp	r3, r2
 8010cfe:	bfb8      	it	lt
 8010d00:	4613      	movlt	r3, r2
 8010d02:	6033      	str	r3, [r6, #0]
 8010d04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010d08:	4607      	mov	r7, r0
 8010d0a:	460c      	mov	r4, r1
 8010d0c:	b10a      	cbz	r2, 8010d12 <_printf_common+0x26>
 8010d0e:	3301      	adds	r3, #1
 8010d10:	6033      	str	r3, [r6, #0]
 8010d12:	6823      	ldr	r3, [r4, #0]
 8010d14:	0699      	lsls	r1, r3, #26
 8010d16:	bf42      	ittt	mi
 8010d18:	6833      	ldrmi	r3, [r6, #0]
 8010d1a:	3302      	addmi	r3, #2
 8010d1c:	6033      	strmi	r3, [r6, #0]
 8010d1e:	6825      	ldr	r5, [r4, #0]
 8010d20:	f015 0506 	ands.w	r5, r5, #6
 8010d24:	d106      	bne.n	8010d34 <_printf_common+0x48>
 8010d26:	f104 0a19 	add.w	sl, r4, #25
 8010d2a:	68e3      	ldr	r3, [r4, #12]
 8010d2c:	6832      	ldr	r2, [r6, #0]
 8010d2e:	1a9b      	subs	r3, r3, r2
 8010d30:	42ab      	cmp	r3, r5
 8010d32:	dc26      	bgt.n	8010d82 <_printf_common+0x96>
 8010d34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010d38:	1e13      	subs	r3, r2, #0
 8010d3a:	6822      	ldr	r2, [r4, #0]
 8010d3c:	bf18      	it	ne
 8010d3e:	2301      	movne	r3, #1
 8010d40:	0692      	lsls	r2, r2, #26
 8010d42:	d42b      	bmi.n	8010d9c <_printf_common+0xb0>
 8010d44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010d48:	4649      	mov	r1, r9
 8010d4a:	4638      	mov	r0, r7
 8010d4c:	47c0      	blx	r8
 8010d4e:	3001      	adds	r0, #1
 8010d50:	d01e      	beq.n	8010d90 <_printf_common+0xa4>
 8010d52:	6823      	ldr	r3, [r4, #0]
 8010d54:	68e5      	ldr	r5, [r4, #12]
 8010d56:	6832      	ldr	r2, [r6, #0]
 8010d58:	f003 0306 	and.w	r3, r3, #6
 8010d5c:	2b04      	cmp	r3, #4
 8010d5e:	bf08      	it	eq
 8010d60:	1aad      	subeq	r5, r5, r2
 8010d62:	68a3      	ldr	r3, [r4, #8]
 8010d64:	6922      	ldr	r2, [r4, #16]
 8010d66:	bf0c      	ite	eq
 8010d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010d6c:	2500      	movne	r5, #0
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	bfc4      	itt	gt
 8010d72:	1a9b      	subgt	r3, r3, r2
 8010d74:	18ed      	addgt	r5, r5, r3
 8010d76:	2600      	movs	r6, #0
 8010d78:	341a      	adds	r4, #26
 8010d7a:	42b5      	cmp	r5, r6
 8010d7c:	d11a      	bne.n	8010db4 <_printf_common+0xc8>
 8010d7e:	2000      	movs	r0, #0
 8010d80:	e008      	b.n	8010d94 <_printf_common+0xa8>
 8010d82:	2301      	movs	r3, #1
 8010d84:	4652      	mov	r2, sl
 8010d86:	4649      	mov	r1, r9
 8010d88:	4638      	mov	r0, r7
 8010d8a:	47c0      	blx	r8
 8010d8c:	3001      	adds	r0, #1
 8010d8e:	d103      	bne.n	8010d98 <_printf_common+0xac>
 8010d90:	f04f 30ff 	mov.w	r0, #4294967295
 8010d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d98:	3501      	adds	r5, #1
 8010d9a:	e7c6      	b.n	8010d2a <_printf_common+0x3e>
 8010d9c:	18e1      	adds	r1, r4, r3
 8010d9e:	1c5a      	adds	r2, r3, #1
 8010da0:	2030      	movs	r0, #48	; 0x30
 8010da2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010da6:	4422      	add	r2, r4
 8010da8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010dac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010db0:	3302      	adds	r3, #2
 8010db2:	e7c7      	b.n	8010d44 <_printf_common+0x58>
 8010db4:	2301      	movs	r3, #1
 8010db6:	4622      	mov	r2, r4
 8010db8:	4649      	mov	r1, r9
 8010dba:	4638      	mov	r0, r7
 8010dbc:	47c0      	blx	r8
 8010dbe:	3001      	adds	r0, #1
 8010dc0:	d0e6      	beq.n	8010d90 <_printf_common+0xa4>
 8010dc2:	3601      	adds	r6, #1
 8010dc4:	e7d9      	b.n	8010d7a <_printf_common+0x8e>
	...

08010dc8 <_printf_i>:
 8010dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010dcc:	460c      	mov	r4, r1
 8010dce:	4691      	mov	r9, r2
 8010dd0:	7e27      	ldrb	r7, [r4, #24]
 8010dd2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010dd4:	2f78      	cmp	r7, #120	; 0x78
 8010dd6:	4680      	mov	r8, r0
 8010dd8:	469a      	mov	sl, r3
 8010dda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010dde:	d807      	bhi.n	8010df0 <_printf_i+0x28>
 8010de0:	2f62      	cmp	r7, #98	; 0x62
 8010de2:	d80a      	bhi.n	8010dfa <_printf_i+0x32>
 8010de4:	2f00      	cmp	r7, #0
 8010de6:	f000 80d8 	beq.w	8010f9a <_printf_i+0x1d2>
 8010dea:	2f58      	cmp	r7, #88	; 0x58
 8010dec:	f000 80a3 	beq.w	8010f36 <_printf_i+0x16e>
 8010df0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010df4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010df8:	e03a      	b.n	8010e70 <_printf_i+0xa8>
 8010dfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010dfe:	2b15      	cmp	r3, #21
 8010e00:	d8f6      	bhi.n	8010df0 <_printf_i+0x28>
 8010e02:	a001      	add	r0, pc, #4	; (adr r0, 8010e08 <_printf_i+0x40>)
 8010e04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010e08:	08010e61 	.word	0x08010e61
 8010e0c:	08010e75 	.word	0x08010e75
 8010e10:	08010df1 	.word	0x08010df1
 8010e14:	08010df1 	.word	0x08010df1
 8010e18:	08010df1 	.word	0x08010df1
 8010e1c:	08010df1 	.word	0x08010df1
 8010e20:	08010e75 	.word	0x08010e75
 8010e24:	08010df1 	.word	0x08010df1
 8010e28:	08010df1 	.word	0x08010df1
 8010e2c:	08010df1 	.word	0x08010df1
 8010e30:	08010df1 	.word	0x08010df1
 8010e34:	08010f81 	.word	0x08010f81
 8010e38:	08010ea5 	.word	0x08010ea5
 8010e3c:	08010f63 	.word	0x08010f63
 8010e40:	08010df1 	.word	0x08010df1
 8010e44:	08010df1 	.word	0x08010df1
 8010e48:	08010fa3 	.word	0x08010fa3
 8010e4c:	08010df1 	.word	0x08010df1
 8010e50:	08010ea5 	.word	0x08010ea5
 8010e54:	08010df1 	.word	0x08010df1
 8010e58:	08010df1 	.word	0x08010df1
 8010e5c:	08010f6b 	.word	0x08010f6b
 8010e60:	680b      	ldr	r3, [r1, #0]
 8010e62:	1d1a      	adds	r2, r3, #4
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	600a      	str	r2, [r1, #0]
 8010e68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010e6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010e70:	2301      	movs	r3, #1
 8010e72:	e0a3      	b.n	8010fbc <_printf_i+0x1f4>
 8010e74:	6825      	ldr	r5, [r4, #0]
 8010e76:	6808      	ldr	r0, [r1, #0]
 8010e78:	062e      	lsls	r6, r5, #24
 8010e7a:	f100 0304 	add.w	r3, r0, #4
 8010e7e:	d50a      	bpl.n	8010e96 <_printf_i+0xce>
 8010e80:	6805      	ldr	r5, [r0, #0]
 8010e82:	600b      	str	r3, [r1, #0]
 8010e84:	2d00      	cmp	r5, #0
 8010e86:	da03      	bge.n	8010e90 <_printf_i+0xc8>
 8010e88:	232d      	movs	r3, #45	; 0x2d
 8010e8a:	426d      	negs	r5, r5
 8010e8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e90:	485e      	ldr	r0, [pc, #376]	; (801100c <_printf_i+0x244>)
 8010e92:	230a      	movs	r3, #10
 8010e94:	e019      	b.n	8010eca <_printf_i+0x102>
 8010e96:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010e9a:	6805      	ldr	r5, [r0, #0]
 8010e9c:	600b      	str	r3, [r1, #0]
 8010e9e:	bf18      	it	ne
 8010ea0:	b22d      	sxthne	r5, r5
 8010ea2:	e7ef      	b.n	8010e84 <_printf_i+0xbc>
 8010ea4:	680b      	ldr	r3, [r1, #0]
 8010ea6:	6825      	ldr	r5, [r4, #0]
 8010ea8:	1d18      	adds	r0, r3, #4
 8010eaa:	6008      	str	r0, [r1, #0]
 8010eac:	0628      	lsls	r0, r5, #24
 8010eae:	d501      	bpl.n	8010eb4 <_printf_i+0xec>
 8010eb0:	681d      	ldr	r5, [r3, #0]
 8010eb2:	e002      	b.n	8010eba <_printf_i+0xf2>
 8010eb4:	0669      	lsls	r1, r5, #25
 8010eb6:	d5fb      	bpl.n	8010eb0 <_printf_i+0xe8>
 8010eb8:	881d      	ldrh	r5, [r3, #0]
 8010eba:	4854      	ldr	r0, [pc, #336]	; (801100c <_printf_i+0x244>)
 8010ebc:	2f6f      	cmp	r7, #111	; 0x6f
 8010ebe:	bf0c      	ite	eq
 8010ec0:	2308      	moveq	r3, #8
 8010ec2:	230a      	movne	r3, #10
 8010ec4:	2100      	movs	r1, #0
 8010ec6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010eca:	6866      	ldr	r6, [r4, #4]
 8010ecc:	60a6      	str	r6, [r4, #8]
 8010ece:	2e00      	cmp	r6, #0
 8010ed0:	bfa2      	ittt	ge
 8010ed2:	6821      	ldrge	r1, [r4, #0]
 8010ed4:	f021 0104 	bicge.w	r1, r1, #4
 8010ed8:	6021      	strge	r1, [r4, #0]
 8010eda:	b90d      	cbnz	r5, 8010ee0 <_printf_i+0x118>
 8010edc:	2e00      	cmp	r6, #0
 8010ede:	d04d      	beq.n	8010f7c <_printf_i+0x1b4>
 8010ee0:	4616      	mov	r6, r2
 8010ee2:	fbb5 f1f3 	udiv	r1, r5, r3
 8010ee6:	fb03 5711 	mls	r7, r3, r1, r5
 8010eea:	5dc7      	ldrb	r7, [r0, r7]
 8010eec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010ef0:	462f      	mov	r7, r5
 8010ef2:	42bb      	cmp	r3, r7
 8010ef4:	460d      	mov	r5, r1
 8010ef6:	d9f4      	bls.n	8010ee2 <_printf_i+0x11a>
 8010ef8:	2b08      	cmp	r3, #8
 8010efa:	d10b      	bne.n	8010f14 <_printf_i+0x14c>
 8010efc:	6823      	ldr	r3, [r4, #0]
 8010efe:	07df      	lsls	r7, r3, #31
 8010f00:	d508      	bpl.n	8010f14 <_printf_i+0x14c>
 8010f02:	6923      	ldr	r3, [r4, #16]
 8010f04:	6861      	ldr	r1, [r4, #4]
 8010f06:	4299      	cmp	r1, r3
 8010f08:	bfde      	ittt	le
 8010f0a:	2330      	movle	r3, #48	; 0x30
 8010f0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010f10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010f14:	1b92      	subs	r2, r2, r6
 8010f16:	6122      	str	r2, [r4, #16]
 8010f18:	f8cd a000 	str.w	sl, [sp]
 8010f1c:	464b      	mov	r3, r9
 8010f1e:	aa03      	add	r2, sp, #12
 8010f20:	4621      	mov	r1, r4
 8010f22:	4640      	mov	r0, r8
 8010f24:	f7ff fee2 	bl	8010cec <_printf_common>
 8010f28:	3001      	adds	r0, #1
 8010f2a:	d14c      	bne.n	8010fc6 <_printf_i+0x1fe>
 8010f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f30:	b004      	add	sp, #16
 8010f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f36:	4835      	ldr	r0, [pc, #212]	; (801100c <_printf_i+0x244>)
 8010f38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010f3c:	6823      	ldr	r3, [r4, #0]
 8010f3e:	680e      	ldr	r6, [r1, #0]
 8010f40:	061f      	lsls	r7, r3, #24
 8010f42:	f856 5b04 	ldr.w	r5, [r6], #4
 8010f46:	600e      	str	r6, [r1, #0]
 8010f48:	d514      	bpl.n	8010f74 <_printf_i+0x1ac>
 8010f4a:	07d9      	lsls	r1, r3, #31
 8010f4c:	bf44      	itt	mi
 8010f4e:	f043 0320 	orrmi.w	r3, r3, #32
 8010f52:	6023      	strmi	r3, [r4, #0]
 8010f54:	b91d      	cbnz	r5, 8010f5e <_printf_i+0x196>
 8010f56:	6823      	ldr	r3, [r4, #0]
 8010f58:	f023 0320 	bic.w	r3, r3, #32
 8010f5c:	6023      	str	r3, [r4, #0]
 8010f5e:	2310      	movs	r3, #16
 8010f60:	e7b0      	b.n	8010ec4 <_printf_i+0xfc>
 8010f62:	6823      	ldr	r3, [r4, #0]
 8010f64:	f043 0320 	orr.w	r3, r3, #32
 8010f68:	6023      	str	r3, [r4, #0]
 8010f6a:	2378      	movs	r3, #120	; 0x78
 8010f6c:	4828      	ldr	r0, [pc, #160]	; (8011010 <_printf_i+0x248>)
 8010f6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010f72:	e7e3      	b.n	8010f3c <_printf_i+0x174>
 8010f74:	065e      	lsls	r6, r3, #25
 8010f76:	bf48      	it	mi
 8010f78:	b2ad      	uxthmi	r5, r5
 8010f7a:	e7e6      	b.n	8010f4a <_printf_i+0x182>
 8010f7c:	4616      	mov	r6, r2
 8010f7e:	e7bb      	b.n	8010ef8 <_printf_i+0x130>
 8010f80:	680b      	ldr	r3, [r1, #0]
 8010f82:	6826      	ldr	r6, [r4, #0]
 8010f84:	6960      	ldr	r0, [r4, #20]
 8010f86:	1d1d      	adds	r5, r3, #4
 8010f88:	600d      	str	r5, [r1, #0]
 8010f8a:	0635      	lsls	r5, r6, #24
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	d501      	bpl.n	8010f94 <_printf_i+0x1cc>
 8010f90:	6018      	str	r0, [r3, #0]
 8010f92:	e002      	b.n	8010f9a <_printf_i+0x1d2>
 8010f94:	0671      	lsls	r1, r6, #25
 8010f96:	d5fb      	bpl.n	8010f90 <_printf_i+0x1c8>
 8010f98:	8018      	strh	r0, [r3, #0]
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	6123      	str	r3, [r4, #16]
 8010f9e:	4616      	mov	r6, r2
 8010fa0:	e7ba      	b.n	8010f18 <_printf_i+0x150>
 8010fa2:	680b      	ldr	r3, [r1, #0]
 8010fa4:	1d1a      	adds	r2, r3, #4
 8010fa6:	600a      	str	r2, [r1, #0]
 8010fa8:	681e      	ldr	r6, [r3, #0]
 8010faa:	6862      	ldr	r2, [r4, #4]
 8010fac:	2100      	movs	r1, #0
 8010fae:	4630      	mov	r0, r6
 8010fb0:	f7ef f99e 	bl	80002f0 <memchr>
 8010fb4:	b108      	cbz	r0, 8010fba <_printf_i+0x1f2>
 8010fb6:	1b80      	subs	r0, r0, r6
 8010fb8:	6060      	str	r0, [r4, #4]
 8010fba:	6863      	ldr	r3, [r4, #4]
 8010fbc:	6123      	str	r3, [r4, #16]
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fc4:	e7a8      	b.n	8010f18 <_printf_i+0x150>
 8010fc6:	6923      	ldr	r3, [r4, #16]
 8010fc8:	4632      	mov	r2, r6
 8010fca:	4649      	mov	r1, r9
 8010fcc:	4640      	mov	r0, r8
 8010fce:	47d0      	blx	sl
 8010fd0:	3001      	adds	r0, #1
 8010fd2:	d0ab      	beq.n	8010f2c <_printf_i+0x164>
 8010fd4:	6823      	ldr	r3, [r4, #0]
 8010fd6:	079b      	lsls	r3, r3, #30
 8010fd8:	d413      	bmi.n	8011002 <_printf_i+0x23a>
 8010fda:	68e0      	ldr	r0, [r4, #12]
 8010fdc:	9b03      	ldr	r3, [sp, #12]
 8010fde:	4298      	cmp	r0, r3
 8010fe0:	bfb8      	it	lt
 8010fe2:	4618      	movlt	r0, r3
 8010fe4:	e7a4      	b.n	8010f30 <_printf_i+0x168>
 8010fe6:	2301      	movs	r3, #1
 8010fe8:	4632      	mov	r2, r6
 8010fea:	4649      	mov	r1, r9
 8010fec:	4640      	mov	r0, r8
 8010fee:	47d0      	blx	sl
 8010ff0:	3001      	adds	r0, #1
 8010ff2:	d09b      	beq.n	8010f2c <_printf_i+0x164>
 8010ff4:	3501      	adds	r5, #1
 8010ff6:	68e3      	ldr	r3, [r4, #12]
 8010ff8:	9903      	ldr	r1, [sp, #12]
 8010ffa:	1a5b      	subs	r3, r3, r1
 8010ffc:	42ab      	cmp	r3, r5
 8010ffe:	dcf2      	bgt.n	8010fe6 <_printf_i+0x21e>
 8011000:	e7eb      	b.n	8010fda <_printf_i+0x212>
 8011002:	2500      	movs	r5, #0
 8011004:	f104 0619 	add.w	r6, r4, #25
 8011008:	e7f5      	b.n	8010ff6 <_printf_i+0x22e>
 801100a:	bf00      	nop
 801100c:	08011f9d 	.word	0x08011f9d
 8011010:	08011fae 	.word	0x08011fae

08011014 <__retarget_lock_acquire_recursive>:
 8011014:	4770      	bx	lr

08011016 <__retarget_lock_release_recursive>:
 8011016:	4770      	bx	lr

08011018 <memcpy>:
 8011018:	440a      	add	r2, r1
 801101a:	4291      	cmp	r1, r2
 801101c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011020:	d100      	bne.n	8011024 <memcpy+0xc>
 8011022:	4770      	bx	lr
 8011024:	b510      	push	{r4, lr}
 8011026:	f811 4b01 	ldrb.w	r4, [r1], #1
 801102a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801102e:	4291      	cmp	r1, r2
 8011030:	d1f9      	bne.n	8011026 <memcpy+0xe>
 8011032:	bd10      	pop	{r4, pc}

08011034 <memmove>:
 8011034:	4288      	cmp	r0, r1
 8011036:	b510      	push	{r4, lr}
 8011038:	eb01 0402 	add.w	r4, r1, r2
 801103c:	d902      	bls.n	8011044 <memmove+0x10>
 801103e:	4284      	cmp	r4, r0
 8011040:	4623      	mov	r3, r4
 8011042:	d807      	bhi.n	8011054 <memmove+0x20>
 8011044:	1e43      	subs	r3, r0, #1
 8011046:	42a1      	cmp	r1, r4
 8011048:	d008      	beq.n	801105c <memmove+0x28>
 801104a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801104e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011052:	e7f8      	b.n	8011046 <memmove+0x12>
 8011054:	4402      	add	r2, r0
 8011056:	4601      	mov	r1, r0
 8011058:	428a      	cmp	r2, r1
 801105a:	d100      	bne.n	801105e <memmove+0x2a>
 801105c:	bd10      	pop	{r4, pc}
 801105e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011066:	e7f7      	b.n	8011058 <memmove+0x24>

08011068 <_realloc_r>:
 8011068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801106a:	4607      	mov	r7, r0
 801106c:	4614      	mov	r4, r2
 801106e:	460e      	mov	r6, r1
 8011070:	b921      	cbnz	r1, 801107c <_realloc_r+0x14>
 8011072:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011076:	4611      	mov	r1, r2
 8011078:	f7ff bc26 	b.w	80108c8 <_malloc_r>
 801107c:	b922      	cbnz	r2, 8011088 <_realloc_r+0x20>
 801107e:	f7ff fbd3 	bl	8010828 <_free_r>
 8011082:	4625      	mov	r5, r4
 8011084:	4628      	mov	r0, r5
 8011086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011088:	f000 f814 	bl	80110b4 <_malloc_usable_size_r>
 801108c:	42a0      	cmp	r0, r4
 801108e:	d20f      	bcs.n	80110b0 <_realloc_r+0x48>
 8011090:	4621      	mov	r1, r4
 8011092:	4638      	mov	r0, r7
 8011094:	f7ff fc18 	bl	80108c8 <_malloc_r>
 8011098:	4605      	mov	r5, r0
 801109a:	2800      	cmp	r0, #0
 801109c:	d0f2      	beq.n	8011084 <_realloc_r+0x1c>
 801109e:	4631      	mov	r1, r6
 80110a0:	4622      	mov	r2, r4
 80110a2:	f7ff ffb9 	bl	8011018 <memcpy>
 80110a6:	4631      	mov	r1, r6
 80110a8:	4638      	mov	r0, r7
 80110aa:	f7ff fbbd 	bl	8010828 <_free_r>
 80110ae:	e7e9      	b.n	8011084 <_realloc_r+0x1c>
 80110b0:	4635      	mov	r5, r6
 80110b2:	e7e7      	b.n	8011084 <_realloc_r+0x1c>

080110b4 <_malloc_usable_size_r>:
 80110b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110b8:	1f18      	subs	r0, r3, #4
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	bfbc      	itt	lt
 80110be:	580b      	ldrlt	r3, [r1, r0]
 80110c0:	18c0      	addlt	r0, r0, r3
 80110c2:	4770      	bx	lr
 80110c4:	0000      	movs	r0, r0
	...

080110c8 <tan>:
 80110c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80110ca:	eeb0 7b40 	vmov.f64	d7, d0
 80110ce:	ee17 3a90 	vmov	r3, s15
 80110d2:	4a13      	ldr	r2, [pc, #76]	; (8011120 <tan+0x58>)
 80110d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80110d8:	4293      	cmp	r3, r2
 80110da:	dc05      	bgt.n	80110e8 <tan+0x20>
 80110dc:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8011118 <tan+0x50>
 80110e0:	2001      	movs	r0, #1
 80110e2:	f000 fbe1 	bl	80118a8 <__kernel_tan>
 80110e6:	e004      	b.n	80110f2 <tan+0x2a>
 80110e8:	4a0e      	ldr	r2, [pc, #56]	; (8011124 <tan+0x5c>)
 80110ea:	4293      	cmp	r3, r2
 80110ec:	dd04      	ble.n	80110f8 <tan+0x30>
 80110ee:	ee30 0b40 	vsub.f64	d0, d0, d0
 80110f2:	b005      	add	sp, #20
 80110f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80110f8:	4668      	mov	r0, sp
 80110fa:	f000 f815 	bl	8011128 <__ieee754_rem_pio2>
 80110fe:	0040      	lsls	r0, r0, #1
 8011100:	f000 0002 	and.w	r0, r0, #2
 8011104:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011108:	ed9d 0b00 	vldr	d0, [sp]
 801110c:	f1c0 0001 	rsb	r0, r0, #1
 8011110:	e7e7      	b.n	80110e2 <tan+0x1a>
 8011112:	bf00      	nop
 8011114:	f3af 8000 	nop.w
	...
 8011120:	3fe921fb 	.word	0x3fe921fb
 8011124:	7fefffff 	.word	0x7fefffff

08011128 <__ieee754_rem_pio2>:
 8011128:	b570      	push	{r4, r5, r6, lr}
 801112a:	eeb0 7b40 	vmov.f64	d7, d0
 801112e:	ee17 5a90 	vmov	r5, s15
 8011132:	4b97      	ldr	r3, [pc, #604]	; (8011390 <__ieee754_rem_pio2+0x268>)
 8011134:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011138:	429e      	cmp	r6, r3
 801113a:	b088      	sub	sp, #32
 801113c:	4604      	mov	r4, r0
 801113e:	dc07      	bgt.n	8011150 <__ieee754_rem_pio2+0x28>
 8011140:	2200      	movs	r2, #0
 8011142:	2300      	movs	r3, #0
 8011144:	ed84 0b00 	vstr	d0, [r4]
 8011148:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801114c:	2000      	movs	r0, #0
 801114e:	e01b      	b.n	8011188 <__ieee754_rem_pio2+0x60>
 8011150:	4b90      	ldr	r3, [pc, #576]	; (8011394 <__ieee754_rem_pio2+0x26c>)
 8011152:	429e      	cmp	r6, r3
 8011154:	dc3b      	bgt.n	80111ce <__ieee754_rem_pio2+0xa6>
 8011156:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801115a:	2d00      	cmp	r5, #0
 801115c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8011350 <__ieee754_rem_pio2+0x228>
 8011160:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8011164:	dd19      	ble.n	801119a <__ieee754_rem_pio2+0x72>
 8011166:	ee30 7b46 	vsub.f64	d7, d0, d6
 801116a:	429e      	cmp	r6, r3
 801116c:	d00e      	beq.n	801118c <__ieee754_rem_pio2+0x64>
 801116e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8011358 <__ieee754_rem_pio2+0x230>
 8011172:	ee37 5b46 	vsub.f64	d5, d7, d6
 8011176:	ee37 7b45 	vsub.f64	d7, d7, d5
 801117a:	ed84 5b00 	vstr	d5, [r4]
 801117e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011182:	ed84 7b02 	vstr	d7, [r4, #8]
 8011186:	2001      	movs	r0, #1
 8011188:	b008      	add	sp, #32
 801118a:	bd70      	pop	{r4, r5, r6, pc}
 801118c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8011360 <__ieee754_rem_pio2+0x238>
 8011190:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011194:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8011368 <__ieee754_rem_pio2+0x240>
 8011198:	e7eb      	b.n	8011172 <__ieee754_rem_pio2+0x4a>
 801119a:	429e      	cmp	r6, r3
 801119c:	ee30 7b06 	vadd.f64	d7, d0, d6
 80111a0:	d00e      	beq.n	80111c0 <__ieee754_rem_pio2+0x98>
 80111a2:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8011358 <__ieee754_rem_pio2+0x230>
 80111a6:	ee37 5b06 	vadd.f64	d5, d7, d6
 80111aa:	ee37 7b45 	vsub.f64	d7, d7, d5
 80111ae:	ed84 5b00 	vstr	d5, [r4]
 80111b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80111b6:	f04f 30ff 	mov.w	r0, #4294967295
 80111ba:	ed84 7b02 	vstr	d7, [r4, #8]
 80111be:	e7e3      	b.n	8011188 <__ieee754_rem_pio2+0x60>
 80111c0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8011360 <__ieee754_rem_pio2+0x238>
 80111c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80111c8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8011368 <__ieee754_rem_pio2+0x240>
 80111cc:	e7eb      	b.n	80111a6 <__ieee754_rem_pio2+0x7e>
 80111ce:	4b72      	ldr	r3, [pc, #456]	; (8011398 <__ieee754_rem_pio2+0x270>)
 80111d0:	429e      	cmp	r6, r3
 80111d2:	dc6e      	bgt.n	80112b2 <__ieee754_rem_pio2+0x18a>
 80111d4:	f000 fc78 	bl	8011ac8 <fabs>
 80111d8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80111dc:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8011370 <__ieee754_rem_pio2+0x248>
 80111e0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80111e4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80111e8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80111ec:	ee17 0a90 	vmov	r0, s15
 80111f0:	eeb1 4b45 	vneg.f64	d4, d5
 80111f4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8011350 <__ieee754_rem_pio2+0x228>
 80111f8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80111fc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8011358 <__ieee754_rem_pio2+0x230>
 8011200:	281f      	cmp	r0, #31
 8011202:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011206:	ee30 6b47 	vsub.f64	d6, d0, d7
 801120a:	dc08      	bgt.n	801121e <__ieee754_rem_pio2+0xf6>
 801120c:	4b63      	ldr	r3, [pc, #396]	; (801139c <__ieee754_rem_pio2+0x274>)
 801120e:	1e42      	subs	r2, r0, #1
 8011210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011214:	42b3      	cmp	r3, r6
 8011216:	d002      	beq.n	801121e <__ieee754_rem_pio2+0xf6>
 8011218:	ed84 6b00 	vstr	d6, [r4]
 801121c:	e024      	b.n	8011268 <__ieee754_rem_pio2+0x140>
 801121e:	ee16 3a90 	vmov	r3, s13
 8011222:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8011226:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801122a:	2b10      	cmp	r3, #16
 801122c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8011230:	ddf2      	ble.n	8011218 <__ieee754_rem_pio2+0xf0>
 8011232:	eeb0 6b40 	vmov.f64	d6, d0
 8011236:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8011360 <__ieee754_rem_pio2+0x238>
 801123a:	eea4 6b03 	vfma.f64	d6, d4, d3
 801123e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8011242:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011246:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8011368 <__ieee754_rem_pio2+0x240>
 801124a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801124e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8011252:	ee13 3a90 	vmov	r3, s7
 8011256:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801125a:	1ad3      	subs	r3, r2, r3
 801125c:	2b31      	cmp	r3, #49	; 0x31
 801125e:	dc17      	bgt.n	8011290 <__ieee754_rem_pio2+0x168>
 8011260:	eeb0 0b46 	vmov.f64	d0, d6
 8011264:	ed84 3b00 	vstr	d3, [r4]
 8011268:	ed94 6b00 	vldr	d6, [r4]
 801126c:	2d00      	cmp	r5, #0
 801126e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011272:	ee30 7b47 	vsub.f64	d7, d0, d7
 8011276:	ed84 7b02 	vstr	d7, [r4, #8]
 801127a:	da85      	bge.n	8011188 <__ieee754_rem_pio2+0x60>
 801127c:	eeb1 6b46 	vneg.f64	d6, d6
 8011280:	ed84 6b00 	vstr	d6, [r4]
 8011284:	eeb1 7b47 	vneg.f64	d7, d7
 8011288:	4240      	negs	r0, r0
 801128a:	ed84 7b02 	vstr	d7, [r4, #8]
 801128e:	e77b      	b.n	8011188 <__ieee754_rem_pio2+0x60>
 8011290:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8011378 <__ieee754_rem_pio2+0x250>
 8011294:	eeb0 0b46 	vmov.f64	d0, d6
 8011298:	eea4 0b03 	vfma.f64	d0, d4, d3
 801129c:	ee36 7b40 	vsub.f64	d7, d6, d0
 80112a0:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8011380 <__ieee754_rem_pio2+0x258>
 80112a4:	eea4 7b03 	vfma.f64	d7, d4, d3
 80112a8:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80112ac:	ee30 6b47 	vsub.f64	d6, d0, d7
 80112b0:	e7b2      	b.n	8011218 <__ieee754_rem_pio2+0xf0>
 80112b2:	4b3b      	ldr	r3, [pc, #236]	; (80113a0 <__ieee754_rem_pio2+0x278>)
 80112b4:	429e      	cmp	r6, r3
 80112b6:	dd06      	ble.n	80112c6 <__ieee754_rem_pio2+0x19e>
 80112b8:	ee30 7b40 	vsub.f64	d7, d0, d0
 80112bc:	ed80 7b02 	vstr	d7, [r0, #8]
 80112c0:	ed80 7b00 	vstr	d7, [r0]
 80112c4:	e742      	b.n	801114c <__ieee754_rem_pio2+0x24>
 80112c6:	1532      	asrs	r2, r6, #20
 80112c8:	ee10 0a10 	vmov	r0, s0
 80112cc:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80112d0:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80112d4:	ec41 0b17 	vmov	d7, r0, r1
 80112d8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80112dc:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8011388 <__ieee754_rem_pio2+0x260>
 80112e0:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80112e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80112e8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80112ec:	ee27 7b05 	vmul.f64	d7, d7, d5
 80112f0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80112f4:	a902      	add	r1, sp, #8
 80112f6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80112fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80112fe:	ed8d 6b04 	vstr	d6, [sp, #16]
 8011302:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011306:	ed8d 7b06 	vstr	d7, [sp, #24]
 801130a:	2603      	movs	r6, #3
 801130c:	4608      	mov	r0, r1
 801130e:	ed91 7b04 	vldr	d7, [r1, #16]
 8011312:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801131a:	4633      	mov	r3, r6
 801131c:	f1a1 0108 	sub.w	r1, r1, #8
 8011320:	f106 36ff 	add.w	r6, r6, #4294967295
 8011324:	d0f3      	beq.n	801130e <__ieee754_rem_pio2+0x1e6>
 8011326:	491f      	ldr	r1, [pc, #124]	; (80113a4 <__ieee754_rem_pio2+0x27c>)
 8011328:	9101      	str	r1, [sp, #4]
 801132a:	2102      	movs	r1, #2
 801132c:	9100      	str	r1, [sp, #0]
 801132e:	4621      	mov	r1, r4
 8011330:	f000 f83a 	bl	80113a8 <__kernel_rem_pio2>
 8011334:	2d00      	cmp	r5, #0
 8011336:	f6bf af27 	bge.w	8011188 <__ieee754_rem_pio2+0x60>
 801133a:	ed94 7b00 	vldr	d7, [r4]
 801133e:	eeb1 7b47 	vneg.f64	d7, d7
 8011342:	ed84 7b00 	vstr	d7, [r4]
 8011346:	ed94 7b02 	vldr	d7, [r4, #8]
 801134a:	e79b      	b.n	8011284 <__ieee754_rem_pio2+0x15c>
 801134c:	f3af 8000 	nop.w
 8011350:	54400000 	.word	0x54400000
 8011354:	3ff921fb 	.word	0x3ff921fb
 8011358:	1a626331 	.word	0x1a626331
 801135c:	3dd0b461 	.word	0x3dd0b461
 8011360:	1a600000 	.word	0x1a600000
 8011364:	3dd0b461 	.word	0x3dd0b461
 8011368:	2e037073 	.word	0x2e037073
 801136c:	3ba3198a 	.word	0x3ba3198a
 8011370:	6dc9c883 	.word	0x6dc9c883
 8011374:	3fe45f30 	.word	0x3fe45f30
 8011378:	2e000000 	.word	0x2e000000
 801137c:	3ba3198a 	.word	0x3ba3198a
 8011380:	252049c1 	.word	0x252049c1
 8011384:	397b839a 	.word	0x397b839a
 8011388:	00000000 	.word	0x00000000
 801138c:	41700000 	.word	0x41700000
 8011390:	3fe921fb 	.word	0x3fe921fb
 8011394:	4002d97b 	.word	0x4002d97b
 8011398:	413921fb 	.word	0x413921fb
 801139c:	08011fc0 	.word	0x08011fc0
 80113a0:	7fefffff 	.word	0x7fefffff
 80113a4:	08012040 	.word	0x08012040

080113a8 <__kernel_rem_pio2>:
 80113a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113ac:	ed2d 8b06 	vpush	{d8-d10}
 80113b0:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80113b4:	469b      	mov	fp, r3
 80113b6:	460f      	mov	r7, r1
 80113b8:	4bcf      	ldr	r3, [pc, #828]	; (80116f8 <__kernel_rem_pio2+0x350>)
 80113ba:	99a0      	ldr	r1, [sp, #640]	; 0x280
 80113bc:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 80113c0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80113c4:	9000      	str	r0, [sp, #0]
 80113c6:	f112 0f14 	cmn.w	r2, #20
 80113ca:	bfa8      	it	ge
 80113cc:	2318      	movge	r3, #24
 80113ce:	f10b 31ff 	add.w	r1, fp, #4294967295
 80113d2:	bfb8      	it	lt
 80113d4:	2300      	movlt	r3, #0
 80113d6:	f06f 0417 	mvn.w	r4, #23
 80113da:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 80116e0 <__kernel_rem_pio2+0x338>
 80113de:	bfa4      	itt	ge
 80113e0:	f1a2 0a03 	subge.w	sl, r2, #3
 80113e4:	fb9a f3f3 	sdivge	r3, sl, r3
 80113e8:	fb03 4404 	mla	r4, r3, r4, r4
 80113ec:	1a5d      	subs	r5, r3, r1
 80113ee:	4414      	add	r4, r2
 80113f0:	eb09 0601 	add.w	r6, r9, r1
 80113f4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 80113f8:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 80113fc:	2200      	movs	r2, #0
 80113fe:	42b2      	cmp	r2, r6
 8011400:	dd12      	ble.n	8011428 <__kernel_rem_pio2+0x80>
 8011402:	aa18      	add	r2, sp, #96	; 0x60
 8011404:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8011408:	460e      	mov	r6, r1
 801140a:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 801140e:	f1cb 0a01 	rsb	sl, fp, #1
 8011412:	eb0a 0006 	add.w	r0, sl, r6
 8011416:	4581      	cmp	r9, r0
 8011418:	db25      	blt.n	8011466 <__kernel_rem_pio2+0xbe>
 801141a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 80116e0 <__kernel_rem_pio2+0x338>
 801141e:	f8dd e000 	ldr.w	lr, [sp]
 8011422:	4615      	mov	r5, r2
 8011424:	2000      	movs	r0, #0
 8011426:	e015      	b.n	8011454 <__kernel_rem_pio2+0xac>
 8011428:	42d5      	cmn	r5, r2
 801142a:	d409      	bmi.n	8011440 <__kernel_rem_pio2+0x98>
 801142c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8011430:	ee07 0a90 	vmov	s15, r0
 8011434:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011438:	eca8 7b02 	vstmia	r8!, {d7}
 801143c:	3201      	adds	r2, #1
 801143e:	e7de      	b.n	80113fe <__kernel_rem_pio2+0x56>
 8011440:	eeb0 7b46 	vmov.f64	d7, d6
 8011444:	e7f8      	b.n	8011438 <__kernel_rem_pio2+0x90>
 8011446:	ecbe 5b02 	vldmia	lr!, {d5}
 801144a:	ed95 6b00 	vldr	d6, [r5]
 801144e:	3001      	adds	r0, #1
 8011450:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011454:	4288      	cmp	r0, r1
 8011456:	f1a5 0508 	sub.w	r5, r5, #8
 801145a:	ddf4      	ble.n	8011446 <__kernel_rem_pio2+0x9e>
 801145c:	eca8 7b02 	vstmia	r8!, {d7}
 8011460:	3208      	adds	r2, #8
 8011462:	3601      	adds	r6, #1
 8011464:	e7d5      	b.n	8011412 <__kernel_rem_pio2+0x6a>
 8011466:	aa04      	add	r2, sp, #16
 8011468:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 80116e8 <__kernel_rem_pio2+0x340>
 801146c:	ed9f aba0 	vldr	d10, [pc, #640]	; 80116f0 <__kernel_rem_pio2+0x348>
 8011470:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8011474:	9201      	str	r2, [sp, #4]
 8011476:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 801147a:	464e      	mov	r6, r9
 801147c:	ab90      	add	r3, sp, #576	; 0x240
 801147e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011482:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8011486:	ab04      	add	r3, sp, #16
 8011488:	4618      	mov	r0, r3
 801148a:	4632      	mov	r2, r6
 801148c:	2a00      	cmp	r2, #0
 801148e:	dc4e      	bgt.n	801152e <__kernel_rem_pio2+0x186>
 8011490:	4620      	mov	r0, r4
 8011492:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8011496:	f000 fb97 	bl	8011bc8 <scalbn>
 801149a:	eeb0 8b40 	vmov.f64	d8, d0
 801149e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80114a2:	ee28 0b00 	vmul.f64	d0, d8, d0
 80114a6:	f000 fb1b 	bl	8011ae0 <floor>
 80114aa:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80114ae:	eea0 8b47 	vfms.f64	d8, d0, d7
 80114b2:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80114b6:	2c00      	cmp	r4, #0
 80114b8:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80114bc:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 80114c0:	ee38 8b40 	vsub.f64	d8, d8, d0
 80114c4:	ee17 8a90 	vmov	r8, s15
 80114c8:	dd46      	ble.n	8011558 <__kernel_rem_pio2+0x1b0>
 80114ca:	1e70      	subs	r0, r6, #1
 80114cc:	aa04      	add	r2, sp, #16
 80114ce:	f1c4 0c18 	rsb	ip, r4, #24
 80114d2:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 80114d6:	fa45 f20c 	asr.w	r2, r5, ip
 80114da:	4490      	add	r8, r2
 80114dc:	fa02 f20c 	lsl.w	r2, r2, ip
 80114e0:	1aad      	subs	r5, r5, r2
 80114e2:	aa04      	add	r2, sp, #16
 80114e4:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 80114e8:	f1c4 0217 	rsb	r2, r4, #23
 80114ec:	4115      	asrs	r5, r2
 80114ee:	2d00      	cmp	r5, #0
 80114f0:	dd41      	ble.n	8011576 <__kernel_rem_pio2+0x1ce>
 80114f2:	f04f 0c00 	mov.w	ip, #0
 80114f6:	f108 0801 	add.w	r8, r8, #1
 80114fa:	4660      	mov	r0, ip
 80114fc:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8011500:	4566      	cmp	r6, ip
 8011502:	dc69      	bgt.n	80115d8 <__kernel_rem_pio2+0x230>
 8011504:	2c00      	cmp	r4, #0
 8011506:	dd03      	ble.n	8011510 <__kernel_rem_pio2+0x168>
 8011508:	2c01      	cmp	r4, #1
 801150a:	d076      	beq.n	80115fa <__kernel_rem_pio2+0x252>
 801150c:	2c02      	cmp	r4, #2
 801150e:	d07f      	beq.n	8011610 <__kernel_rem_pio2+0x268>
 8011510:	2d02      	cmp	r5, #2
 8011512:	d130      	bne.n	8011576 <__kernel_rem_pio2+0x1ce>
 8011514:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011518:	ee30 8b48 	vsub.f64	d8, d0, d8
 801151c:	b358      	cbz	r0, 8011576 <__kernel_rem_pio2+0x1ce>
 801151e:	4620      	mov	r0, r4
 8011520:	9102      	str	r1, [sp, #8]
 8011522:	f000 fb51 	bl	8011bc8 <scalbn>
 8011526:	9902      	ldr	r1, [sp, #8]
 8011528:	ee38 8b40 	vsub.f64	d8, d8, d0
 801152c:	e023      	b.n	8011576 <__kernel_rem_pio2+0x1ce>
 801152e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8011532:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011536:	3a01      	subs	r2, #1
 8011538:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801153c:	ad68      	add	r5, sp, #416	; 0x1a0
 801153e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8011542:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011546:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 801154a:	eca0 0a01 	vstmia	r0!, {s0}
 801154e:	ed95 0b00 	vldr	d0, [r5]
 8011552:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011556:	e799      	b.n	801148c <__kernel_rem_pio2+0xe4>
 8011558:	d105      	bne.n	8011566 <__kernel_rem_pio2+0x1be>
 801155a:	1e72      	subs	r2, r6, #1
 801155c:	a804      	add	r0, sp, #16
 801155e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8011562:	15ed      	asrs	r5, r5, #23
 8011564:	e7c3      	b.n	80114ee <__kernel_rem_pio2+0x146>
 8011566:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801156a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801156e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011572:	da2f      	bge.n	80115d4 <__kernel_rem_pio2+0x22c>
 8011574:	2500      	movs	r5, #0
 8011576:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801157a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801157e:	f040 8087 	bne.w	8011690 <__kernel_rem_pio2+0x2e8>
 8011582:	1e73      	subs	r3, r6, #1
 8011584:	4618      	mov	r0, r3
 8011586:	f04f 0c00 	mov.w	ip, #0
 801158a:	4548      	cmp	r0, r9
 801158c:	da47      	bge.n	801161e <__kernel_rem_pio2+0x276>
 801158e:	f1bc 0f00 	cmp.w	ip, #0
 8011592:	d070      	beq.n	8011676 <__kernel_rem_pio2+0x2ce>
 8011594:	aa04      	add	r2, sp, #16
 8011596:	3c18      	subs	r4, #24
 8011598:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801159c:	2a00      	cmp	r2, #0
 801159e:	d075      	beq.n	801168c <__kernel_rem_pio2+0x2e4>
 80115a0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80115a4:	4620      	mov	r0, r4
 80115a6:	9300      	str	r3, [sp, #0]
 80115a8:	f000 fb0e 	bl	8011bc8 <scalbn>
 80115ac:	9b00      	ldr	r3, [sp, #0]
 80115ae:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80116e8 <__kernel_rem_pio2+0x340>
 80115b2:	461a      	mov	r2, r3
 80115b4:	2a00      	cmp	r2, #0
 80115b6:	f280 80ac 	bge.w	8011712 <__kernel_rem_pio2+0x36a>
 80115ba:	4619      	mov	r1, r3
 80115bc:	2000      	movs	r0, #0
 80115be:	2900      	cmp	r1, #0
 80115c0:	f2c0 80cd 	blt.w	801175e <__kernel_rem_pio2+0x3b6>
 80115c4:	aa68      	add	r2, sp, #416	; 0x1a0
 80115c6:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 80115ca:	ed9f 7b45 	vldr	d7, [pc, #276]	; 80116e0 <__kernel_rem_pio2+0x338>
 80115ce:	4e4b      	ldr	r6, [pc, #300]	; (80116fc <__kernel_rem_pio2+0x354>)
 80115d0:	2200      	movs	r2, #0
 80115d2:	e0b8      	b.n	8011746 <__kernel_rem_pio2+0x39e>
 80115d4:	2502      	movs	r5, #2
 80115d6:	e78c      	b.n	80114f2 <__kernel_rem_pio2+0x14a>
 80115d8:	681a      	ldr	r2, [r3, #0]
 80115da:	b948      	cbnz	r0, 80115f0 <__kernel_rem_pio2+0x248>
 80115dc:	b11a      	cbz	r2, 80115e6 <__kernel_rem_pio2+0x23e>
 80115de:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80115e2:	601a      	str	r2, [r3, #0]
 80115e4:	2201      	movs	r2, #1
 80115e6:	f10c 0c01 	add.w	ip, ip, #1
 80115ea:	3304      	adds	r3, #4
 80115ec:	4610      	mov	r0, r2
 80115ee:	e787      	b.n	8011500 <__kernel_rem_pio2+0x158>
 80115f0:	ebae 0202 	sub.w	r2, lr, r2
 80115f4:	601a      	str	r2, [r3, #0]
 80115f6:	4602      	mov	r2, r0
 80115f8:	e7f5      	b.n	80115e6 <__kernel_rem_pio2+0x23e>
 80115fa:	1e72      	subs	r2, r6, #1
 80115fc:	ab04      	add	r3, sp, #16
 80115fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011602:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011606:	f10d 0c10 	add.w	ip, sp, #16
 801160a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 801160e:	e77f      	b.n	8011510 <__kernel_rem_pio2+0x168>
 8011610:	1e72      	subs	r2, r6, #1
 8011612:	ab04      	add	r3, sp, #16
 8011614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011618:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801161c:	e7f3      	b.n	8011606 <__kernel_rem_pio2+0x25e>
 801161e:	aa04      	add	r2, sp, #16
 8011620:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8011624:	3801      	subs	r0, #1
 8011626:	ea4c 0c02 	orr.w	ip, ip, r2
 801162a:	e7ae      	b.n	801158a <__kernel_rem_pio2+0x1e2>
 801162c:	3001      	adds	r0, #1
 801162e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011632:	2a00      	cmp	r2, #0
 8011634:	d0fa      	beq.n	801162c <__kernel_rem_pio2+0x284>
 8011636:	eb06 020b 	add.w	r2, r6, fp
 801163a:	ad18      	add	r5, sp, #96	; 0x60
 801163c:	1c73      	adds	r3, r6, #1
 801163e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8011642:	4406      	add	r6, r0
 8011644:	429e      	cmp	r6, r3
 8011646:	f6ff af19 	blt.w	801147c <__kernel_rem_pio2+0xd4>
 801164a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 801164e:	9d00      	ldr	r5, [sp, #0]
 8011650:	ee07 0a90 	vmov	s15, r0
 8011654:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011658:	2000      	movs	r0, #0
 801165a:	eca2 7b02 	vstmia	r2!, {d7}
 801165e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80116e0 <__kernel_rem_pio2+0x338>
 8011662:	4694      	mov	ip, r2
 8011664:	4288      	cmp	r0, r1
 8011666:	dd09      	ble.n	801167c <__kernel_rem_pio2+0x2d4>
 8011668:	a868      	add	r0, sp, #416	; 0x1a0
 801166a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 801166e:	ed80 7b00 	vstr	d7, [r0]
 8011672:	3301      	adds	r3, #1
 8011674:	e7e6      	b.n	8011644 <__kernel_rem_pio2+0x29c>
 8011676:	9b01      	ldr	r3, [sp, #4]
 8011678:	2001      	movs	r0, #1
 801167a:	e7d8      	b.n	801162e <__kernel_rem_pio2+0x286>
 801167c:	ecb5 5b02 	vldmia	r5!, {d5}
 8011680:	ed3c 6b02 	vldmdb	ip!, {d6}
 8011684:	3001      	adds	r0, #1
 8011686:	eea5 7b06 	vfma.f64	d7, d5, d6
 801168a:	e7eb      	b.n	8011664 <__kernel_rem_pio2+0x2bc>
 801168c:	3b01      	subs	r3, #1
 801168e:	e781      	b.n	8011594 <__kernel_rem_pio2+0x1ec>
 8011690:	4260      	negs	r0, r4
 8011692:	eeb0 0b48 	vmov.f64	d0, d8
 8011696:	f000 fa97 	bl	8011bc8 <scalbn>
 801169a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80116f0 <__kernel_rem_pio2+0x348>
 801169e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80116a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116a6:	db2b      	blt.n	8011700 <__kernel_rem_pio2+0x358>
 80116a8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80116e8 <__kernel_rem_pio2+0x340>
 80116ac:	ee20 7b07 	vmul.f64	d7, d0, d7
 80116b0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80116b4:	aa04      	add	r2, sp, #16
 80116b6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80116ba:	eea5 0b46 	vfms.f64	d0, d5, d6
 80116be:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80116c2:	a904      	add	r1, sp, #16
 80116c4:	ee10 3a10 	vmov	r3, s0
 80116c8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80116cc:	ee17 2a10 	vmov	r2, s14
 80116d0:	1c73      	adds	r3, r6, #1
 80116d2:	3418      	adds	r4, #24
 80116d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80116d8:	e762      	b.n	80115a0 <__kernel_rem_pio2+0x1f8>
 80116da:	bf00      	nop
 80116dc:	f3af 8000 	nop.w
	...
 80116ec:	3e700000 	.word	0x3e700000
 80116f0:	00000000 	.word	0x00000000
 80116f4:	41700000 	.word	0x41700000
 80116f8:	08012188 	.word	0x08012188
 80116fc:	08012148 	.word	0x08012148
 8011700:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011704:	aa04      	add	r2, sp, #16
 8011706:	ee10 3a10 	vmov	r3, s0
 801170a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801170e:	4633      	mov	r3, r6
 8011710:	e746      	b.n	80115a0 <__kernel_rem_pio2+0x1f8>
 8011712:	a804      	add	r0, sp, #16
 8011714:	a968      	add	r1, sp, #416	; 0x1a0
 8011716:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801171a:	9000      	str	r0, [sp, #0]
 801171c:	ee07 0a90 	vmov	s15, r0
 8011720:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011724:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011728:	3a01      	subs	r2, #1
 801172a:	ee27 7b00 	vmul.f64	d7, d7, d0
 801172e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8011732:	ed81 7b00 	vstr	d7, [r1]
 8011736:	e73d      	b.n	80115b4 <__kernel_rem_pio2+0x20c>
 8011738:	ecb6 5b02 	vldmia	r6!, {d5}
 801173c:	ecb4 6b02 	vldmia	r4!, {d6}
 8011740:	3201      	adds	r2, #1
 8011742:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011746:	454a      	cmp	r2, r9
 8011748:	dc01      	bgt.n	801174e <__kernel_rem_pio2+0x3a6>
 801174a:	4290      	cmp	r0, r2
 801174c:	daf4      	bge.n	8011738 <__kernel_rem_pio2+0x390>
 801174e:	aa40      	add	r2, sp, #256	; 0x100
 8011750:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011754:	ed82 7b00 	vstr	d7, [r2]
 8011758:	3901      	subs	r1, #1
 801175a:	3001      	adds	r0, #1
 801175c:	e72f      	b.n	80115be <__kernel_rem_pio2+0x216>
 801175e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8011760:	2a02      	cmp	r2, #2
 8011762:	dc0a      	bgt.n	801177a <__kernel_rem_pio2+0x3d2>
 8011764:	2a00      	cmp	r2, #0
 8011766:	dc5a      	bgt.n	801181e <__kernel_rem_pio2+0x476>
 8011768:	d039      	beq.n	80117de <__kernel_rem_pio2+0x436>
 801176a:	f008 0007 	and.w	r0, r8, #7
 801176e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8011772:	ecbd 8b06 	vpop	{d8-d10}
 8011776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801177a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 801177c:	2a03      	cmp	r2, #3
 801177e:	d1f4      	bne.n	801176a <__kernel_rem_pio2+0x3c2>
 8011780:	aa40      	add	r2, sp, #256	; 0x100
 8011782:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011786:	4611      	mov	r1, r2
 8011788:	4618      	mov	r0, r3
 801178a:	2800      	cmp	r0, #0
 801178c:	f1a1 0108 	sub.w	r1, r1, #8
 8011790:	dc52      	bgt.n	8011838 <__kernel_rem_pio2+0x490>
 8011792:	4619      	mov	r1, r3
 8011794:	2901      	cmp	r1, #1
 8011796:	f1a2 0208 	sub.w	r2, r2, #8
 801179a:	dc5d      	bgt.n	8011858 <__kernel_rem_pio2+0x4b0>
 801179c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 80118a0 <__kernel_rem_pio2+0x4f8>
 80117a0:	2b01      	cmp	r3, #1
 80117a2:	dc69      	bgt.n	8011878 <__kernel_rem_pio2+0x4d0>
 80117a4:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 80117a8:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 80117ac:	2d00      	cmp	r5, #0
 80117ae:	d16c      	bne.n	801188a <__kernel_rem_pio2+0x4e2>
 80117b0:	ed87 5b00 	vstr	d5, [r7]
 80117b4:	ed87 6b02 	vstr	d6, [r7, #8]
 80117b8:	ed87 7b04 	vstr	d7, [r7, #16]
 80117bc:	e7d5      	b.n	801176a <__kernel_rem_pio2+0x3c2>
 80117be:	aa40      	add	r2, sp, #256	; 0x100
 80117c0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80117c4:	ed92 6b00 	vldr	d6, [r2]
 80117c8:	3b01      	subs	r3, #1
 80117ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	daf5      	bge.n	80117be <__kernel_rem_pio2+0x416>
 80117d2:	b10d      	cbz	r5, 80117d8 <__kernel_rem_pio2+0x430>
 80117d4:	eeb1 7b47 	vneg.f64	d7, d7
 80117d8:	ed87 7b00 	vstr	d7, [r7]
 80117dc:	e7c5      	b.n	801176a <__kernel_rem_pio2+0x3c2>
 80117de:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80118a0 <__kernel_rem_pio2+0x4f8>
 80117e2:	e7f4      	b.n	80117ce <__kernel_rem_pio2+0x426>
 80117e4:	a940      	add	r1, sp, #256	; 0x100
 80117e6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80117ea:	ed91 7b00 	vldr	d7, [r1]
 80117ee:	3a01      	subs	r2, #1
 80117f0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80117f4:	2a00      	cmp	r2, #0
 80117f6:	daf5      	bge.n	80117e4 <__kernel_rem_pio2+0x43c>
 80117f8:	b1ad      	cbz	r5, 8011826 <__kernel_rem_pio2+0x47e>
 80117fa:	eeb1 7b46 	vneg.f64	d7, d6
 80117fe:	ed87 7b00 	vstr	d7, [r7]
 8011802:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8011806:	a942      	add	r1, sp, #264	; 0x108
 8011808:	2201      	movs	r2, #1
 801180a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801180e:	4293      	cmp	r3, r2
 8011810:	da0c      	bge.n	801182c <__kernel_rem_pio2+0x484>
 8011812:	b10d      	cbz	r5, 8011818 <__kernel_rem_pio2+0x470>
 8011814:	eeb1 7b47 	vneg.f64	d7, d7
 8011818:	ed87 7b02 	vstr	d7, [r7, #8]
 801181c:	e7a5      	b.n	801176a <__kernel_rem_pio2+0x3c2>
 801181e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80118a0 <__kernel_rem_pio2+0x4f8>
 8011822:	461a      	mov	r2, r3
 8011824:	e7e6      	b.n	80117f4 <__kernel_rem_pio2+0x44c>
 8011826:	eeb0 7b46 	vmov.f64	d7, d6
 801182a:	e7e8      	b.n	80117fe <__kernel_rem_pio2+0x456>
 801182c:	ecb1 6b02 	vldmia	r1!, {d6}
 8011830:	3201      	adds	r2, #1
 8011832:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011836:	e7ea      	b.n	801180e <__kernel_rem_pio2+0x466>
 8011838:	ed91 7b00 	vldr	d7, [r1]
 801183c:	ed91 5b02 	vldr	d5, [r1, #8]
 8011840:	3801      	subs	r0, #1
 8011842:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011846:	ee37 7b46 	vsub.f64	d7, d7, d6
 801184a:	ed81 6b00 	vstr	d6, [r1]
 801184e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011852:	ed81 7b02 	vstr	d7, [r1, #8]
 8011856:	e798      	b.n	801178a <__kernel_rem_pio2+0x3e2>
 8011858:	ed92 7b00 	vldr	d7, [r2]
 801185c:	ed92 5b02 	vldr	d5, [r2, #8]
 8011860:	3901      	subs	r1, #1
 8011862:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011866:	ee37 7b46 	vsub.f64	d7, d7, d6
 801186a:	ed82 6b00 	vstr	d6, [r2]
 801186e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011872:	ed82 7b02 	vstr	d7, [r2, #8]
 8011876:	e78d      	b.n	8011794 <__kernel_rem_pio2+0x3ec>
 8011878:	aa40      	add	r2, sp, #256	; 0x100
 801187a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801187e:	ed92 6b00 	vldr	d6, [r2]
 8011882:	3b01      	subs	r3, #1
 8011884:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011888:	e78a      	b.n	80117a0 <__kernel_rem_pio2+0x3f8>
 801188a:	eeb1 5b45 	vneg.f64	d5, d5
 801188e:	eeb1 6b46 	vneg.f64	d6, d6
 8011892:	ed87 5b00 	vstr	d5, [r7]
 8011896:	eeb1 7b47 	vneg.f64	d7, d7
 801189a:	ed87 6b02 	vstr	d6, [r7, #8]
 801189e:	e78b      	b.n	80117b8 <__kernel_rem_pio2+0x410>
	...

080118a8 <__kernel_tan>:
 80118a8:	eeb0 7b40 	vmov.f64	d7, d0
 80118ac:	ee17 3a90 	vmov	r3, s15
 80118b0:	b507      	push	{r0, r1, r2, lr}
 80118b2:	4983      	ldr	r1, [pc, #524]	; (8011ac0 <__kernel_tan+0x218>)
 80118b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80118b8:	428a      	cmp	r2, r1
 80118ba:	dc1c      	bgt.n	80118f6 <__kernel_tan+0x4e>
 80118bc:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 80118c0:	ee16 1a90 	vmov	r1, s13
 80118c4:	bb69      	cbnz	r1, 8011922 <__kernel_tan+0x7a>
 80118c6:	ee10 1a10 	vmov	r1, s0
 80118ca:	1c43      	adds	r3, r0, #1
 80118cc:	430b      	orrs	r3, r1
 80118ce:	4313      	orrs	r3, r2
 80118d0:	d10a      	bne.n	80118e8 <__kernel_tan+0x40>
 80118d2:	f000 f8f9 	bl	8011ac8 <fabs>
 80118d6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80118da:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80118de:	eeb0 0b47 	vmov.f64	d0, d7
 80118e2:	b003      	add	sp, #12
 80118e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80118e8:	2801      	cmp	r0, #1
 80118ea:	d0f8      	beq.n	80118de <__kernel_tan+0x36>
 80118ec:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80118f0:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80118f4:	e7f3      	b.n	80118de <__kernel_tan+0x36>
 80118f6:	4973      	ldr	r1, [pc, #460]	; (8011ac4 <__kernel_tan+0x21c>)
 80118f8:	428a      	cmp	r2, r1
 80118fa:	dd12      	ble.n	8011922 <__kernel_tan+0x7a>
 80118fc:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8011a40 <__kernel_tan+0x198>
 8011900:	2b00      	cmp	r3, #0
 8011902:	bfb8      	it	lt
 8011904:	eeb1 7b40 	vneglt.f64	d7, d0
 8011908:	ee36 7b47 	vsub.f64	d7, d6, d7
 801190c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011a48 <__kernel_tan+0x1a0>
 8011910:	bfb8      	it	lt
 8011912:	eeb1 1b41 	vneglt.f64	d1, d1
 8011916:	ee36 1b41 	vsub.f64	d1, d6, d1
 801191a:	ee31 7b07 	vadd.f64	d7, d1, d7
 801191e:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 8011a50 <__kernel_tan+0x1a8>
 8011922:	ee27 5b07 	vmul.f64	d5, d7, d7
 8011926:	ee25 6b05 	vmul.f64	d6, d5, d5
 801192a:	ed9f 3b4b 	vldr	d3, [pc, #300]	; 8011a58 <__kernel_tan+0x1b0>
 801192e:	ed9f 4b4c 	vldr	d4, [pc, #304]	; 8011a60 <__kernel_tan+0x1b8>
 8011932:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011936:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 8011a68 <__kernel_tan+0x1c0>
 801193a:	eea4 3b06 	vfma.f64	d3, d4, d6
 801193e:	ed9f 4b4c 	vldr	d4, [pc, #304]	; 8011a70 <__kernel_tan+0x1c8>
 8011942:	eea3 4b06 	vfma.f64	d4, d3, d6
 8011946:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 8011a78 <__kernel_tan+0x1d0>
 801194a:	eea4 3b06 	vfma.f64	d3, d4, d6
 801194e:	ed9f 4b4c 	vldr	d4, [pc, #304]	; 8011a80 <__kernel_tan+0x1d8>
 8011952:	ed9f 2b4d 	vldr	d2, [pc, #308]	; 8011a88 <__kernel_tan+0x1e0>
 8011956:	eea3 4b06 	vfma.f64	d4, d3, d6
 801195a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8011a90 <__kernel_tan+0x1e8>
 801195e:	eea6 3b02 	vfma.f64	d3, d6, d2
 8011962:	ed9f 2b4d 	vldr	d2, [pc, #308]	; 8011a98 <__kernel_tan+0x1f0>
 8011966:	eea3 2b06 	vfma.f64	d2, d3, d6
 801196a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8011aa0 <__kernel_tan+0x1f8>
 801196e:	eea2 3b06 	vfma.f64	d3, d2, d6
 8011972:	ed9f 2b4d 	vldr	d2, [pc, #308]	; 8011aa8 <__kernel_tan+0x200>
 8011976:	eea3 2b06 	vfma.f64	d2, d3, d6
 801197a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8011ab0 <__kernel_tan+0x208>
 801197e:	4951      	ldr	r1, [pc, #324]	; (8011ac4 <__kernel_tan+0x21c>)
 8011980:	eea2 3b06 	vfma.f64	d3, d2, d6
 8011984:	eeb0 6b43 	vmov.f64	d6, d3
 8011988:	ee27 3b05 	vmul.f64	d3, d7, d5
 801198c:	eea6 4b05 	vfma.f64	d4, d6, d5
 8011990:	eeb0 6b41 	vmov.f64	d6, d1
 8011994:	eea4 6b03 	vfma.f64	d6, d4, d3
 8011998:	eea6 1b05 	vfma.f64	d1, d6, d5
 801199c:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8011ab8 <__kernel_tan+0x210>
 80119a0:	428a      	cmp	r2, r1
 80119a2:	eea3 1b06 	vfma.f64	d1, d3, d6
 80119a6:	ee37 6b01 	vadd.f64	d6, d7, d1
 80119aa:	ed8d 6b00 	vstr	d6, [sp]
 80119ae:	dd1f      	ble.n	80119f0 <__kernel_tan+0x148>
 80119b0:	ed9d 5b00 	vldr	d5, [sp]
 80119b4:	179b      	asrs	r3, r3, #30
 80119b6:	ee06 0a90 	vmov	s13, r0
 80119ba:	ee25 3b05 	vmul.f64	d3, d5, d5
 80119be:	f003 0302 	and.w	r3, r3, #2
 80119c2:	f1c3 0301 	rsb	r3, r3, #1
 80119c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80119ca:	ee35 4b06 	vadd.f64	d4, d5, d6
 80119ce:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80119d2:	ee35 1b41 	vsub.f64	d1, d5, d1
 80119d6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80119da:	ee37 7b41 	vsub.f64	d7, d7, d1
 80119de:	eea7 6b45 	vfms.f64	d6, d7, d5
 80119e2:	ee07 3a10 	vmov	s14, r3
 80119e6:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80119ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80119ee:	e776      	b.n	80118de <__kernel_tan+0x36>
 80119f0:	2801      	cmp	r0, #1
 80119f2:	d020      	beq.n	8011a36 <__kernel_tan+0x18e>
 80119f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80119f8:	ed9d 6b00 	vldr	d6, [sp]
 80119fc:	2000      	movs	r0, #0
 80119fe:	ec41 0b15 	vmov	d5, r0, r1
 8011a02:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011a06:	ee31 1b47 	vsub.f64	d1, d1, d7
 8011a0a:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8011a0e:	ee87 7b06 	vdiv.f64	d7, d7, d6
 8011a12:	ed8d 7b00 	vstr	d7, [sp]
 8011a16:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011a1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a1e:	4602      	mov	r2, r0
 8011a20:	ec43 2b17 	vmov	d7, r2, r3
 8011a24:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011a28:	ed9d 5b00 	vldr	d5, [sp]
 8011a2c:	eea1 6b07 	vfma.f64	d6, d1, d7
 8011a30:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011a34:	e753      	b.n	80118de <__kernel_tan+0x36>
 8011a36:	ed9d 7b00 	vldr	d7, [sp]
 8011a3a:	e750      	b.n	80118de <__kernel_tan+0x36>
 8011a3c:	f3af 8000 	nop.w
 8011a40:	54442d18 	.word	0x54442d18
 8011a44:	3fe921fb 	.word	0x3fe921fb
 8011a48:	33145c07 	.word	0x33145c07
 8011a4c:	3c81a626 	.word	0x3c81a626
	...
 8011a58:	db605373 	.word	0xdb605373
 8011a5c:	bef375cb 	.word	0xbef375cb
 8011a60:	a03792a6 	.word	0xa03792a6
 8011a64:	3f147e88 	.word	0x3f147e88
 8011a68:	f2f26501 	.word	0xf2f26501
 8011a6c:	3f4344d8 	.word	0x3f4344d8
 8011a70:	c9560328 	.word	0xc9560328
 8011a74:	3f6d6d22 	.word	0x3f6d6d22
 8011a78:	8406d637 	.word	0x8406d637
 8011a7c:	3f9664f4 	.word	0x3f9664f4
 8011a80:	1110fe7a 	.word	0x1110fe7a
 8011a84:	3fc11111 	.word	0x3fc11111
 8011a88:	74bf7ad4 	.word	0x74bf7ad4
 8011a8c:	3efb2a70 	.word	0x3efb2a70
 8011a90:	32f0a7e9 	.word	0x32f0a7e9
 8011a94:	3f12b80f 	.word	0x3f12b80f
 8011a98:	1a8d1068 	.word	0x1a8d1068
 8011a9c:	3f3026f7 	.word	0x3f3026f7
 8011aa0:	fee08315 	.word	0xfee08315
 8011aa4:	3f57dbc8 	.word	0x3f57dbc8
 8011aa8:	e96e8493 	.word	0xe96e8493
 8011aac:	3f8226e3 	.word	0x3f8226e3
 8011ab0:	1bb341fe 	.word	0x1bb341fe
 8011ab4:	3faba1ba 	.word	0x3faba1ba
 8011ab8:	55555563 	.word	0x55555563
 8011abc:	3fd55555 	.word	0x3fd55555
 8011ac0:	3e2fffff 	.word	0x3e2fffff
 8011ac4:	3fe59427 	.word	0x3fe59427

08011ac8 <fabs>:
 8011ac8:	ec51 0b10 	vmov	r0, r1, d0
 8011acc:	ee10 2a10 	vmov	r2, s0
 8011ad0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011ad4:	ec43 2b10 	vmov	d0, r2, r3
 8011ad8:	4770      	bx	lr
 8011ada:	0000      	movs	r0, r0
 8011adc:	0000      	movs	r0, r0
	...

08011ae0 <floor>:
 8011ae0:	ee10 1a90 	vmov	r1, s1
 8011ae4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011ae8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8011aec:	2b13      	cmp	r3, #19
 8011aee:	b530      	push	{r4, r5, lr}
 8011af0:	ee10 0a10 	vmov	r0, s0
 8011af4:	ee10 5a10 	vmov	r5, s0
 8011af8:	dc31      	bgt.n	8011b5e <floor+0x7e>
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	da15      	bge.n	8011b2a <floor+0x4a>
 8011afe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011bb8 <floor+0xd8>
 8011b02:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011b06:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b0e:	dd07      	ble.n	8011b20 <floor+0x40>
 8011b10:	2900      	cmp	r1, #0
 8011b12:	da4e      	bge.n	8011bb2 <floor+0xd2>
 8011b14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011b18:	4318      	orrs	r0, r3
 8011b1a:	d001      	beq.n	8011b20 <floor+0x40>
 8011b1c:	4928      	ldr	r1, [pc, #160]	; (8011bc0 <floor+0xe0>)
 8011b1e:	2000      	movs	r0, #0
 8011b20:	460b      	mov	r3, r1
 8011b22:	4602      	mov	r2, r0
 8011b24:	ec43 2b10 	vmov	d0, r2, r3
 8011b28:	e020      	b.n	8011b6c <floor+0x8c>
 8011b2a:	4a26      	ldr	r2, [pc, #152]	; (8011bc4 <floor+0xe4>)
 8011b2c:	411a      	asrs	r2, r3
 8011b2e:	ea01 0402 	and.w	r4, r1, r2
 8011b32:	4304      	orrs	r4, r0
 8011b34:	d01a      	beq.n	8011b6c <floor+0x8c>
 8011b36:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011bb8 <floor+0xd8>
 8011b3a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011b3e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b46:	ddeb      	ble.n	8011b20 <floor+0x40>
 8011b48:	2900      	cmp	r1, #0
 8011b4a:	bfbe      	ittt	lt
 8011b4c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011b50:	fa40 f303 	asrlt.w	r3, r0, r3
 8011b54:	18c9      	addlt	r1, r1, r3
 8011b56:	ea21 0102 	bic.w	r1, r1, r2
 8011b5a:	2000      	movs	r0, #0
 8011b5c:	e7e0      	b.n	8011b20 <floor+0x40>
 8011b5e:	2b33      	cmp	r3, #51	; 0x33
 8011b60:	dd05      	ble.n	8011b6e <floor+0x8e>
 8011b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011b66:	d101      	bne.n	8011b6c <floor+0x8c>
 8011b68:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011b6c:	bd30      	pop	{r4, r5, pc}
 8011b6e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8011b72:	f04f 32ff 	mov.w	r2, #4294967295
 8011b76:	40e2      	lsrs	r2, r4
 8011b78:	4202      	tst	r2, r0
 8011b7a:	d0f7      	beq.n	8011b6c <floor+0x8c>
 8011b7c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011bb8 <floor+0xd8>
 8011b80:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011b84:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b8c:	ddc8      	ble.n	8011b20 <floor+0x40>
 8011b8e:	2900      	cmp	r1, #0
 8011b90:	da02      	bge.n	8011b98 <floor+0xb8>
 8011b92:	2b14      	cmp	r3, #20
 8011b94:	d103      	bne.n	8011b9e <floor+0xbe>
 8011b96:	3101      	adds	r1, #1
 8011b98:	ea20 0002 	bic.w	r0, r0, r2
 8011b9c:	e7c0      	b.n	8011b20 <floor+0x40>
 8011b9e:	2401      	movs	r4, #1
 8011ba0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011ba4:	fa04 f303 	lsl.w	r3, r4, r3
 8011ba8:	4418      	add	r0, r3
 8011baa:	42a8      	cmp	r0, r5
 8011bac:	bf38      	it	cc
 8011bae:	1909      	addcc	r1, r1, r4
 8011bb0:	e7f2      	b.n	8011b98 <floor+0xb8>
 8011bb2:	2000      	movs	r0, #0
 8011bb4:	4601      	mov	r1, r0
 8011bb6:	e7b3      	b.n	8011b20 <floor+0x40>
 8011bb8:	8800759c 	.word	0x8800759c
 8011bbc:	7e37e43c 	.word	0x7e37e43c
 8011bc0:	bff00000 	.word	0xbff00000
 8011bc4:	000fffff 	.word	0x000fffff

08011bc8 <scalbn>:
 8011bc8:	b082      	sub	sp, #8
 8011bca:	ed8d 0b00 	vstr	d0, [sp]
 8011bce:	9b01      	ldr	r3, [sp, #4]
 8011bd0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011bd4:	b9a2      	cbnz	r2, 8011c00 <scalbn+0x38>
 8011bd6:	9a00      	ldr	r2, [sp, #0]
 8011bd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011bdc:	4313      	orrs	r3, r2
 8011bde:	d03a      	beq.n	8011c56 <scalbn+0x8e>
 8011be0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8011cb8 <scalbn+0xf0>
 8011be4:	4b40      	ldr	r3, [pc, #256]	; (8011ce8 <scalbn+0x120>)
 8011be6:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011bea:	4298      	cmp	r0, r3
 8011bec:	ed8d 7b00 	vstr	d7, [sp]
 8011bf0:	da11      	bge.n	8011c16 <scalbn+0x4e>
 8011bf2:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8011cc0 <scalbn+0xf8>
 8011bf6:	ed9d 6b00 	vldr	d6, [sp]
 8011bfa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011bfe:	e007      	b.n	8011c10 <scalbn+0x48>
 8011c00:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011c04:	428a      	cmp	r2, r1
 8011c06:	d10a      	bne.n	8011c1e <scalbn+0x56>
 8011c08:	ed9d 7b00 	vldr	d7, [sp]
 8011c0c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011c10:	ed8d 7b00 	vstr	d7, [sp]
 8011c14:	e01f      	b.n	8011c56 <scalbn+0x8e>
 8011c16:	9b01      	ldr	r3, [sp, #4]
 8011c18:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011c1c:	3a36      	subs	r2, #54	; 0x36
 8011c1e:	4402      	add	r2, r0
 8011c20:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011c24:	428a      	cmp	r2, r1
 8011c26:	dd0a      	ble.n	8011c3e <scalbn+0x76>
 8011c28:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8011cc8 <scalbn+0x100>
 8011c2c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8011cd0 <scalbn+0x108>
 8011c30:	eeb0 6b47 	vmov.f64	d6, d7
 8011c34:	9b01      	ldr	r3, [sp, #4]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011c3c:	e7dd      	b.n	8011bfa <scalbn+0x32>
 8011c3e:	2a00      	cmp	r2, #0
 8011c40:	dd0d      	ble.n	8011c5e <scalbn+0x96>
 8011c42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011c4a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011c4e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011c52:	e9cd 0100 	strd	r0, r1, [sp]
 8011c56:	ed9d 0b00 	vldr	d0, [sp]
 8011c5a:	b002      	add	sp, #8
 8011c5c:	4770      	bx	lr
 8011c5e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011c62:	da18      	bge.n	8011c96 <scalbn+0xce>
 8011c64:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011c68:	4298      	cmp	r0, r3
 8011c6a:	9b01      	ldr	r3, [sp, #4]
 8011c6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011c70:	dd09      	ble.n	8011c86 <scalbn+0xbe>
 8011c72:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011cc8 <scalbn+0x100>
 8011c76:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8011cd0 <scalbn+0x108>
 8011c7a:	eeb0 6b47 	vmov.f64	d6, d7
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8011c84:	e7b9      	b.n	8011bfa <scalbn+0x32>
 8011c86:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011cc0 <scalbn+0xf8>
 8011c8a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8011cd8 <scalbn+0x110>
 8011c8e:	eeb0 6b47 	vmov.f64	d6, d7
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	e7f4      	b.n	8011c80 <scalbn+0xb8>
 8011c96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011c9e:	3236      	adds	r2, #54	; 0x36
 8011ca0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011ca4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011ca8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8011ce0 <scalbn+0x118>
 8011cac:	ec41 0b17 	vmov	d7, r0, r1
 8011cb0:	e7a3      	b.n	8011bfa <scalbn+0x32>
 8011cb2:	bf00      	nop
 8011cb4:	f3af 8000 	nop.w
 8011cb8:	00000000 	.word	0x00000000
 8011cbc:	43500000 	.word	0x43500000
 8011cc0:	c2f8f359 	.word	0xc2f8f359
 8011cc4:	01a56e1f 	.word	0x01a56e1f
 8011cc8:	8800759c 	.word	0x8800759c
 8011ccc:	7e37e43c 	.word	0x7e37e43c
 8011cd0:	8800759c 	.word	0x8800759c
 8011cd4:	fe37e43c 	.word	0xfe37e43c
 8011cd8:	c2f8f359 	.word	0xc2f8f359
 8011cdc:	81a56e1f 	.word	0x81a56e1f
 8011ce0:	00000000 	.word	0x00000000
 8011ce4:	3c900000 	.word	0x3c900000
 8011ce8:	ffff3cb0 	.word	0xffff3cb0

08011cec <_init>:
 8011cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cee:	bf00      	nop
 8011cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cf2:	bc08      	pop	{r3}
 8011cf4:	469e      	mov	lr, r3
 8011cf6:	4770      	bx	lr

08011cf8 <_fini>:
 8011cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cfa:	bf00      	nop
 8011cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cfe:	bc08      	pop	{r3}
 8011d00:	469e      	mov	lr, r3
 8011d02:	4770      	bx	lr
